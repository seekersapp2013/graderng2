{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../index.svelte",
    "../alertbox.svelte",
    "../auto-complete.svelte",
    "../back-button.svelte",
    "../board-tabs.svelte",
    "../button-group.svelte",
    "../calculator.svelte",
    "../calendar.svelte",
    "../image.svelte",
    "../capture-log.svelte",
    "../bar-chart.svelte",
    "../color-picker.svelte",
    "../counter.svelte",
    "../manual-time.svelte",
    "../day-time-grid.svelte",
    "../dymoji.svelte",
    "../file-browser.svelte",
    "../h-scroller.svelte",
    "../icon.svelte",
    "../input.svelte",
    "../kv-block.svelte",
    "../list-item-log.svelte",
    "../log-list-loader.svelte",
    "../modal.svelte",
    "../note-textualizer.svelte",
    "../points.svelte",
    "../pop-menu.svelte",
    "../positivity-bar.svelte",
    "../search-bar.svelte",
    "../sortable-list.svelte",
    "../stepper.svelte",
    "../tag-badge.svelte",
    "../text.svelte",
    "../time-balls.svelte",
    "../tip.svelte",
    "../toast.svelte",
    "../toggle-switch.svelte",
    "../toolbar.svelte",
    "../ball.svelte",
    "../item-ball.svelte",
    "../score-pill.svelte",
    "../board-sort.svelte",
    "../board.svelte",
    "../tracker-button.svelte",
    "../tabs.svelte",
    "../library.svelte",
    "../log-editor.svelte",
    "../map.svelte",
    "../person-modal.svelte",
    "../keypad.svelte",
    "../pin-lock.svelte",
    "../selector.svelte",
    "../stats-modal.svelte",
    "../streak-modal.svelte",
    "../step-color.svelte",
    "../step-emoji.svelte",
    "../tracker-designer.svelte",
    "../input.svelte",
    "../slider.svelte",
    "../selector.svelte",
    "../history.svelte",
    "../nomie-api.svelte",
    "../shop.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let size = 25;\n  export let speed = 750;\n  export let color = 'rgba(0,0,0,0.4)';\n  export let thickness = 2;\n  export let gap = 40;\n  export let radius = 10;\n\n  let dash;\n  $: dash = 2 * Math.PI * radius * (100 - gap) / 100\n</script>\n\n<svg\n  height=\"{size}\"\n  width=\"{size}\"\n  style=\"animation-duration:{speed}ms;\"\n  class=\"svelte-spinner\"\n  viewbox=\"0 0 32 32\"\n>\n  <circle\n    role=\"presentation\"\n    cx=\"16\"\n    cy=\"16\"\n    r=\"{radius}\"\n    stroke=\"{color}\"\n    fill=\"none\"\n    stroke-width=\"{thickness}\"\n    stroke-dasharray=\"{dash},100\"\n    stroke-linecap=\"round\"\n  />\n</svg>\n\n<style>\n  .svelte-spinner {\n    transition-property: transform;\n    animation-name: svelte-spinner_infinite-spin;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n  }\n  @keyframes svelte-spinner_infinite-spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n</style>\n",
    "<script>\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NText from \"../text/text.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let title = undefined;\n  export let message = undefined;\n  export let ok = \"Ok\";\n  export let cancel = undefined;\n  export let show = false;\n  export let onInteract = null;\n\n  let hasSlot = false;\n  let escListener;\n  $: if (show) {\n    hasSlot = arguments[1].$$slots || {}.default;\n    escListener = document.addEventListener(\"keyup\", evt => {\n      if (evt.key == \"Escape\") {\n        methods.onCancel();\n      }\n    });\n  } else {\n    escListener = document.removeEventListener(\"keyup\", () => {});\n  }\n\n  const methods = {\n    onOk() {\n      show = false;\n      if (onInteract) {\n        onInteract(true);\n        dispatch(\"close\");\n      }\n    },\n    onCancel() {\n      show = false;\n      if (onInteract) {\n        onInteract(false);\n        dispatch(\"close\");\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">:global(.alert-dialog) {\n  min-height: 200px;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2200;\n  background-color: rgba(0, 0, 0, 0.88);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.5s ease-in-out; }\n  :global(.alert-dialog).visible {\n    opacity: 1; }\n  :global(.alert-dialog).hidden {\n    pointer-events: none;\n    opacity: 0; }\n    :global(.alert-dialog).hidden .card {\n      opacity: 0;\n      transform: scaleY(0.1) scaleX(0.1); }\n  :global(.alert-dialog) .card {\n    border-radius: 1.2rem;\n    transition: all 0.2s ease-in-out;\n    max-width: 400px;\n    max-height: 80vh;\n    min-height: 100px;\n    width: 200px;\n    min-width: 300px !important;\n    flex-grow: 1;\n    background-color: var(--color-solid);\n    border: solid 1px var(--color-faded-1);\n    box-shadow: var(--box-shadow);\n    margin: 10px;\n    display: flex;\n    justify-content: stretch;\n    align-content: stretch;\n    color: var(--color-inverse-2); }\n    :global(.alert-dialog) .card .card-title {\n      line-height: 115%;\n      color: var(--color-inverse); }\n      :global(.alert-dialog) .card .card-title.message {\n        padding-bottom: 6px; }\n    :global(.alert-dialog) .card .card-body {\n      flex-grow: 1;\n      flex-shrink: 1;\n      overflow-y: auto; }\n  :global(.alert-dialog) .footer {\n    border-top: solid 1px var(--color-faded-1); }\n    :global(.alert-dialog) .footer button {\n      min-width: 120px;\n      border-radius: 0.9rem; }\n  :global(.alert-dialog) .btn-toolbar .btn {\n    min-width: 100px; }\n</style>\n\n<div\n  class=\"full-screen dark-glass alert-dialog {show === true ? 'visible' : 'hidden'}\">\n  <div class=\"alert-dialog-window card\">\n    {#if title}\n      <div\n        class=\"card-title {!hasSlot && !message ? 'message-less' : 'message'}\">\n        {title}\n      </div>\n    {/if}\n\n    {#if message && !hasSlot}\n      <div class=\"card-body align-items-center pt-0\">{message}</div>\n    {:else if hasSlot && !message}\n      <div class=\"slot-holder card-body pt-0\">\n        <slot />\n      </div>\n    {:else if hasSlot && message}\n      <div class=\"slot-holder card-body pt-0\">\n        <p>{message}</p>\n        <slot />\n      </div>\n    {/if}\n\n    <!-- -->\n\n    <div class=\"p-1 d-flex flex-row footer\">\n      {#if cancel}\n        <button\n          class=\"btn btn-lg btn-light mr-1 flex-grow\"\n          on:click={methods.onCancel}>\n          {cancel}\n        </button>\n      {/if}\n\n      <button\n        class=\"btn btn-lg btn-primary ml-1 flex-grow\"\n        on:click={methods.onOk}>\n        {ok}\n      </button>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { PeopleStore } from \"../../store/people-store\";\n  import { ContextStore } from \"../../store/context-store\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n  import tick from \"../../utils/tick/tick\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import TrackerInputer from \"../../modules/tracker/tracker-inputer\";\n\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let input = null;\n  export let scroller = false;\n\n  let state = {\n    partialTag: null,\n    results: []\n  };\n\n  let lastInput;\n  $: if (input && lastInput != input) {\n    lastInput = input;\n    onInput(input);\n  }\n\n  async function getTrackerInput(tracker) {\n    let inputer = new TrackerInputer(tracker, $TrackerStore);\n    return await inputer.getNoteString();\n  }\n\n  function close() {\n    state.results = [];\n  }\n\n  /**\n   * Auto Complete Search\n   * Searches trackers, people and context\n   * THIS IS A MESS\n   *\n   **/\n  const autoCompleteSearch = (searchTag, type = \"tracker\") => {\n    // Search for Trackers\n    try {\n      if (type == \"tracker\") {\n        let tkrs = Object.keys($TrackerStore.trackers || {})\n          .map(tag => {\n            return $TrackerStore.trackers[tag];\n          })\n          .filter(trk => {\n            return trk.tag.search(searchTag.replace(\"#\", \"\")) > -1;\n          });\n        return tkrs.length ? tkrs : null;\n\n        // Search for People\n      } else if (type === \"person\") {\n        let people = Object.keys($PeopleStore.people).filter(person => {\n          return person.search(searchTag.toLowerCase()) > -1;\n        });\n        return people.length\n          ? people.map(username => {\n              return {\n                tag: username,\n                emoji: \"👤\",\n                type: \"person\"\n              };\n            })\n          : null;\n\n        // Search for Context\n      } else if (type === \"context\") {\n        let context = $ContextStore.filter(term => {\n          let text = searchTag.replace(\"+\", \"\").toLowerCase();\n          term = term.toLowerCase();\n          return term.search(text.toLowerCase()) > -1;\n        });\n        return context.length\n          ? context.map(c => {\n              return { tag: c, emoji: \"💡\", type: \"context\", note: `+${c}` };\n            })\n          : null;\n      }\n    } catch (e) {}\n  };\n\n  const onSelect = async tracker => {\n    let note = \"\";\n    let partialTag = \"\";\n    if (tracker.type === \"person\") {\n      note = `@${tracker.tag} `;\n      partialTag = `@${state.partialTag}`;\n    } else if (tracker.type === \"context\") {\n      note = `+${tracker.tag} `;\n      partialTag = `${state.partialTag}`;\n    } else {\n      note = await getTrackerInput(tracker);\n      partialTag = `#${state.partialTag.replace(\"#\", \"\")}`;\n    }\n    // Split Input to in array\n    const inputParts = input.split(\" \").filter(word => {\n      return word != partialTag;\n    });\n    inputParts.push(note + \" \");\n    // Dispatch the Select\n    dispatch(\"select\", { tracker, note: inputParts.join(\" \") });\n    await tick(120);\n    state.partialTag = null;\n    state.results = null;\n  };\n\n  const onInput = str => {\n    let value = str;\n    let last = value.charAt(value.length - 1);\n    if (last == \" \") {\n      state.results = null;\n    } else if (value.length) {\n      let arr = value.split(\" \");\n      let tag = arr[arr.length - 1];\n      state.cursorIndex = arr.length - 1;\n      // If its a tag\n      if (tag.charAt(0) === \"#\" && tag.length > 1) {\n        state.partialTag = tag;\n        state.results = autoCompleteSearch(tag, \"tracker\");\n        // If its a person\n      } else if (tag.charAt(0) === \"@\" && tag.length > 1) {\n        state.partialTag = tag.replace(/\\@/gi, \"\");\n        state.results = autoCompleteSearch(state.partialTag, \"person\");\n        // If it's context\n      } else if (tag.charAt(0) === \"+\" && tag.length > 1) {\n        state.partialTag = tag;\n        state.results = autoCompleteSearch(tag, \"context\");\n      } else {\n        state.partialTag = null;\n        state.results = null;\n      }\n    } else {\n      state.partialTag = null;\n      state.results = null;\n    }\n  };\n</script>\n\n<style lang=\"scss\">:global(autocomplete-results .scroller) {\n  max-height: 48px;\n  overflow: scroll; }\n  :global(autocomplete-results .scroller) .tracker-list {\n    margin-top: 0px;\n    margin-bottom: 2px;\n    max-height: 40px;\n    display: flex;\n    flex-wrap: nowrap !important;\n    width: fit-content; }\n\n.autocomplete-results {\n  margin: 0px;\n  border-radius: 2px;\n  padding: 2px;\n  transition: all 0.2s ease-in-out;\n  z-index: 100; }\n  .autocomplete-results.animate.visible {\n    transition: all 0.2s ease-in-out;\n    opacity: 1; }\n  .autocomplete-results.animate.hidden {\n    max-height: 0px !important;\n    padding: 0;\n    overflow: hidden;\n    margin: 0;\n    transition: all 0.2s ease-in-out;\n    opacity: 0;\n    pointer-events: none;\n    transform: translateY(60px); }\n  .autocomplete-results .tracker-list {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap; }\n  .autocomplete-results .btn {\n    flex-grow: 0;\n    flex-shrink: 0;\n    max-width: 120px;\n    white-space: pre; }\n</style>\n\n<!--  -->\n<div\n  class=\"{scroller ? 'scroller' : 'no-scroller'} autocomplete-results animate {(state.results || []).length ? 'visible' : 'hidden'}\">\n  <div class=\"container p-0 tracker-list\">\n    <button class=\"btn btn-round btn-icon px-0\" on:click={close}>\n      <NIcon name=\"close\" />\n    </button>\n    {#each state.results || [] as tracker (tracker.tag)}\n      <button\n        class=\"btn btn-badge bg-solid-1\"\n        on:click={() => {\n          onSelect(tracker);\n        }}>\n        {#if tracker.type == 'person'}\n          <Dymoji\n            person={$PeopleStore.people[tracker.tag]}\n            className=\"mr-2\"\n            size={20}\n            radius={0.3} />\n        {:else}{tracker.emoji}{/if}\n        <div style=\"max-width:120px;\" class=\"ml-1 truncate\">\n          {#if tracker.type == 'person'}\n            {$PeopleStore.people[tracker.tag].displayName}\n          {:else if tracker.type == 'context'}\n            {tracker.tag}\n          {:else}{tracker.label}{/if}\n        </div>\n      </button>\n    {/each}\n    <div class=\"filler\" />\n  </div>\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import { navigate } from \"svelte-routing\";\n\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  export let to = undefined;\n\n  const dispatch = createEventDispatcher();\n  const onClick = event => {\n    if (to) {\n      navigate(to);\n    } else {\n      history.back();\n    }\n    dispatch(\"click\", event);\n  };\n</script>\n\n<style>\n  button {\n    margin-left: -4px;\n  }\n</style>\n\n<button class=\"btn tap-icon\" on:click={onClick}>\n  <NIcon name=\"arrowBack\" />\n</button>\n",
    "<script>\n  import { createEventDispatcher, onMount } from \"svelte\";\n\n  // components\n  import NHScroller from \"../h-scroller/h-scroller.svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  import Elephant from \"../elephant.svelte\";\n\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  export let boards = [];\n  export let active = undefined;\n\n  const dispatch = createEventDispatcher();\n\n  const state = {\n    active: null,\n    activeIndex: 0,\n    hasTimers: false\n  };\n\n  // When board size changes\n  $: if (boards.length && active) {\n    boards.forEach((b, index) => {\n      if (b.id == active && b.id !== \"all\" && b.id !== \"_timers\") {\n        state.activeIndex = index; // all\n      }\n    });\n  }\n\n  onMount(() => {});\n\n  const methods = {\n    asArray() {\n      return;\n    },\n    setActive(id) {}\n  };\n</script>\n\n<style lang=\"scss\">.add-board:before {\n  display: none; }\n</style>\n\n<NHScroller activeIndex={state.activeIndex} className=\"n-board-tabs\">\n  {#each boards as board}\n    <button\n      class=\"tab board-{board.id}\n      {board.id == active ? 'active' : 'inactive'}\"\n      on:click={() => {\n        dispatch('tabTap', board);\n      }}>\n      {#if board.id == 'all'}\n        <!-- <Elephant size={18} /> -->\n        <NIcon name=\"grid\" className=\"fill-primary-bright\" size=\"18\" />\n      {:else}{board.label}{/if}\n    </button>\n  {/each}\n  <button\n    class=\"tap-icon btn btn-clear px-2\"\n    on:click={() => {\n      dispatch('create');\n    }}>\n    <NIcon name=\"newTab\" className=\"fill-primary-bright\" size={20} />\n  </button>\n  <slot />\n  <slot name=\"right\" />\n</NHScroller>\n",
    "<script>\n  export let buttons = [];\n  export let size = \"sm\";\n  export let labelClass = \"\";\n  export let inverse = false;\n  export let color = undefined;\n\n  import NIcon from \"../icon/icon.svelte\";\n\n  function getStyle(active) {\n    if (inverse && color && active) {\n      return `background-color:${color} !important; color:#FFF; box-shadow: 0px 3px 10px -3px ${color};`;\n    } else {\n      return ``;\n    }\n  }\n</script>\n\n<style lang=\"scss\">.btn-group.inverse button {\n  color: var(--color-inverse-2);\n  opacity: 0.8; }\n</style>\n\n{#if buttons.length}\n  <div class=\"btn-group w-100 {inverse ? 'inverse' : ''}\">\n    {#each buttons as button, index (button.label + button.icon)}\n      <button\n        class=\"btn {button.active ? 'active' : ''} btn-{size}\n        \"\n        style={getStyle(button.active)}\n        on:click={button.click}>\n        {#if button.label}\n          <div class={labelClass}>{button.label}</div>\n        {:else if button.icon}\n          <NIcon name={button.icon} className={labelClass} />\n        {/if}\n      </button>\n    {/each}\n  </div>\n{/if}\n",
    "<script>\n  // Inspirated by https://codepen.io/ethanryan/details/MryqXv\n\n  // Math will do the calculatng\n  import math from \"../../utils/math/math\";\n\n  import { tick, createEventDispatcher, onMount } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  let globalAnswer = \"0\"; //declaring global variable here... this is bad practice\n  let buffer = [];\n  let fontSize = 40;\n\n  export let value = 0;\n  export let displayFormat = undefined;\n  export let defaultEphemeral = true;\n\n  let tapped = false;\n\n  onMount(() => {\n    if (value) {\n      buffer = [value];\n      change();\n    }\n  });\n\n  function change() {\n    if (buffer.length == 1) {\n      globalAnswer = buffer[0];\n    } else if (buffer.length) {\n      globalAnswer = calculateBuffer();\n    } else {\n      globalAnswer = 0;\n    }\n    if (globalAnswer != value) {\n      dispatch(\"change\", globalAnswer);\n    }\n    getFontSize();\n  }\n\n  const buttons = [\n    [\"C\", \"+/-\", \"%\", \"/\"],\n    [7, 8, 9, \"*\"],\n    [4, 5, 6, \"-\"],\n    [1, 2, 3, \"+\"],\n    [null, 0, \".\", null]\n  ];\n\n  function calculateBuffer() {\n    return math.calculate(buffer);\n  }\n\n  function click(input) {\n    // If we should clear a default and one exists\n    if (!tapped && value && defaultEphemeral) {\n      value = 0;\n      clearBuffer();\n      tapped = true;\n    }\n    insertBuffer(input);\n  }\n\n  function clearBuffer() {\n    buffer = [];\n  }\n\n  function isNumber(input) {\n    return !isNaN(input) && input !== null;\n  }\n\n  // Insert a key or operator into the buffer\n  function insertBuffer(insert) {\n    // Set last buffer\n    let lastBuffer = buffer.length ? buffer[buffer.length - 1] : null;\n\n    // if its a number and so is the last buffer - merge the nubmers\n    if (isNumber(insert) && isNumber(lastBuffer)) {\n      buffer[buffer.length - 1] = parseFloat(`${lastBuffer}${insert}`);\n      change();\n      // If the insert is a number and the last buffer - set the decimal\n    } else if (isNumber(insert) && lastBuffer == \".\") {\n      let preDecimal = buffer[buffer.length - 2];\n      let postDecimal = insert;\n      if (!math.isFloat(preDecimal)) {\n        buffer[buffer.length - 2] = parseFloat(`${preDecimal}.${postDecimal}`);\n        buffer.pop();\n      }\n      change();\n      // If the insert is a decimal - store it, but don't change anything\n    } else if (isNumber(insert)) {\n      buffer.push(insert);\n      change();\n    } else {\n      switch (insert) {\n        case \"C\":\n          buffer = [];\n          change();\n          break;\n        case \"+/-\":\n          if (globalAnswer > 0) {\n            buffer = [-Math.abs(globalAnswer)];\n          } else {\n            buffer = [Math.abs(globalAnswer)];\n          }\n          change();\n          break;\n        case \"%\":\n          buffer = [globalAnswer / 100];\n          change();\n          break;\n        default:\n          if ([\"+\", \"*\", \"/\", \"-\", \".\"].indexOf(insert) > -1) {\n            buffer.push(insert);\n            change();\n          }\n          break;\n      }\n    }\n    buffer = buffer;\n  }\n\n  async function getFontSize() {\n    await tick(10);\n    let len = globalAnswer.toString().length;\n    if (len < 10) {\n      fontSize = 40;\n    } else if (len >= 10 && len < 18) {\n      fontSize = 30;\n    } else {\n      fontSize = 20;\n    }\n  }\n</script>\n\n<style lang=\"scss\">.buttons {\n  display: grid;\n  justify-content: center;\n  grid-template-areas: \"main main main main\" \"main main main main\" \"main main main main\" \"main main main main\" \"main main main main\";\n  grid-template-columns: 70px 70px 70px 70px;\n  grid-template-rows: 70px 70px; }\n\n@media (max-width: 349.98px) {\n  .buttons {\n    grid-template-columns: 50px 50px 50px 50px;\n    grid-template-rows: 50px 50px; }\n    .buttons .btn {\n      width: 45px;\n      height: 45px; } }\n\n@media (min-width: 350px) {\n  .buttons {\n    grid-template-columns: 80px 80px 80px 80px;\n    grid-template-rows: 80px 80px; }\n    .buttons .btn {\n      width: 75px;\n      height: 75px; } }\n\n.calc-screen {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: black;\n  border: solid 1px rgba(255, 255, 255, 0.1);\n  color: white;\n  text-align: right;\n  border-radius: 4pt;\n  padding: 4pt 8pt;\n  padding-bottom: 4pt;\n  width: 100%;\n  margin: 0 auto 8pt; }\n  .calc-screen .value {\n    line-height: 100%;\n    height: 50px;\n    text-align: right; }\n  .calc-screen .preview {\n    position: absolute;\n    top: 4pt;\n    left: 8pt;\n    opacity: 0.8;\n    color: #999;\n    font-size: 0.8rem; }\n  .calc-screen .buffer {\n    height: 20px;\n    min-height: 22px;\n    font-size: 0.8rem;\n    color: #999; }\n\n.btn {\n  touch-action: manipulation;\n  background-color: dimgray;\n  border: none;\n  color: white;\n  margin: 4px;\n  border-radius: 50%;\n  line-height: 100%;\n  width: 64px;\n  height: 64px;\n  font-size: 26px; }\n\n.btn.r-0 {\n  background-color: silver;\n  color: black; }\n\n.btn.b-3 {\n  background-color: var(--color-orange);\n  color: #fff; }\n\n.btn.b-0.r-0 {\n  background-color: var(--color-red);\n  color: #fff; }\n</style>\n\n<div class=\"n-calculator\">\n  <div class=\"calc-screen\">\n    {#if displayFormat}\n      <div class=\"preview\">{displayFormat(globalAnswer)}</div>\n    {/if}\n    <div class=\"buffer\">\n      {#if buffer.length > 1}\n        {#each buffer as bit}\n          <span>{bit}</span>\n        {/each}\n      {/if}\n    </div>\n    <div class=\"value\" style=\"font-size:{fontSize}px\">{globalAnswer}</div>\n  </div>\n  <div class=\"buttons\">\n    {#each buttons as buttonRow, rIndex}\n      {#each buttonRow as button, bIndex}\n        {#if button !== null}\n          <button\n            class=\"btn r-{rIndex} b-{bIndex}\"\n            on:click={() => {\n              click(button);\n            }}>\n            {button}\n          </button>\n        {:else}\n          <span class=\"empty\" />\n        {/if}\n      {/each}\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  // Port and modification from vue-sweet-calendar\n  // https://github.com/maryayi/vue-sweet-calendar/blob/master/src/components/Calendar.vue\n\n  // svelte\n  import { onMount, onDestroy } from \"svelte\";\n  import { createEventDispatcher } from \"svelte\";\n\n  // Local\n  import DateTime from \"./date-time.js\";\n  import math from \"../../utils/math/math\";\n\n  // vendors\n  import dayjs from \"dayjs\";\n\n  // Utils\n  import Logger from \"../../utils/log/log\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NPositivityBar from \"../../components/positivity-bar/positivity-bar.svelte\";\n\n  import calcTrackerScore from \"../../modules/scoring/score-tracker\";\n\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  const console = new Logger(\"📅 calendar/calendar\");\n  const dispatch = createEventDispatcher();\n\n  // export let name = \"Calendar\";\n  // export let color = \"#319ed7\";\n\n  // Props\n  export let initialDate = new Date();\n  export let firstDayOfWeek = 1; // 1: Sunday, 2: Monday, etc\n  // export let eventCategories = [];\n  export let events = [];\n  export let offDays = [[1, 7]];\n  export let showHeader = true;\n  export let tracker = null;\n\n  // Data\n  export let state = {\n    date: dayjs(initialDate),\n    today: new Date(),\n    weekdays: null,\n    percentage: null,\n    totals: {\n      positive: 0,\n      negative: 0,\n      neutral: 0\n    }\n  };\n\n  let mounted = false;\n\n  onMount(() => {\n    mounted = true;\n  });\n\n  onDestroy(() => {\n    mounted = false;\n  });\n\n  let days = null;\n  let day = null;\n\n  let startWeekDayOfMonth =\n    state.date\n      .startOf(\"month\")\n      .toDate()\n      .getDay() + 1;\n  let numberOfDays = state.date.daysInMonth();\n  let selectedMonth = state.date.month();\n  let selectedMonthName = state.date.format(\"MMMM\");\n  let selectedYear = state.date.format(\"YYYY\");\n  let monthStartDate = dayjs(state.date).startOf(\"month\");\n  let refreshing = false;\n\n  let positiveCount = 0;\n  let negativeCount = 0;\n  let neutralCount = 0;\n\n  // If the initial date is set, convert to dayjs date\n  $: if (initialDate) {\n    state.date = dayjs(initialDate);\n    state.weekdays = methods.generateWeekdayNames(firstDayOfWeek);\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let neutralCount = 0;\n  }\n\n  // If date change - do the magic.\n  let lastDate = null;\n  $: if (state.date && state.date != lastDate) {\n    lastDate = state.date;\n\n    state.totals.neutral = 0;\n    state.totals.positive = 0;\n    state.totals.negative = 0;\n\n    startWeekDayOfMonth =\n      state.date\n        .startOf(\"month\")\n        .toDate()\n        .getDay() + 1;\n\n    numberOfDays = state.date.daysInMonth();\n    selectedMonth = state.date.month();\n    selectedMonthName = state.date.format(\"MMMM\");\n    selectedYear = state.date.format(\"YYYY\");\n    monthStartDate = dayjs(state.date).startOf(\"month\");\n\n    // Create array of empty days previous month calendar bleed over\n    let emptyDays = Array((startWeekDayOfMonth - firstDayOfWeek + 7) % 7).fill(\n      null\n    );\n    // Create array of days for this month\n    let nonEmptyDays = Array(numberOfDays)\n      .fill()\n      .map((item, index) => dayjs(monthStartDate).add(index, \"days\"));\n\n    // Merge the arrays\n    days = emptyDays.concat(nonEmptyDays);\n    state.percentage = nonEmptyDays / (emptyDays + nonEmptyDays);\n  }\n\n  // Methods\n  const methods = {\n    prevMonth() {\n      state.date = state.date.add(1, \"month\");\n    },\n    nextMonth() {\n      state.date = state.date.subtract(1, \"month\");\n    },\n    generateWeekdayNames(firstDayOfWeek = 1) {\n      let weekdays = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n      ];\n      for (let i = 2; i <= firstDayOfWeek; i++) {\n        let first = weekdays.shift();\n        weekdays.push(first);\n      }\n      return weekdays;\n    },\n    // Refresh the view\n    refresh() {\n      refreshing = true;\n      setTimeout(() => {\n        refreshing = false;\n      }, 1);\n    },\n    // Go to Today\n    goToday() {\n      state.date = dayjs();\n    },\n    getDayStyle(day) {\n      let score = undefined;\n\n      // let activeToday = events.find(row => {\n      //   return day.toDate().toDateString() === new Date(row.end).toDateString();\n      // });\n\n      let values = events\n        .filter(row => {\n          return (\n            day.toDate().toDateString() === new Date(row.end).toDateString()\n          );\n        })\n        .map(row => {\n          if (!row.trackers) {\n            row.getMeta();\n          }\n          if (tracker.math == \"sum\") {\n            return math.sum(row.getTrackerValues(tracker.tag));\n          } else {\n            return math.average(row.getTrackerValues(tracker.tag));\n          }\n        });\n      let total = 0;\n      if (values.length) {\n        if (tracker.math == \"sum\") {\n          total = math.sum(values);\n        } else {\n          total = math.average(values);\n        }\n      }\n      if (total) {\n        score = calcTrackerScore(total, tracker);\n      }\n      // Lets extract the score for this tracker\n      if (values.length) {\n        // Did we pass in a tracker?\n        if (score == 0) {\n          state.totals.neutral = state.totals.neutral + 1;\n        } else if (score > 0) {\n          state.totals.positive = state.totals.positive + 1;\n        } else if (score < 0) {\n          state.totals.negative = state.totals.negative + 1;\n        }\n        return methods.getDayBorder(score);\n      } else {\n        return ``;\n      }\n    },\n    getDayBorder(score) {\n      if (score) {\n        if (score > 0) {\n          return `font-weight:bold; border:solid 2px var(--color-green)`;\n        } else {\n          return `font-weight:bold; border:solid 2px var(--color-red)`;\n        }\n      } else {\n        return `font-weight:bold; border:solid 2px var(--color-primary-bright)`;\n      }\n    },\n    getDayClass(day) {\n      let activeToday = events.find(row => {\n        return (\n          day.toDate().toDateString() === state.date.toDate().toDateString()\n        );\n      });\n      let classes = [\n        \"day\",\n        `day-${day.format(\"D\")}`,\n        `weekday-${day.toDate().getDay()}`,\n        activeToday ? \"selected\" : \"not-selected\",\n        offDays.includes(day.toDate().getDay()) ? \"off-day\" : null,\n        day.toDate().toDateString() === state.today.toDateString()\n          ? \"today\"\n          : null\n      ];\n      return classes.join(\" \");\n    }\n  };\n</script>\n\n<style lang=\"scss\">.sweet-calendar .sweet-container .header {\n  align-items: center;\n  display: grid;\n  grid-column-gap: 5px;\n  grid-template-columns: 50px 1fr 50px; }\n  .sweet-calendar .sweet-container .header .month {\n    justify-self: center; }\n  .sweet-calendar .sweet-container .header .left-arrow {\n    justify-self: end; }\n    .sweet-calendar .sweet-container .header .left-arrow span {\n      cursor: pointer; }\n  .sweet-calendar .sweet-container .header .right-arrow {\n    justify-self: start; }\n    .sweet-calendar .sweet-container .header .right-arrow span {\n      cursor: pointer; }\n\n.sweet-calendar .sweet-container .body {\n  align-items: center;\n  display: grid;\n  grid-row-gap: 8px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(7, 1fr);\n  justify-items: center; }\n  .sweet-calendar .sweet-container .body .day-name {\n    color: var(--color-inverse);\n    font-weight: bold; }\n  .sweet-calendar .sweet-container .body .day-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 28px;\n    position: relative;\n    width: 100%; }\n    .sweet-calendar .sweet-container .body .day-container .day {\n      align-content: center;\n      border-radius: 50%;\n      box-sizing: content-box;\n      color: var(--color-inverse-2);\n      display: flex;\n      height: 26px;\n      justify-content: center;\n      min-width: 26px; }\n      .sweet-calendar .sweet-container .body .day-container .day.selected {\n        border: 3px solid var(--color-solid-2); }\n      .sweet-calendar .sweet-container .body .day-container .day.off-day {\n        background-color: #e5e5e5;\n        font-weight: bold; }\n      .sweet-calendar .sweet-container .body .day-container .day span {\n        font-size: 14px;\n        margin: 0;\n        padding: 0;\n        align-self: center; }\n\n.sweet-calendar .calendar {\n  background-color: inherit; }\n  .sweet-calendar .calendar .body .day-container .before,\n  .sweet-calendar .calendar .body .day-container .after {\n    height: 28px; }\n\n.sweet-calendar .date-picker {\n  background-color: inherit; }\n  .sweet-calendar .date-picker .body .day-container .day:hover {\n    background-color: rgba(153, 66, 66, 0.5);\n    border: 2px solid #994242;\n    cursor: pointer; }\n  .sweet-calendar .date-picker .body .day-container .day.selected {\n    border: 2px solid #994242;\n    color: #994242; }\n\n.sweet-calendar .day.unfilled {\n  background-color: transparent; }\n</style>\n\n{#if state.date && mounted}\n  <div class=\"sweet-calendar\">\n    <div class=\"sweet-container calendar\">\n      {#if showHeader}\n        <div class=\"header\">\n\n          <div class=\"left-arrow\" on:click={methods.prevMonth}>\n            <NIcon name=\"chevronLeft\" className=\"fill-primary-bright\" />\n\n          </div>\n          <div class=\"month\">{selectedMonthName} {selectedYear}</div>\n          <div class=\"right-arrow\" on:click={methods.nextMonth}>\n            <NIcon name=\"chevronRight\" className=\"fill-primary-bright\" />\n          </div>\n\n        </div>\n      {/if}\n\n      <div class=\"body\">\n        {#each state.weekdays || [] as day, index}\n          <div class=\"day-name\" title={day}>{day[0]}</div>\n        {/each}\n        {#each days || [] as day, index}\n          <div class=\"day-container clickable\">\n            {#if day}\n              <div\n                data-date={day.format('YYYY-MM-DD')}\n                on:click={event => {\n                  dispatch('dayClick', day);\n                }}\n                class={methods.getDayClass(day)}\n                style={methods.getDayStyle(day)}>\n                <span>{day.format('D')}</span>\n              </div>\n            {/if}\n          </div>\n        {/each}\n      </div>\n    </div>\n  </div>\n  <NPositivityBar\n    positive={state.totals.positive}\n    neutral={state.totals.neutral}\n    negative={state.totals.negative} />\n{:else}Loading{/if}\n",
    "<script>\n  import Storage from \"../../modules/storage/storage\";\n  export let path;\n  export let className = null;\n  export let style = undefined;\n  export let display = \"img\";\n  export let height = \"300px\";\n\n  const image = async () => {\n    return Storage.get(path);\n  };\n</script>\n\n<style>\n  .camera-image-div {\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    width: 100%;\n    flex-grow: 1;\n    flex-shrink: 1;\n  }\n</style>\n\n{#await image() then src}\n  {#if display === 'div'}\n    <div\n      alt=\"Nomie Photo\"\n      class=\"camera-image camera-image-div {className}\"\n      style=\"height:300px; background-image:url({src});\" />\n  {:else}\n    <img\n      {src}\n      alt=\"Nomie Photo\"\n      class=\"camera-image camera-image-img {className}\"\n      style=\"{style}; height:{height}\" />\n  {/if}\n{/await}\n",
    "<script>\n  /**\n   * Capture Log\n   *\n   * The Component used to construct a new log.\n   *\n   */\n\n  // Svelte\n  import { onDestroy, onMount } from \"svelte\";\n  // import { slide } from \"svelte/transition\";\n\n  // Modules\n  import NomieLog from \"../modules/nomie-log/nomie-log\";\n  import Storage from \"../modules/storage/storage\";\n\n  //Components\n  import NItem from \"../components/list-item/list-item.svelte\";\n  import NIcon from \"../components/icon/icon.svelte\";\n  import NCell from \"../components/cell/cell.svelte\";\n  import NPoints from \"../components/points/points.svelte\";\n  import dayjs from \"dayjs\";\n  import md5 from \"md5\";\n  import domtoimage from \"dom-to-image-chrome-fix\";\n  import Dymoji from \"../components/dymoji/dymoji.svelte\";\n  import AutoComplete from \"../components/auto-complete/auto-complete.svelte\";\n  import NPositivitySelector from \"../components/positivity-selector/positivity-selector.svelte\";\n  import NSpinner from \"../components/spinner/spinner.svelte\";\n\n  // Utils\n  import Logger from \"../utils/log/log\";\n  import time from \"../utils/time/time\";\n  import ScoreNote from \"../modules/scoring/score-note\";\n  import TrackerInputer from \"../modules/tracker/tracker-inputer\";\n  import tick from \"../utils/tick/tick\";\n  import math from \"../utils/math/math\";\n\n  // Stores\n  import { Interact } from \"../store/interact\";\n  import { TrackerStore } from \"../store/tracker-store\";\n  import { LedgerStore } from \"../store/ledger\";\n  import { ActiveLogStore } from \"../store/active-log\";\n  import { UserStore } from \"../store/user\";\n  import { Lang } from \"../store/lang\";\n  import { PeopleStore } from \"../store/people-store\";\n  import { ContextStore } from \"../store/context-store\";\n\n  // Consts\n  const console = new Logger(\"capture-log\");\n  const isIOS =\n    !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n\n  let textarea;\n  let iOSFileInput;\n  let saving = false;\n  let saved = false;\n\n  $: if ($LedgerStore.saving) {\n    saving = true;\n  } else {\n    saving = false;\n  }\n\n  let state = {\n    date: null,\n    dateStarter: dayjs().format(\"YYYY-MM-DDTHH:mm\"),\n    score: 0,\n    showCustomDate: false,\n    autocompleteResults: null,\n    cursorIndex: null,\n    partialTag: null,\n    advanced: false,\n    dateFormated: null\n  };\n\n  function toggleAdvanced() {\n    state.advanced = !state.advanced;\n  }\n\n  $: if ($ActiveLogStore.end) {\n    let timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n    let dateFormat = $UserStore.meta.is24Hour ? \"MM/DD/YYYY\" : \"MMM D YYYY\";\n    state.dateFormated = dayjs($ActiveLogStore.end).format(\n      `${dateFormat} ${timeFormat}`\n    );\n  }\n\n  // TODO: Add a media/photo type of thing that can be added to a log..\n\n  const methods = {\n    setDate() {\n      state.date = time.datetimeLocal(state.dateStarter);\n      $ActiveLogStore.start = state.date.getTime();\n      $ActiveLogStore.end = state.date.getTime();\n      state.showCustomDate = false;\n    },\n    async selectDate() {\n      let date = await Interact.selectDate(\n        $ActiveLogStore.end ? new Date($ActiveLogStore.end) : new Date()\n      );\n\n      if (date) {\n        await tick(10);\n        ActiveLogStore.update(log => {\n          log.end = date;\n          return log;\n        });\n      }\n    },\n    clearDate() {\n      state.date = null;\n      $ActiveLogStore.start = null;\n      $ActiveLogStore.end = null;\n      state.showCustomDate = false;\n    },\n    clearLocation() {\n      $ActiveLogStore.lat = null;\n      $ActiveLogStore.lng = null;\n      $ActiveLogStore.location = null;\n    },\n    toggleCustomDate() {\n      if (state.date) {\n        // They clicked it - solets clear it\n        state.date = null;\n      } else {\n        state.showCustomDate = true;\n      }\n    },\n    async toggleCustomLocation() {\n      if ($ActiveLogStore.lat) {\n        $ActiveLogStore.lat = null;\n        $ActiveLogStore.lng = null;\n      } else {\n        let location = await Interact.pickLocation();\n        if (location) {\n          $ActiveLogStore.lat = location.lat;\n          $ActiveLogStore.lng = location.lng;\n          $ActiveLogStore.location = location.location;\n        }\n      }\n    },\n    checkTextareaSize() {\n      if (textarea) {\n        textarea.style.height = \"42px\";\n        let height = (textarea || {}).scrollHeight || 42;\n        if (textarea && $ActiveLogStore.note.length > 0) {\n          textarea.style.height = (height > 300 ? 300 : height) + \"px\";\n        } else {\n          textarea.style.height = \"42px\";\n        }\n        // Cal\n        // methods.calculateScore();\n      }\n    },\n    /**\n     * Check for Auto Complete\n     */\n    autoCompleteSearch(searchTag, type = \"tracker\") {\n      // Search for Trackers\n      try {\n        if (type == \"tracker\") {\n          let tkrs = Object.keys($TrackerStore.trackers || {})\n            .map(tag => {\n              return $TrackerStore.trackers[tag];\n            })\n            .filter(trk => {\n              return trk.tag.search(searchTag.replace(\"#\", \"\")) > -1;\n            });\n          return tkrs.length ? tkrs : null;\n\n          // Search for People\n        } else if (type === \"person\") {\n          try {\n            let people = Object.keys($PeopleStore.people || []).filter(\n              person =>\n                person.toLowerCase().search(searchTag.replace(\"@\", \"\")) > -1\n            );\n            return people.length\n              ? people.map(username => {\n                  return { tag: username, emoji: \"👤\", type: \"person\" };\n                })\n              : null;\n          } catch (e) {\n            console.error(\"Error Caught\", e.message);\n          }\n\n          return null;\n\n          // Search for Context\n        } else if (type === \"context\") {\n          let context = $ContextStore.filter(term => {\n            let text = searchTag.replace(\"+\", \"\").toLowerCase();\n            term = term.toLowerCase();\n            return term.search(text.toLowerCase()) > -1;\n          });\n          return context.length\n            ? context.map(c => {\n                return { tag: c, emoji: \"💡\", type: \"context\" };\n              })\n            : null;\n        }\n      } catch (e) {}\n    },\n    calculateScore() {\n      $ActiveLogStore.score =\n        $ActiveLogStore.score || ScoreNote($ActiveLogStore.note);\n    },\n    async logSave() {\n      methods.calculateScore();\n      await LedgerStore.saveLog($ActiveLogStore); // TODO: Make ledger task instead\n      methods.clear();\n    },\n    async autocompleteText(text) {\n      ActiveLogStore.update(s => {\n        s.note = s.note.replace(state.partialTag, text + \" \");\n        return s;\n      });\n      await tick(1);\n      document.getElementById(\"textarea-capture-note\").focus();\n      methods.autoCompleteDone();\n    },\n    async autoCompleteDone() {\n      state.partialTag = null;\n      state.cursorIndex = null;\n      state.autocompleteResults = null;\n    },\n\n    keyPress(event) {\n      if (event.key === \"Enter\" && event.getModifierState(\"Shift\")) {\n        event.preventDefault();\n      } else {\n        let value = event.target.value;\n        let last = value.charAt(value.length - 1);\n        if (last == \" \") {\n          state.autocompleteResults = null;\n        } else if (value.length) {\n          let arr = value.split(\" \");\n          let tag = arr[arr.length - 1];\n          state.cursorIndex = arr.length - 1;\n          // If its a tag\n          if (tag.charAt(0) === \"#\" && tag.length > 1) {\n            state.partialTag = tag;\n            state.autocompleteResults = methods.autoCompleteSearch(\n              tag,\n              \"tracker\"\n            );\n            // If its a person\n          } else if (tag.charAt(0) === \"@\" && tag.length > 1) {\n            state.partialTag = tag;\n            state.autocompleteResults = methods.autoCompleteSearch(\n              tag,\n              \"person\"\n            );\n            // If it's context\n          } else if (tag.charAt(0) === \"+\" && tag.length > 1) {\n            state.partialTag = tag;\n            state.autocompleteResults = methods.autoCompleteSearch(\n              tag,\n              \"context\"\n            );\n          } else {\n            state.partialTag = null;\n            state.autocompleteResults = null;\n          }\n        } else {\n          state.partialTag = null;\n          state.autocompleteResults = null;\n        }\n      }\n      methods.checkTextareaSize();\n    },\n    clear() {\n      ActiveLogStore.clear();\n      setTimeout(() => {\n        state.date = null;\n        state.autocompleteResults = null;\n        state.advanced = false;\n        state.cursorIndex = null;\n        state.dateStarter = dayjs().format(\"YYYY-MM-DDTHH:mm\");\n        if (textarea) {\n          textarea.style.height = \"40px\";\n        }\n      }, 120);\n    },\n\n    ifPopulated() {\n      return (\n        $ActiveLogStore.lat ||\n        ($ActiveLogStore.note.trim() || \"\").length > 0 ||\n        $ActiveLogStore.photo\n      );\n    }\n  };\n\n  // Clear the settings when saved\n  LedgerStore.hook(\"onLogSaved\", res => {\n    methods.clear();\n  });\n\n  // When a tag is added by a button or other service\n  ActiveLogStore.hook(\"onAddTag\", res => {\n    // add space to the end.\n    setTimeout(() => {\n      if (textarea) {\n        textarea.value = textarea.value;\n      }\n      // adjust textarea size\n      methods.checkTextareaSize();\n    }, 10);\n  });\n</script>\n\n<style lang=\"scss\">#note-capture {\n  background-color: var(--color-solid); }\n\n:global(.capture-log .tracker-list) {\n  margin-top: -10px !important; }\n\n.post-score {\n  position: absolute;\n  top: -10px;\n  background-color: var(--color-solid);\n  box-shadow: var(--box-shadow);\n  padding: 2px 6px;\n  border-radius: 4px; }\n\n.capture-log {\n  padding: 10px;\n  position: relative;\n  z-index: 1; }\n\n.advanced {\n  position: relative;\n  z-index: 1200; }\n\n.autocomplete-results {\n  background-color: var(--color-solid-1);\n  margin: 0px;\n  border-radius: 2px;\n  padding: 2px;\n  transition: all 0.2s ease-in-out;\n  z-index: 100; }\n  .autocomplete-results.animate.visible {\n    transition: all 0.2s ease-in-out;\n    opacity: 1; }\n  .autocomplete-results.animate.hidden {\n    max-height: 0px !important;\n    padding: 0;\n    overflow: hidden;\n    margin: 0;\n    transition: all 0.2s ease-in-out;\n    opacity: 0;\n    pointer-events: none;\n    transform: translateY(60px); }\n  .autocomplete-results .tracker-list {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap; }\n  .autocomplete-results .btn {\n    flex-grow: 1;\n    flex-shrink: 1;\n    box-shadow: var(--box-shadow-tight);\n    background-color: var(--color-solid);\n    color: var(--color-inverse-2);\n    margin: 3px;\n    font-size: 0.82rem;\n    padding: 5px 6px; }\n\n.more-options {\n  position: relative;\n  z-index: 130;\n  padding: 0px 10px 10px;\n  margin-top: -12px; }\n  .more-options .advanced-options-list {\n    transition: all 0.2s ease-in-out;\n    border: none !important; }\n    .more-options .advanced-options-list .btn-primary {\n      background-color: var(--color-primary-bright);\n      color: #fff; }\n    .more-options .advanced-options-list.hidden {\n      height: 1px;\n      overflow: hidden;\n      opacity: 0; }\n    .more-options .advanced-options-list.visible {\n      height: fit-content; }\n\n.advanced-toggle {\n  background-color: transparent;\n  color: var(--color-inverse);\n  border: none;\n  display: block;\n  width: 100%;\n  outline: none !important;\n  transition: all 0.2s ease-in-out; }\n  .advanced-toggle.active {\n    color: #e94151;\n    font-size: 33px; }\n\n.save-progress {\n  position: absolute;\n  top: -4px;\n  left: 0;\n  height: 4px;\n  background-color: #38a83f;\n  opacity: 0;\n  width: 0px;\n  transition: all 700ms ease-out; }\n  .save-progress.saving {\n    background-color: #38a83f;\n    opacity: 1;\n    width: 100%; }\n  .save-progress.saved {\n    transition: none;\n    background-color: #38a83f;\n    opacity: 0;\n    width: 0%; }\n  .save-progress.clear {\n    transition: none;\n    width: 0; }\n\n.save-button {\n  padding: 0;\n  width: 30px;\n  height: 30px;\n  border-radius: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  background-color: green;\n  flex-grow: 0;\n  flex-shrink: 0;\n  margin-bottom: 6px;\n  border: none;\n  font-size: 0.9rem;\n  color: #fff; }\n  .save-button svg {\n    fill: #fff;\n    height: 15px;\n    width: 15px; }\n\n.mask-textarea {\n  display: flex;\n  align-items: flex-end;\n  min-height: 40px;\n  max-height: 200px;\n  border-radius: 20px;\n  background-color: var(--input-background);\n  overflow: hidden;\n  transition: all 0.2s ease-in-out;\n  border: solid 1px var(--color-faded-1); }\n  .mask-textarea .save-button {\n    display: none; }\n  .mask-textarea.populated {\n    background-color: rgba(56, 168, 63, 0.2);\n    box-sizing: border-box; }\n    .mask-textarea.populated .save-button {\n      display: inline-flex; }\n  .mask-textarea textarea {\n    border: none;\n    background-color: transparent;\n    width: 100%;\n    height: 40px;\n    padding: 8px 0;\n    color: var(--color-inverse-1);\n    margin: 0 16px;\n    margin-right: 0px;\n    font-size: 1rem; }\n    .mask-textarea textarea:focus, .mask-textarea textarea:active {\n      outline: none; }\n</style>\n\n<div\n  class=\"capture-wrapper\"\n  on:swipeup={methods.swipeUp}\n  on:swipedown={methods.swipeDown}>\n\n  <!-- \n    AUTO COMPLETE RESULTS\n  -->\n\n  <div class=\"capture-log\">\n    <div\n      class=\"save-progress {saved ? 'saved' : ''}\n      {saving ? 'saving' : ''}\" />\n    <div class=\"container p-0\">\n\n      <!-- Auto Complet e-->\n      <AutoComplete\n        input={$ActiveLogStore.note}\n        scroller\n        on:select={evt => {\n          ActiveLogStore.updateNote(evt.detail.note);\n          textarea.focus();\n          textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n          tick(100).then(() => {\n            methods.checkTextareaSize();\n          });\n        }} />\n      <!-- Note Input -->\n      <div\n        class=\"mask-textarea {$ActiveLogStore.lat || $ActiveLogStore.note.trim().length > 0 || $ActiveLogStore.photo ? 'populated' : 'empty'}\">\n\n        <textarea\n          id=\"textarea-capture-note\"\n          style=\"overflow:hidden\"\n          disabled={saving || saved}\n          bind:value={$ActiveLogStore.note}\n          bind:this={textarea}\n          placeholder={Lang.t('general.whats-up')}\n          on:input={methods.keyPress}\n          on:paste={methods.keyPress} />\n\n        <button\n          class=\"btn btn-clear btn-icon mr-1 {state.advanced ? 'text-green' : 'text-inverse'}\"\n          on:click={toggleAdvanced}>\n          <NIcon\n            name=\"more\"\n            className={state.advanced ? 'fill-green' : 'fill-inverse'} />\n        </button>\n        {#if !saving}\n          <button class=\"save-button\" on:click={methods.logSave}>\n            <NIcon name=\"sendFilled\" style=\"fill: #FFF;\" size=\"16\" />\n          </button>\n        {:else}\n          <button class=\"save-button\">\n            <NSpinner size={20} color=\"#FFFFFF\" />\n          </button>\n        {/if}\n      </div>\n    </div>\n\n    {#if $ActiveLogStore.score}\n      <div class=\"post-score\">\n        <NPoints points={$ActiveLogStore.score} />\n      </div>\n    {/if}\n\n  </div>\n  {#if state.advanced}\n    <div class=\"advanced\">\n      <div class=\"container\">\n        <!-- Score -->\n        <NItem\n          truncate\n          compact\n          className=\"bg-transparent solo text-sm score-item\">\n          <div slot=\"left\" class=\"text-sm text-bold\">\n            <NIcon name=\"star\" className=\"mr-2 fill-primary-bright\" size=\"16\" />\n          </div>\n          <div>{Lang.t('general.score', 'Score')}</div>\n          <div slot=\"right\">\n            <NPositivitySelector\n              size=\"md\"\n              score={$ActiveLogStore.score}\n              on:change={evt => {\n                $ActiveLogStore.score = evt.detail;\n              }} />\n          </div>\n        </NItem>\n        <!-- Location -->\n        <NItem\n          truncate\n          compact\n          className=\"bg-transparent clickable mr-2 solo text-sm\"\n          on:click={methods.toggleCustomLocation}>\n          <div slot=\"left\" class=\"text-sm text-bold\">\n            <NIcon name=\"pin\" className=\"mr-2 fill-primary-bright\" size=\"16\" />\n          </div>\n          {#if !$ActiveLogStore.lat}\n            {Lang.t('general.location', 'Location')}\n          {:else}\n            {$ActiveLogStore.location || ''}\n            {math.round($ActiveLogStore.lat, 100)},{math.round($ActiveLogStore.lng, 100)}\n          {/if}\n          <div slot=\"right\" class=\"n-row\">\n            {#if $ActiveLogStore.lat}\n              <button\n                class=\"btn btn-clear btn-icon\"\n                on:click|stopPropagation={methods.clearLocation}>\n                <NIcon name=\"close\" className=\"fill-red\" size=\"22\" />\n              </button>\n            {:else if $UserStore.alwaysLocate}\n              <label class=\"text-sm text-faded-3 \">Current</label>\n            {:else}\n              <label class=\"text-sm text-faded-3 \">None</label>\n            {/if}\n          </div>\n        </NItem>\n        <!-- Date / Time -->\n        <NItem\n          compact\n          truncate\n          className=\"bg-transparent mt-1 mb-2 mr-2 solo text-sm\"\n          on:click={methods.selectDate}>\n          <div slot=\"left\" class=\"text-sm text-bold\">\n            <NIcon name=\"time\" className=\"mr-2 fill-primary-bright\" size=\"16\" />\n          </div>\n          <div>\n            {#if !$ActiveLogStore.end}\n              {Lang.t('general.set-date', 'Set Date')}\n            {:else}{state.dateFormated}{/if}\n          </div>\n          <div slot=\"right\" class=\"n-row\">\n            {#if $ActiveLogStore.end}\n              <button\n                class=\"btn btn-clear btn-icon\"\n                on:click|stopPropagation={methods.clearDate}>\n                <NIcon name=\"close\" className=\"fill-red\" size=\"22\" />\n              </button>\n            {:else}\n              <label class=\"text-sm text-faded-3\">Now</label>\n            {/if}\n          </div>\n        </NItem>\n      </div>\n    </div>\n  {/if}\n\n</div>\n",
    "<script>\n  /**\n   * God Speed! We're going to make a chart\n   */\n\n  // Svelte\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  // Utils\n\n  import math from \"../../utils/math/math\";\n\n  // vendor\n  import { scaleLinear } from \"d3-scale\";\n  import { UserStore } from \"../../store/user\";\n  import NIcon from \"../icon/icon.svelte\";\n\n  export let labels = [];\n  export let height = 200;\n  export let width = 500;\n  export let title = \"\";\n  export let color = \"#4d84a1\";\n  export let points;\n  export let activeIndex;\n  export let xFormat = x => x;\n  export let yFormat = y => y;\n\n  const xTicks = labels;\n  let yTicks = [0, 5, 10, 20];\n  const padding = { top: 30, right: 15, bottom: 25, left: 25 };\n\n  let finalPoints = [];\n  let lastPoints = null;\n\n  $: hourFormat = $UserStore.meta.is24Hour ? \"ddd HH\" : \"ddd ha\";\n\n  $: if (points && JSON.stringify(points) !== JSON.stringify(lastPoints)) {\n    lastPoints = JSON.stringify(points);\n\n    if (points.length) {\n      let values = points.map(point => point.y);\n\n      let sum = math.sum(values);\n      let max = math.max(values);\n\n      if (sum) {\n        yTicks = [0, math.round(max * 0.5), max];\n      }\n      finalPoints = math.percentile(values).map((value, index) => {\n        let p = { ...points[index] };\n        p.y = value;\n        return p;\n      });\n    }\n  }\n\n  $: xScale = scaleLinear()\n    .domain([0, xTicks.length])\n    .range([padding.left, width - padding.right]);\n\n  $: yScale = scaleLinear()\n    .domain([0, Math.max.apply(null, yTicks)])\n    .range([height - padding.bottom, padding.top]);\n\n  $: innerWidth = width - (padding.left + padding.right);\n  $: barWidth = innerWidth / xTicks.length;\n\n  let lastActiveIndex;\n\n  $: if (activeIndex != lastActiveIndex) {\n    lastActiveIndex = activeIndex;\n  }\n\n  function showValue(value, index) {\n    return true;\n  }\n\n  function showLabel(label, index) {\n    if (labels.length > 12 && labels.length < 24) {\n      return index % 2;\n    } else if (labels.length >= 24) {\n      return index % 4 != 0 ? false : true;\n    } else {\n      return true;\n    }\n  }\n\n  const methods = {\n    onTap(event, data) {\n      dispatch(\"tap\", data);\n    },\n    formatMobile(tick, index) {\n      if (index % 2) {\n        return \"\";\n      } else {\n        return tick.substr(0, 2);\n      }\n    },\n    toTrustedValue(value, base) {\n      return isNaN(value) ? base : value;\n    }\n  };\n\n  onMount(() => {});\n</script>\n\n<style lang=\"scss\">h2 {\n  text-align: center; }\n\n.n-chart {\n  width: 100%;\n  max-width: 500px;\n  position: relative;\n  margin: 0 auto; }\n\nsvg {\n  position: relative;\n  width: 100%; }\n\n.tick {\n  font-size: 0.625em; }\n\n.tick line {\n  stroke: var(--color-solid-2);\n  stroke-dasharray: 2; }\n\n.tick text {\n  fill: var(--color-inverse-3);\n  text-anchor: start; }\n\n.tick.tick-0 line {\n  stroke-dasharray: 0; }\n\n.x-axis .tick text {\n  text-anchor: middle; }\n\n.title {\n  position: absolute;\n  top: -2px;\n  left: 20px;\n  font-size: 0.7rem;\n  color: var(--color-inverse); }\n\n.active-item {\n  position: absolute;\n  top: 2px;\n  right: 0px;\n  color: var(--color-inverse);\n  z-index: 120;\n  padding: 4px 10px;\n  font-size: 0.7rem;\n  display: flex; }\n  .active-item .value {\n    color: #fff;\n    text-shadow: 0px 2px 3px rgba(0, 0, 0, 0.4);\n    border-radius: 10px;\n    padding: 0 6px; }\n  .active-item label {\n    margin: 0;\n    margin-right: 6px; }\n\n.bars rect {\n  stroke: none;\n  opacity: 0.65;\n  transition: all 0.2s, width 0; }\n  .bars rect.active {\n    stroke: rgba(0, 0, 0, 0.2);\n    stroke-width: 4px;\n    opacity: 1; }\n</style>\n\n{#if points}\n  <div\n    class=\"n-chart\"\n    bind:clientWidth={width}\n    bind:clientHeight={height}\n    on:swiperight={() => {\n      dispatch('swipeRight');\n    }}\n    on:swipeleft={() => {\n      dispatch('swipeLeft');\n    }}>\n    {#if title}\n      <div\n        class=\"title clickable truncate\"\n        style=\"z-index:120;\"\n        on:click={() => {\n          dispatch('titleClick', title);\n        }}>\n        {title}\n        <NIcon name=\"chevronRight\" size=\"14\" />\n      </div>\n    {/if}\n    <svg height={`${height}px`}>\n      <!-- y axis -->\n      <g class=\"axis y-axis\" transform=\"translate(0,{padding.top})\">\n        {#each yTicks as tick, index}\n          {#if showValue(tick, index)}\n            <g\n              class=\"tick tick-{tick}\"\n              transform=\"translate(0, {yScale(tick) - padding.bottom})\">\n              <line x2=\"100%\" />\n              <text y=\"-4\">{yFormat(tick)} {tick === 20 ? '' : ''}</text>\n            </g>\n          {/if}\n        {/each}\n      </g>\n\n      <!-- x axis -->\n      <g class=\"axis x-axis\">\n        {#each points as point, i}\n          {#if showLabel(points, i)}\n            <g class=\"tick\" transform=\"translate({xScale(i)},{height})\">\n              <text x={barWidth / 2} y=\"-4\">{xFormat(point.x)}</text>\n            </g>\n          {/if}\n        {/each}\n      </g>\n\n      <g class=\"bars\">\n        {#each points as point, i}\n          <rect\n            on:click={event => {\n              methods.onTap(event, { index: i, point: point });\n            }}\n            rx=\"4\"\n            class=\"bar {activeIndex === i ? 'active' : ''}\"\n            ry=\"4\"\n            style=\"fill: {color}\"\n            x={xScale(i) + 2}\n            y={methods.toTrustedValue(yScale(point.y), 0)}\n            width={barWidth - 4}\n            height={methods.toTrustedValue(height - padding.bottom - yScale(point.y), 0)} />\n        {/each}\n      </g>\n    </svg>\n    {#if activeIndex !== undefined && points[activeIndex] !== undefined}\n      <div class=\"active-item\">\n        <label>\n          {#if points[activeIndex].unit == 'hour'}\n            {points[activeIndex].date.format(hourFormat)}\n          {:else if points[activeIndex].unit == 'day'}\n            {points[activeIndex].date.format('ddd MMM Do')}\n          {:else if points[activeIndex].unit == 'month'}\n            {points[activeIndex].date.format('MMM YYYY')}\n          {/if}\n        </label>\n        <div class=\"value\" style=\"background-color:{color}\">\n          {yFormat(points[activeIndex].y)}\n        </div>\n      </div>\n    {/if}\n  </div>\n{/if}\n",
    "<script>\n  import NHScroller from \"../h-scroller/h-scroller.svelte\";\n  import { base } from \"../../modules/colors/colors\";\n\n  export let value = \"#20699d\";\n  export let grid = false;\n  export let colors = base;\n\n  $: selectedIndex = colors.indexOf(value) || 0;\n</script>\n\n<style lang=\"scss\">:global(.n-color-picker) {\n  overflow: scroll;\n  max-width: 100%;\n  width: 90vw;\n  min-width: 100%;\n  flex-grow: 1;\n  flex-shrink: 1;\n  display: flex;\n  background-color: var(--color-solid);\n  padding: 8px 10px 8px 0; }\n\n:global(.n-color-picker button.color-btn) {\n  width: 40px;\n  height: 40px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  border-radius: 20px;\n  border: solid 2px var(--color-solid);\n  box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.06);\n  transition: all 0.2s ease-in-out; }\n  :global(.n-color-picker button.color-btn).selected {\n    transform: scale(1.2);\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border: solid 1px var(--color-inverse); }\n</style>\n\n{#if grid}\n  <div class=\"n-grid n-color-picker\" activeIndex={selectedIndex}>\n    {#each colors as color, index}\n      <button\n        class=\"color-btn {color == value ? 'selected' : ''}\"\n        on:click={() => {\n          value = color;\n        }}\n        style=\"background-color:{color}\" />\n    {/each}\n  </div>\n{:else}\n  <NHScroller className=\"n-color-picker\" activeIndex={selectedIndex}>\n    {#each colors as color, index}\n      <button\n        class=\"color-btn {color == value ? 'selected' : ''}\"\n        on:click={() => {\n          value = color;\n        }}\n        style=\"background-color:{color}\" />\n    {/each}\n  </NHScroller>\n{/if}\n",
    "<script>\n  import { onMount } from \"svelte\";\n  export let started = undefined;\n  export let lg = undefined;\n  export let className = \"\";\n\n  onMount(() => {\n    if (started) {\n      methods.init();\n    }\n  });\n\n  $: value = \"00:00:00\";\n\n  const methods = {\n    init() {\n      setInterval(() => {\n        let ms = new Date().getTime() - started;\n        value = methods.secondsToTime(methods.msToSecond(ms));\n      }, 1000);\n      let ms = new Date().getTime() - started;\n      value = methods.secondsToTime(methods.msToSecond(ms));\n    },\n    normalizeTime(time) {\n      return (time + \"\").length === 1 ? time.padStart(2, \"0\") : time;\n    },\n    secondsToTime(secondsVar) {\n      let seconds = secondsVar.toFixed(0);\n      let minutes = Math.floor(parseInt(seconds) / 60).toString();\n      let hours = \"\";\n\n      if (parseInt(minutes) > 59) {\n        hours = this.normalizeTime(\n          Math.floor(parseInt(minutes) / 60).toString()\n        );\n        minutes = this.normalizeTime(\n          (parseInt(minutes) - parseInt(hours) * 60).toString()\n        );\n      }\n      seconds = this.normalizeTime(\n        Math.floor(parseInt(seconds) % 60).toString()\n      );\n\n      minutes = this.normalizeTime(minutes);\n\n      if (hours !== \"\") {\n        hours = parseInt(hours);\n        // if (hours > 24) {\n        //   let days = Math.floor(hours / 24);\n        //   hours = hours - days * 24;\n        //   return `${days}d ${hours}h ${minutes}m ${seconds}s`;\n        // }\n        return `${hours}:${minutes}:${seconds}`;\n      }\n      return `00:${minutes}:${seconds}`;\n    },\n\n    msToSecond(ms) {\n      return ms / 1000;\n    }\n  };\n</script>\n\n<style lang=\"scss\">.n-counter {\n  background-color: var(--color-red);\n  color: #fff;\n  font-size: 0.7rem;\n  font-weight: bold;\n  height: 20px;\n  line-height: 20px;\n  padding: 0 4px;\n  border-radius: 4px;\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-content: center; }\n  .n-counter.large {\n    font-size: 40px;\n    flex-grow: 1;\n    text-align: center;\n    justify-content: center;\n    align-content: center;\n    min-height: 50px;\n    height: 50px;\n    color: var(--color-inverse-2); }\n</style>\n\n<div class=\"n-counter {className} {lg ? 'large' : 'small'}\">{value}</div>\n",
    "<script>\n  // Svelte\n  import { createEventDispatcher } from \"svelte\";\n  import { onMount } from \"svelte\";\n\n  // Utils\n  import time from \"../../utils/time/time\";\n  import Logger from \"../../utils/log/log\";\n\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  // Vendors\n  import dayjs from \"dayjs\";\n\n  // Props\n  // export let started = undefined;\n  export let className = \"\";\n  export let value = 0;\n\n  // Consts\n  const dispatch = createEventDispatcher();\n  const console = new Logger(\"⏰ manual-time.svelte\");\n\n  // methods\n  const methods = {\n    // +ADD to unit\n    add(unit) {\n      switch (unit) {\n        case \"hours\":\n          value = value + 60 * 60;\n          break;\n        case \"minutes\":\n          value = value + 60;\n          break;\n        case \"seconds\":\n          value = value + 1;\n          break;\n      }\n      dispatch(\"change\", value);\n    },\n    // -SUBTRACT from Unit\n    subtract(unit) {\n      switch (unit) {\n        case \"hours\":\n          if (value > 60 * 60) {\n            value = value - 60 * 60;\n          }\n          break;\n        case \"minutes\":\n          if (value > 60) {\n            value = value - 60;\n          }\n          break;\n        case \"seconds\":\n          if (value > 1) {\n            value = value - 1;\n          }\n          break;\n      }\n      // Fire off change event\n      dispatch(\"change\", value);\n    },\n    // Get Unit Value - for select value\n    getUnitValue(unit) {\n      return data[unit] || \"00\";\n    },\n    // Set unit value by select box action\n    setUnitValue(event, unit) {\n      // Set to init\n      let selected = parseInt(event.target.value);\n      // Set temp time chunks\n      let dateChunks = {\n        hours: data.hours,\n        minutes: data.minutes,\n        seconds: data.seconds\n      };\n      // Set new unit\n      dateChunks[unit] = time.padTime(selected);\n      // New Set of the value to Seconds\n      value = time.unitsToSeconds(\n        dateChunks.hours,\n        dateChunks.minutes,\n        dateChunks.seconds\n      );\n      // Fire off change\n      dispatch(\"change\", value);\n    },\n    // Takes 00:00:00 and converts it to seconds\n    timeStringToNode(str) {\n      let initialTime = time.secondsToTime(str).split(\":\");\n      let payload = {\n        hours: initialTime[0],\n        minutes: initialTime[1],\n        seconds: initialTime[2]\n      };\n      return payload;\n    }\n  };\n\n  // Data\n  let data = {\n    ...methods.timeStringToNode(value),\n    computed: {\n      totalSeconds: 0\n    },\n    localValue: value\n  };\n\n  // Watch for Value Change\n  $: if (value > -1) {\n    // Get the Chunks from Seconds\n    let dateChunks = methods.timeStringToNode(value);\n    // Set local data chunks to new value\n    data.hours = time.padTime(dateChunks.hours);\n    data.minutes = time.padTime(dateChunks.minutes);\n    data.seconds = time.padTime(dateChunks.seconds);\n  }\n\n  // On Mount\n</script>\n\n<style lang=\"scss\">:global(.n-counter-manual .unit svg) {\n  position: absolute;\n  top: 20px;\n  right: 2px;\n  height: 16px;\n  pointer-events: none; }\n\n.n-counter-manual {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1; }\n  .n-counter-manual span {\n    line-height: 40px;\n    font-size: 40px; }\n  .n-counter-manual .unit {\n    position: relative;\n    text-align: center;\n    background-color: var(--color-solid-2);\n    border-radius: 4pt;\n    margin: 4pt;\n    width: 95px;\n    display: flex;\n    flex-direction: column; }\n    .n-counter-manual .unit select {\n      -webkit-appearance: none;\n      border: solid 1px rgba(0, 0, 0, 0.1);\n      height: 50px;\n      line-height: 50px;\n      font-size: 40px;\n      font-weight: bold;\n      padding-left: 10px;\n      min-width: 86px;\n      flex-grow: 1;\n      text-align: center;\n      margin: 2px;\n      border-radius: 4pt;\n      background-color: var(--color-solid); }\n      .n-counter-manual .unit select option {\n        text-align: center; }\n    .n-counter-manual .unit label {\n      font-size: 0.9rem;\n      color: var(--color-inverse-3);\n      margin-top: 10px; }\n</style>\n\n<div class=\"n-counter-manual {className}\">\n  <div class=\"unit hours\">\n    <select\n      value={methods.getUnitValue('hours')}\n      on:change={event => {\n        methods.setUnitValue(event, 'hours');\n      }}>\n      {#each time.getNumberedArray(300) as unit (unit)}\n        <option value={unit}>{unit}</option>\n      {/each}\n    </select>\n    <NIcon name=\"chevronDown\" className=\"fill-solid\" />\n    <label>Hour</label>\n  </div>\n  <!-- Minutes -->\n  <div class=\"unit hours\">\n\n    <select\n      value={methods.getUnitValue('minutes')}\n      on:change={event => {\n        methods.setUnitValue(event, 'minutes');\n      }}>\n      {#each time.getNumberedArray(59) as unit (unit)}\n        <option value={unit}>{unit}</option>\n      {/each}\n    </select>\n    <NIcon name=\"chevronDown\" className=\"fill-solid\" />\n    <label>Min</label>\n  </div>\n  <!-- SEconds -->\n  <div class=\"unit seconds\">\n\n    <select\n      value={methods.getUnitValue('seconds')}\n      on:change={event => {\n        methods.setUnitValue(event, 'seconds');\n      }}>\n      {#each time.getNumberedArray(59) as unit (unit)}\n        <option value={unit}>{unit}</option>\n      {/each}\n    </select>\n    <NIcon name=\"chevronDown\" className=\"fill-solid\" />\n    <label>Sec</label>\n  </div>\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  // vendors\n  import dayjs from \"dayjs\";\n  // Utils\n  import Logger from \"../../utils/log/log\";\n  import math from \"../../utils/math/math\";\n  import extractor from \"../../utils/extract/extract\";\n\n  import { UserStore } from \"../../store/user\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  //   // Props\n  export let rows = undefined;\n  export let color = undefined;\n  export let style = \"\";\n  export let className = \"\";\n  export let term = undefined;\n  // export let flex = true;\n\n  let _el;\n  let height = 200;\n\n  // Consts\n  const console = new Logger(\"⏰ Grid\");\n  const getEmptyDay = () => new Array(24).fill(0);\n  const emptyGrid = () => {\n    let grid = [[], [], [], [], [], [], []];\n    grid.forEach((day, index) => {\n      for (let i = 0; i < 24; i++) {\n        grid[index].push(0);\n      }\n    });\n    return grid;\n  };\n\n  const hours = [];\n  const dateStart = dayjs().startOf(\"day\");\n  for (var i = 0; i < 24; i++) {\n    let date = dateStart.add(i, \"hour\");\n    hours.push(\n      trimHour($UserStore.meta.is24Hour ? date.format(\"H\") : date.format(\"ha\"))\n    );\n  }\n\n  const getGridMax = () => {\n    let max = 0;\n    days.forEach((day, di) => {\n      day.forEach((hour, hi) => {\n        max = days[di][hi] > max ? days[di][hi] : max;\n      });\n    });\n    return max;\n  };\n\n  function trimHour(hour) {\n    if (hour.length == 4) {\n      return hour.substr(0, 3);\n    } else if (hour.length == 3) {\n      return hour.substr(0, 2);\n    } else {\n      return hour;\n    }\n  }\n\n  // Local Variables\n  let days = emptyGrid();\n  let maxValue = 0;\n\n  $: if (rows) {\n    let trackableElement = extractor.toElement(term);\n\n    days = emptyGrid();\n    rows.forEach(row => {\n      let date = new Date(row.end);\n      let day = date.getDay();\n      let hour = date.getHours();\n      let value;\n      // If a tracker, use the value to highlight the date/time\n      // if it's not a tracker, it will just be a value of 1 so the overall\n      // useage of time will be displayed.\n      if (trackableElement.type == \"tracker\") {\n        let tracker = TrackerStore.byTag(trackableElement.id);\n        value = row.getTrackerValue(trackableElement.id, tracker.math);\n      } else {\n        value = 1;\n      }\n      days[day][hour] = days[day][hour] + value;\n    });\n    maxValue = getGridMax();\n    // Convert to percentage\n    days = days.map((day, di) => {\n      return day.map((hvalue, hindex) => {\n        return math.percentage(maxValue, hvalue);\n      });\n    });\n  }\n\n  function main() {\n    height = _el.parentElement.clientHeight;\n  }\n\n  const methods = {\n    hourStyle(value) {\n      return {\n        opacity: value / 100\n      };\n    }\n  };\n\n  onMount(() => {\n    main();\n  });\n</script>\n\n<style type=\"scss\">.time-grid {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  flex-grow: 1;\n  min-height: 100%;\n  flex-shrink: 1; }\n  .time-grid .hour-header {\n    padding-left: 25px;\n    padding-top: 4px;\n    padding-bottom: 2px;\n    display: flex;\n    flex-direction: row; }\n    .time-grid .hour-header .hour {\n      width: calc(100% / 24);\n      font-size: 0.4rem; }\n  .time-grid label {\n    margin: 0;\n    font-size: 0.6rem;\n    text-align: right;\n    color: var(--color-inverse);\n    padding-right: 4px;\n    width: 36px;\n    font-weight: bold;\n    text-transform: uppercase; }\n  .time-grid .hour {\n    color: var(--color-inverse); }\n  .time-grid .day {\n    display: flex;\n    flex-direction: row;\n    height: calc(100% / 7);\n    align-items: center; }\n    .time-grid .day .hour {\n      width: calc(100% / 24);\n      text-align: center;\n      margin: 0px;\n      background-color: #20699d;\n      margin-right: 4px;\n      margin-bottom: 2px;\n      border-radius: 4px;\n      height: 95%; }\n</style>\n\n<div\n  class=\"time-grid {className}\"\n  style=\"height:{height}px; {style}\"\n  bind:this={_el}>\n\n  {#each days as day, index}\n    <div class=\"day\">\n      <label>\n        {dayjs(new Date())\n          .day(index)\n          .format('ddd')\n          .substr(0, 2)}\n      </label>\n      {#each day as hour, hi}\n        <div\n          class=\"hour hour-{hi}\"\n          style=\"opacity: {days[index][hi] / 100 || 0.1}; background-color: {color}\" />\n      {/each}\n    </div>\n  {/each}\n  <div class=\"hour-header\">\n    {#each hours as hour, index}\n      <div class=\"hour hour-{index} header\">{hour}</div>\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import Dymoji from \"./dymoji\";\n\n  export let username = undefined;\n  export let avatar = undefined;\n  export let person = undefined;\n  export let size = 42;\n  export let radius = 0.12;\n\n  export let className = \"\";\n\n  let svg = null;\n  let img = null;\n\n  const getSVG = term => {\n    return new Dymoji(term, {\n      size,\n      radius\n    }).svg();\n  };\n\n  $: if (username) {\n    svg = getSVG(username);\n  } else if (avatar) {\n    img = avatar;\n  } else if (person) {\n    if (person.avatar) {\n      img = person.avatar;\n    } else {\n      svg = getSVG(person.username);\n    }\n  } else {\n    svg = getSVG(\"unknown\");\n  }\n</script>\n\n<style lang=\"scss\">bc-dymoji {\n  display: flex; }\n\n.dymoji-wrap {\n  display: inline-flex;\n  vertical-align: middle;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  background-size: cover;\n  background-position: center; }\n</style>\n\n<div\n  class=\"dymoji-wrap {className}\"\n  style=\"width:{size}px; height:{size}px; border-radius:{size * radius}px; {img ? `background-image:url(${img})` : ``}\">\n  {#if svg}\n    {@html svg}\n  {/if}\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { Router, Route, navigate } from \"svelte-routing\";\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NSpinner from \"../spinner/spinner.svelte\";\n  import NItem from \"../list-item/list-item.svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  import NBackButton from \"../back-button/back-button.svelte\";\n  import NLayout from \"../../containers/layout/layout.svelte\";\n\n  // Utils and Modules\n  import Downloader from \"../../modules/download/download\";\n  import tick from \"../../utils/tick/tick\";\n\n  import Storage from \"../../modules/storage/storage\";\n\n  import { Interact } from \"../../store/interact\";\n\n  const state = {\n    title: \"File Browser\",\n    path: [],\n    tree: {},\n    files: [],\n    animateForward: false,\n    animateBack: false,\n    file: null,\n    loading: true\n  };\n\n  // Not working\n  export let path = undefined;\n  // Old fashion way is working\n\n  let lastPath = null;\n\n  $: if (path && path !== lastPath) {\n    init();\n  }\n\n  async function init() {\n    state.file = null;\n    lastPath = path;\n    if (path.substr(0, 1) == \"/\") {\n      path = path.replace(\"/\", \"\");\n    }\n    path = path.replace(/\\/\\//g, \"/\");\n    let ogPath = path.split(\"/\");\n    if (ogPath.length > 0) {\n      let fileName = ogPath[ogPath.length - 1];\n      if (isFile(fileName)) {\n        state.file = fileName;\n        state.path = ogPath;\n      } else {\n        state.path = ogPath;\n\n        state.files = extractFiles();\n      }\n    }\n    state.title = ogPath.join(\"/\");\n    state.path = ogPath;\n  }\n\n  async function back() {\n    history.back();\n    await tick(100);\n    init();\n    // if (state.path.length) {\n    //   state.path.pop();\n    //   await tick(10);\n    //   state.files = extractFiles();\n    // } else {\n    //   history.back();\n    // }\n  }\n\n  function extractFiles() {\n    if (state.path.length) {\n      let obj = { ...state.tree };\n      state.path.forEach(name => {\n        if (obj.hasOwnProperty(name)) {\n          obj = obj[name];\n        }\n      });\n      return Object.keys(obj);\n    } else {\n      return Object.keys(state.tree);\n    }\n  }\n\n  /**\n   * From https://joelgriffith.net/array-reduce-is-pretty-neat/\n   */\n  function Treeify(files) {\n    var fileTree = {};\n\n    if (files instanceof Array === false) {\n      throw new Error(\"Expected an Array of file paths, but saw \" + files);\n    }\n\n    function mergePathsIntoFileTree(prevDir, currDir, i, filePath) {\n      if (i === filePath.length - 1) {\n        prevDir[currDir] = \"file\";\n      }\n\n      if (!prevDir.hasOwnProperty(currDir)) {\n        prevDir[currDir] = {};\n      }\n\n      return prevDir[currDir];\n    }\n\n    function parseFilePath(filePath) {\n      var fileLocation = filePath.split(\"/\");\n      if (fileLocation.length === 1) {\n        return (fileTree[fileLocation[0]] = \"file\");\n      }\n      fileLocation.reduce(mergePathsIntoFileTree, fileTree);\n    }\n    files.forEach(parseFilePath);\n    return fileTree;\n  }\n\n  onMount(async () => {\n    state.loading = true;\n    Storage.getEngine().onReady(async () => {\n      let files = await Storage.list();\n      state.tree = Treeify(files);\n      state.files = extractFiles();\n      state.loading = false;\n    });\n    await Storage.init();\n  });\n\n  async function deleteFile(file) {\n    let filepath = `${state.path.join(\"/\")}`;\n    let confirm = await Interact.confirm(\n      `Really delete ${file}?`,\n      `This can cause serious issues if you don't know what you're doing. File to delete: ${filepath}`,\n      \"Yes, Delete\"\n    );\n    if (confirm) {\n      await Storage.delete(filepath);\n      Interact.toast(\"Deleted\");\n      back();\n    }\n  }\n\n  async function readFile() {\n    let content = await Storage.get(state.path.join(\"/\"));\n    return JSON.stringify(content, null, 2);\n  }\n\n  async function download(file) {\n    let filename = state.path[state.path.length - 1];\n    let content = await Storage.get(state.path.join(\"/\"));\n    Downloader.json(filename, content);\n  }\n\n  function isFile(name) {\n    const filesArray = [\"last-usage\", \"nomie-capture\"];\n    if (name.split(\".\").length > 1) {\n      return true;\n    } else if (filesArray.indexOf(name) > -1) {\n      return true;\n    } else if (state.path[state.path.length - 1] == \"books\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  function getPath(file) {\n    let path;\n    if (state.path.length == 1) {\n      let root = state.path[0];\n      if (root.substr(0, 1) == \"/\") {\n        root = root.substr(1, root.length - 2);\n      }\n      path = `/files/${root}/${file}`;\n    } else {\n      path = `/files/${state.path.join(\"/\")}/${file}`;\n    }\n    return path.replace(\"//\", \"/\");\n  }\n</script>\n\n<style lang=\"scss\">.n-list.animate {\n  transition: all 0.2s ease-in-out;\n  transform: translateX(0);\n  opacity: 1; }\n  .n-list.animate.animate-forward {\n    transform: translateX(-100px);\n    opacity: 0; }\n  .n-list.animate.animate-back {\n    transform: translateX(100px);\n    opacity: 0; }\n\n.code-view {\n  background-color: var(--color-solid-1);\n  color: var(--color-inverse-1); }\n\npre {\n  font-size: 12px;\n  padding: 10px; }\n</style>\n\n{#if !state.file}\n  <NLayout className=\"n-file-browser\">\n    <div class=\"n-toolbar-grid container\" slot=\"header\">\n      <div class=\"left\">\n        <button class=\"btn\" on:click={back}>\n          <NIcon name=\"arrowBack\" />\n        </button>\n      </div>\n      <div class=\"main\">\n        <h1 class=\"truncate\">{state.title}</h1>\n      </div>\n      <div class=\"right\" />\n    </div>\n    <div class=\"content n-panel vertical scroll-y\">\n      <div class=\"n-list mt-2 container\">\n\n        {#if state.loading}\n          <div class=\"p-4 n-panel center-all\">\n            <NSpinner />\n          </div>\n        {/if}\n        {#each state.files as file}\n          {#if !isFile(file)}\n            <NItem\n              className=\"clickable bottom-line\"\n              on:click={() => {\n                navigate(getPath(file));\n              }}>\n              {file}\n              <div slot=\"right\">\n                <span class=\"text-sm text-faded-1\">Folder</span>\n                <NIcon name=\"chevronRight\" className=\"fill-faded-2\" />\n              </div>\n            </NItem>\n          {:else}\n            <NItem\n              className=\"clickable bottom-line\"\n              on:click={() => {\n                navigate(getPath(file));\n              }}>\n              {file}\n              <div slot=\"right\">\n                <span class=\"text-sm text-faded-1\">File</span>\n                <NIcon name=\"chevronRight\" className=\"fill-faded-2\" />\n              </div>\n            </NItem>\n          {/if}\n        {/each}\n      </div>\n    </div>\n  </NLayout>\n{:else}\n  <NLayout className=\"n-file-browser\" showTabs={false}>\n    <div class=\"n-toolbar-grid container\" slot=\"header\">\n      <div class=\"left\">\n        <button class=\"btn\" on:click={back}>\n          <NIcon name=\"arrowBack\" />\n        </button>\n      </div>\n      <div class=\"main\">\n        <h1 class=\"truncate\">{state.file}</h1>\n      </div>\n      <div class=\"right toolbar-buttons\">\n        <button\n          class=\"btn btn-clear\"\n          on:click={() => {\n            download(state.file);\n          }}>\n          <NIcon name=\"download\" className=\"fill-primary-bright\" />\n        </button>\n        <button\n          class=\"btn btn-clear\"\n          on:click={() => {\n            deleteFile(state.file);\n          }}>\n          <NIcon name=\"delete\" className=\"fill-red\" />\n        </button>\n      </div>\n    </div>\n    <div class=\"content code-view\">\n      <div class=\"container\">\n        {#await readFile()}\n          <div class=\"n-panel center-all\">\n            <NSpinner />\n          </div>\n        {:then content}\n          <pre>{content}</pre>\n        {:catch error}\n          <div class=\"text-red\">{error.message}</div>\n        {/await}\n      </div>\n    </div>\n  </NLayout>\n{/if}\n",
    "<script>\n  // svelte\n  import { onMount } from \"svelte\";\n\n  export let activeIndex = undefined;\n  export let activeClass = \"active\";\n  export let className = null;\n\n  // Locals\n  let wrapper;\n  let scroller;\n  let ready = false;\n\n  $: if (activeIndex && ready) {\n    methods.selectIndex(activeIndex);\n  }\n\n  // Methods\n  const methods = {\n    init() {\n      // looop over children - apply a click event\n      if (wrapper && wrapper.children) {\n        for (let i = 0; i < wrapper.children.length; i++) {\n          let child = wrapper.children[i];\n          child.addEventListener(\"click\", event => {\n            let selectedIndex = Array.prototype.indexOf.call(\n              wrapper.children,\n              event.target\n            );\n            methods.selectIndex(selectedIndex);\n          });\n        }\n\n        scroller.addEventListener(\"scroll\", evt => {\n          scroller.setAttribute(\"data-scroll\", evt.target.scrollLeft);\n        });\n\n        ready = true;\n      }\n    },\n    // Clear currently selected index\n    clearSelected() {\n      if (activeIndex > -1) {\n        wrapper.children[activeIndex].classList.remove(activeClass);\n      }\n    },\n    // Select new item\n    selectIndex(index) {\n      methods.clearSelected();\n      activeIndex = index;\n      try {\n        let child = wrapper.children[activeIndex];\n        let parentOffset = wrapper.offsetLeft;\n        let childEnd = child.offsetLeft - parentOffset;\n        let scrollTo = childEnd - child.offsetWidth * 0.5;\n        let scrolledAmount = scroller.scrollLeft;\n\n        if (childEnd > scroller.offsetWidth * 0.5) {\n          scroller.scrollTo(scrollTo, 0);\n        } else if (scrolledAmount > childEnd) {\n          scroller.scrollTo(scrollTo, 0);\n        }\n\n        child.classList.add(activeClass);\n      } catch (e) {}\n      ready = true;\n    }\n  };\n  // when component mounts\n  onMount(() => {\n    setTimeout(() => {\n      methods.init();\n    }, 10);\n  });\n</script>\n\n<style lang=\"scss\">::-webkit-scrollbar {\n  width: 0px;\n  background: transparent;\n  display: none; }\n\n.n-hscroller {\n  white-space: nowrap;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scroll-behavior: smooth;\n  min-height: 40px; }\n\n.n-hscroller .wrapper {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: none;\n  align-items: center;\n  min-width: 100%; }\n</style>\n\n<div class=\"n-hscroller {className}\" data-scroll=\"0\" bind:this={scroller}>\n  <div class=\"wrapper\" bind:this={wrapper}>\n    <slot />\n  </div>\n</div>\n",
    "<script>\n  import Add24 from \"carbon-icons-svelte/lib/Add24\";\n  import AddAlt24 from \"carbon-icons-svelte/lib/AddAlt24\";\n  import Calendar24 from \"carbon-icons-svelte/lib/Calendar24\";\n  import Events24 from \"carbon-icons-svelte/lib/Events24\";\n  import Settings24 from \"carbon-icons-svelte/lib/Settings24\";\n  import Search24 from \"carbon-icons-svelte/lib/Search24\";\n  import UserFollow24 from \"carbon-icons-svelte/lib/UserFollow24\";\n  import ChartBar24 from \"carbon-icons-svelte/lib/ChartBar24\";\n  import Close24 from \"carbon-icons-svelte/lib/Close24\";\n  import Time24 from \"carbon-icons-svelte/lib/Time24\";\n  import Star24 from \"carbon-icons-svelte/lib/Star24\";\n  import Send24 from \"carbon-icons-svelte/lib/Send24\";\n  import SendFilled24 from \"carbon-icons-svelte/lib/SendFilled24\";\n  import Location24 from \"carbon-icons-svelte/lib/Location24\";\n  import NewTab24 from \"carbon-icons-svelte/lib/NewTab24\";\n  import CloseFilled24 from \"carbon-icons-svelte/lib/CloseFilled24\";\n  import CloseOutline24 from \"carbon-icons-svelte/lib/CloseOutline24\";\n  import ChevronLeft24 from \"carbon-icons-svelte/lib/ChevronLeft24\";\n  import ChevronRight24 from \"carbon-icons-svelte/lib/ChevronRight24\";\n  import ChevronDown24 from \"carbon-icons-svelte/lib/ChevronDown24\";\n  import OverflowMenuHorizontal24 from \"carbon-icons-svelte/lib/OverflowMenuHorizontal24\";\n  import ChevronSort24 from \"carbon-icons-svelte/lib/ChevronSort24\";\n  import TrashCan24 from \"carbon-icons-svelte/lib/TrashCan24\";\n  import Share24 from \"carbon-icons-svelte/lib/Share24\";\n  import SubtractAlt24 from \"carbon-icons-svelte/lib/SubtractAlt24\";\n  import ArrowLeft24 from \"carbon-icons-svelte/lib/ArrowLeft24\";\n  import Download24 from \"carbon-icons-svelte/lib/Download24\";\n  import Renew24 from \"carbon-icons-svelte/lib/Renew24\";\n  import Copy24 from \"carbon-icons-svelte/lib/Copy24\";\n  import Checkmark24 from \"carbon-icons-svelte/lib/Checkmark24\";\n  import CheckmarkFilled24 from \"carbon-icons-svelte/lib/CheckmarkFilled24\";\n  import CheckmarkOutline24 from \"carbon-icons-svelte/lib/CheckmarkOutline24\";\n  import RadioButton24 from \"carbon-icons-svelte/lib/RadioButton24\";\n  import ChevronUp24 from \"carbon-icons-svelte/lib/ChevronUp24\";\n  import Edit24 from \"carbon-icons-svelte/lib/Edit24\";\n  import RadioButtonChecked24 from \"carbon-icons-svelte/lib/RadioButtonChecked24\";\n  import Menu24 from \"carbon-icons-svelte/lib/Menu24\";\n  import Grid24 from \"carbon-icons-svelte/lib/Grid24\";\n\n  export let name = \"add\";\n  export let style = undefined;\n  export let className = \"\";\n  export let title = \"\";\n  export let size = \"\";\n\n  const icons = {\n    add: Add24,\n    addOutline: AddAlt24,\n    calendar: Calendar24,\n    people: Events24,\n    settings: Settings24,\n    search: Search24,\n    userAdd: UserFollow24,\n    chart: ChartBar24,\n    close: Close24,\n    closeFilled: CloseFilled24,\n    closeOutline: CloseOutline24,\n    more: OverflowMenuHorizontal24,\n    chevronUp: ChevronUp24,\n    chevronDown: ChevronDown24,\n    chevronLeft: ChevronLeft24,\n    chevronRight: ChevronRight24,\n    time: Time24,\n    pin: Location24,\n    star: Star24,\n    send: Send24,\n    sendFilled: SendFilled24,\n    newTab: NewTab24,\n    sort: ChevronSort24,\n    delete: TrashCan24,\n    remove: SubtractAlt24,\n    share: Share24,\n    arrowBack: ArrowLeft24,\n    download: Download24,\n    refresh: Renew24,\n    copy: Copy24,\n    checkmark: Checkmark24,\n    checkmarkFilled: CheckmarkFilled24,\n    checkmarkOutline: CheckmarkOutline24,\n    radio: RadioButton24,\n    radioFilled: RadioButtonChecked24,\n    edit: Edit24,\n    menu: Menu24,\n    grid: Grid24\n  };\n\n  function getStyle() {\n    let styles = [];\n    if (style) {\n      styles.push(style);\n    }\n    if (size) {\n      styles.push(`height:${size}px; width:${size}px`);\n    }\n    return styles.join(\";\");\n  }\n\n  let props = {};\n  $: props = {\n    class: `n-icon ${className} icon-${name}`,\n    title,\n    style: getStyle()\n  };\n</script>\n\n<style>\n  :global(.n-icon) {\n    fill: var(--color-inverse);\n  }\n  :global(.tap-icon .n-icon, .tap-icon .n-icon) {\n    fill: var(--color-primary-bright);\n  }\n  :global(.n-icon-extra path, .n-icon-extra) {\n    fill: var(--color-inverse);\n  }\n</style>\n\n{#if icons[name]}\n  <svelte:component this={icons[name]} {...props} />\n{:else if name == 'tracker'}\n  <svg\n    width=\"24\"\n    {style}\n    {title}\n    class=\"n-icon-extra {className} icon-{name}\"\n    height=\"24\"\n    viewBox=\"0 0 32 32\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      class=\"fill\"\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M12.2667 3.86667H19.7333C24.3725 3.86667 28.1333 7.62748 28.1333\n      12.2667V19.7333C28.1333 24.3725 24.3725 28.1333 19.7333\n      28.1333H12.2667C7.62748 28.1333 3.86667 24.3725 3.86667\n      19.7333V12.2667C3.86667 7.62748 7.62748 3.86667 12.2667 3.86667ZM2\n      12.2667C2 6.59654 6.59654 2 12.2667 2H19.7333C25.4035 2 30 6.59654 30\n      12.2667V19.7333C30 25.4035 25.4035 30 19.7333 30H12.2667C6.59654 30 2\n      25.4035 2 19.7333V12.2667ZM16 19.7333C13.9381 19.7333 12.2667 18.0619\n      12.2667 16C12.2667 13.9381 13.9381 12.2667 16 12.2667C18.0619 12.2667\n      19.7333 13.9381 19.7333 16C19.7333 18.0619 18.0619 19.7333 16\n      19.7333ZM10.4 16C10.4 12.9072 12.9072 10.4 16 10.4C19.0928 10.4 21.6\n      12.9072 21.6 16C21.6 19.0928 19.0928 21.6 16 21.6C12.9072 21.6 10.4\n      19.0928 10.4 16Z\"\n      fill=\"black\" />\n  </svg>\n{/if}\n",
    "<script>\n  import NIcon from \"../icon/icon.svelte\";\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let label = null;\n  export let placeholder = null;\n  export let inputmode = undefined;\n  export let value = null;\n  export let type = \"text\";\n  export let help = null;\n  export let className = \"\";\n  export let style = \"\";\n  export let inputStyle = \"\";\n  export let inputClass = \"\";\n  export let pattern = \"\";\n  export let width = \"\";\n  export let disabled = false;\n  export let solo = false;\n  export let compact = false;\n  export let rows = 2;\n\n  export let autocomplete = undefined;\n  export let autocorrect = undefined;\n  export let autocapitalize = undefined;\n\n  let focused = false;\n  let hit = false;\n  let hasInput = false;\n\n  let _elInput;\n\n  export function doFocus() {\n    _elInput.focus();\n  }\n\n  let blur = () => {\n    focused = false;\n  };\n  let focus = event => {\n    focused = true;\n    dispatch(\"focus\", event);\n  };\n  let change = evt => {\n    if (evt.key == \"Enter\") {\n      dispatch(\"enter\", value);\n    }\n    dispatch(\"change\", value);\n  };\n\n  $: if (value !== null && (value || \"\").length > 0) {\n    hasInput = true;\n  } else {\n    hasInput = false;\n  }\n\n  onMount(() => {\n    if (type == \"select\") {\n      hasInput = true;\n    }\n  });\n</script>\n\n<style lang=\"scss\">.n-input-container {\n  position: relative;\n  width: auto;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 1;\n  margin-bottom: 4pt;\n  margin-top: 4pt; }\n  .n-input-container .helper {\n    font-size: 0.65rem;\n    opacity: 0.5;\n    padding: 6px; }\n  .n-input-container .select-arrow {\n    margin-left: -50px; }\n  .n-input-container.with-label .n-input-wrapper input,\n  .n-input-container.with-label .n-input-wrapper select {\n    min-height: 53px; }\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input label {\n    transition: all 0.2s ease-in-out;\n    opacity: 0.4;\n    transform: translateY(0); }\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input input,\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input select {\n    padding-top: 14px;\n    padding-bottom: 0px;\n    font-size: 1.05rem; }\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input textarea {\n    padding-top: 22px;\n    padding-bottom: 0px;\n    font-size: 1.05rem; }\n  .n-input-container.solo .n-input-wrapper {\n    height: 54px; }\n    .n-input-container.solo .n-input-wrapper .n-input {\n      height: 54px; }\n      .n-input-container.solo .n-input-wrapper .n-input input,\n      .n-input-container.solo .n-input-wrapper .n-input select,\n      .n-input-container.solo .n-input-wrapper .n-input textarea {\n        height: 53px; }\n  .n-input-container.solo.compact .n-input-wrapper {\n    height: 36px; }\n    .n-input-container.solo.compact .n-input-wrapper .n-input {\n      height: 36px; }\n      .n-input-container.solo.compact .n-input-wrapper .n-input input,\n      .n-input-container.solo.compact .n-input-wrapper .n-input select,\n      .n-input-container.solo.compact .n-input-wrapper .n-input textarea {\n        height: 35px;\n        font-size: 1rem; }\n  .n-input-container .n-input-wrapper {\n    min-height: 54px;\n    display: flex;\n    width: 100%;\n    min-width: 50px;\n    max-width: 100%;\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-shrink: 1;\n    transition: all 0.2s ease-in-out;\n    background-color: var(--color-solid-half);\n    border-radius: 12px;\n    border: solid 1px var(--color-faded-1); }\n    .n-input-container .n-input-wrapper.has-focus {\n      box-shadow: 0px 3px 7px -2px rgba(49, 158, 215, 0.1);\n      background-color: var(--input-focus-background); }\n    .n-input-container .n-input-wrapper textarea {\n      border: none; }\n    .n-input-container .n-input-wrapper .n-input {\n      transition: all 0.2s ease-in-out;\n      display: flex;\n      flex-direction: column;\n      flex-grow: 1;\n      flex-shrink: 1;\n      color: var(--color-inverse); }\n      .n-input-container .n-input-wrapper .n-input label {\n        transition: all 0.2s ease-in-out;\n        opacity: 0;\n        transform: translateY(20px);\n        pointer-events: none;\n        font-size: 0.7rem;\n        position: absolute;\n        top: 8px;\n        left: 10px;\n        margin: 0;\n        padding: 0; }\n      .n-input-container .n-input-wrapper .n-input input,\n      .n-input-container .n-input-wrapper .n-input select,\n      .n-input-container .n-input-wrapper .n-input textarea {\n        width: 100%;\n        transition: all 0.2s ease-in-out;\n        margin: 0;\n        padding-left: 8pt;\n        padding-right: 8pt;\n        background-color: transparent !important;\n        outline: none; }\n        .n-input-container .n-input-wrapper .n-input input:disabled,\n        .n-input-container .n-input-wrapper .n-input select:disabled,\n        .n-input-container .n-input-wrapper .n-input textarea:disabled {\n          background-color: transparent !important;\n          color: var(--color-inverse-2); }\n      .n-input-container .n-input-wrapper .n-input textarea {\n        min-height: 90px;\n        padding-top: 8pt;\n        color: var(--color-inverse); }\n</style>\n\n<div\n  class=\"n-input-container {className}\n  {compact ? 'compact' : ''}\n  {solo ? 'solo' : 'with-label'}\"\n  style=\"{width ? `max-width:${width}; width:${width}; ` : ``}\n  {style}\">\n  <div\n    class=\"n-input-wrapper {hasInput ? 'has-input' : 'no-input'}\n    {focused ? 'has-focus' : 'no-focus'}\">\n    <slot name=\"left\" />\n    <div class=\"n-input\">\n      <label>{label || placeholder}</label>\n      {#if type == 'email'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          type=\"email\"\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:keyup={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'password'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          type=\"password\"\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:keyup={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'number'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          type=\"number\"\n          style={inputStyle}\n          class={inputClass}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:keyup={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'select'}\n        <select bind:this={_elInput} {disabled} on:change={change} bind:value>\n          <slot />\n        </select>\n      {:else if type == 'textarea'}\n        <textarea\n          bind:this={_elInput}\n          {disabled}\n          {rows}\n          style={inputStyle}\n          class={inputClass}\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:keyup={change}\n          on:focus={focus}\n          on:blur={blur}\n          bind:value />\n        <slot />\n      {:else}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          type=\"text\"\n          {inputmode}\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:keyup={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {/if}\n    </div>\n    <slot name=\"right\">\n      {#if type == 'select'}\n        <button class=\"btn btn-clear select-arrow\">\n          <NIcon name=\"chevronDown\" />\n        </button>\n      {/if}\n    </slot>\n\n  </div>\n  {#if help}\n    <div class=\"helper\">{help}</div>\n  {/if}\n</div>\n",
    "<script>\n  export let label = undefined;\n  export let value = undefined;\n  export let onClick = undefined;\n  export let type = \"text\";\n  export let className = \"\";\n  export let inverse = false;\n</script>\n\n<style lang=\"scss\">.block {\n  margin: 0 3px; }\n  .block .label {\n    font-size: 0.7rem;\n    line-height: 0.9rem; }\n  .block .value {\n    font-size: 1.2rem;\n    line-height: 1rem;\n    font-weight: 700; }\n    .block .value small {\n      font-weight: bold !important; }\n  .block label div {\n    opacity: 0.7; }\n  .block.clickable {\n    border-bottom: dotted 1px var(--color-faded); }\n  .block.inverse.type-box, .block.inverse.type-row {\n    background-color: var(--color-darkest); }\n  .block.type-box {\n    background-color: var(--color-faded);\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-end;\n    min-height: 90px;\n    min-width: 90px;\n    border-radius: 20px;\n    padding: 10px; }\n  .block.type-row {\n    background-color: var(--color-faded);\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    padding: 6px 10px;\n    border-radius: 6px;\n    min-height: 40px; }\n    .block.type-row .value {\n      font-size: 1.1rem !important; }\n      .block.type-row .value small {\n        font-size: 1.1rem !important; }\n    .block.type-row .label {\n      font-size: 0.9rem; }\n</style>\n\n<div\n  class=\"{onClick ? 'clickable' : ''} type-{type} block {className}\n  {inverse ? 'inverse' : ''}\"\n  on:click={() => {\n    if (onClick) {\n      onClick();\n    }\n  }}>\n  <div class=\"label\">\n    {#if label}{label}{/if}\n    <slot name=\"label\" />\n  </div>\n  <div class=\"value\">\n    {#if (value || '').length > 6}\n      <small>{value}</small>\n    {:else}{value}{/if}\n    <slot name=\"value\" />\n  </div>\n</div>\n",
    "<script>\n  // Svelte\n  import { createEventDispatcher } from \"svelte\";\n\n  // Modules\n  import NomieLog from \"../../modules/nomie-log/nomie-log\";\n  import Tracker from \"../../modules/tracker/tracker\";\n\n  // components\n  import NItem from \"../list-item/list-item.svelte\";\n  import NBall from \"../tracker-ball/ball.svelte\";\n  import Dymoji from \"../dymoji/dymoji.svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  import NPoints from \"../points/points.svelte\";\n  import NText from \"../text/text.svelte\";\n  import NNoteTextualizer from \"../note-textualizer/note-textualizer.svelte\";\n  import NCameraImage from \"../camera/image.svelte\";\n\n  // utils\n  import NomieUOM from \"../../utils/nomie-uom/nomie-uom\";\n  import time from \"../../utils/time/time\";\n\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { UserStore } from \"../../store/user\";\n  import { Interact } from \"../../store/interact\";\n  import { PeopleStore } from \"../../store/people-store\";\n\n  // vendors\n  import dayjs from \"dayjs\";\n\n  // props\n  export let log = undefined;\n  // export let trackers = {};\n  export let className = \"\";\n  export let focus = false;\n  export let fullDate = false;\n  export let hideMore = undefined;\n  // consts\n  const dispatch = createEventDispatcher();\n\n  let displayLog;\n  let logMeta;\n\n  let trackers = $TrackerStore.trackers;\n\n  let state = {\n    showPhoto: false\n  };\n\n  $: if (log) {\n    displayLog = new NomieLog(log);\n    logMeta = displayLog.getMeta();\n    logMeta.trackers = logMeta.trackers.map(trackerElement => {\n      trackerElement.obj = TrackerStore.getByTag(trackerElement.id);\n      return trackerElement;\n    });\n  }\n\n  $: fullDate =\n    log && new Date(log.end).toDateString() !== new Date().toDateString()\n      ? true\n      : false;\n\n  $: timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n</script>\n\n<style lang=\"scss\">.log-photo-wrapper {\n  margin-left: -20px;\n  margin-right: -20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--color-faded-1);\n  margin-bottom: 20px; }\n\n.more-button {\n  margin-right: -8pt; }\n</style>\n\n<!--glow glow-{time.dateToDesc(displayLog.end)}-->\n{#if displayLog}\n  <NItem className=\"{className} n-item-log\">\n    <!-- Show the Trackers within this Log Item -->\n    <div class=\"n-row time-row\">\n      <div class=\"time truncate\" style=\"max-width:60%;\">\n        <div class=\"day-time truncate\">\n          {logMeta.endDate.format(`ddd ${timeFormat}`)}\n        </div>\n        <div class=\"date-ago truncate\">\n          {logMeta.endDate.format('MMM Do YYYY')}\n          <span class=\"ago\">{time.fromNow(logMeta.endDate)} ago</span>\n        </div>\n      </div>\n\n      <div class=\"filler\" />\n      <!-- If they have location-->\n      {#if displayLog.lat}\n        <button\n          on:click={event => {\n            Interact.showLocations([displayLog]);\n            event.stopPropagation();\n          }}\n          class=\"btn btn-sm btn-clear pl-2 pr-2 clickable\">\n          <NIcon name=\"pin\" className=\"fill-primary-bright\" size=\"16\" />\n        </button>\n      {/if}\n\n      <!-- SCORE display -->\n      {#if displayLog.score}\n        <NPoints points={displayLog.score} />\n      {/if}\n\n      {#if hideMore !== true}\n        <button\n          on:click={event => {\n            Interact.logOptions(displayLog);\n          }}\n          class=\"btn btn-clear btn-sm more-button clickable ml-1\">\n          <NIcon name=\"more\" className=\"fill-primary-bright\" size=\"32\" />\n        </button>\n      {/if}\n\n    </div>\n    <!-- Process the Note Content wi th the Textualizer \n    This really isn't special right now -->\n    {#if displayLog.note.length}\n      <NNoteTextualizer\n        on:textClick={evt => {\n          dispatch('textClick', evt.detail);\n        }}\n        note={displayLog.note}\n        {trackers}\n        className={logMeta.trackers.length ? '' : 'pb-2'} />\n    {/if}\n    {#if displayLog.people.length}\n      <div class=\"people pb-2 px-2\">\n        {#each displayLog.people as person}\n          {#if $PeopleStore.people[person.id]}\n            <NBall\n              size=\"20\"\n              radius=\"0.3\"\n              avatar={$PeopleStore.people[person.id].avatar}\n              username={person.id}\n              className=\"ml-2\" />\n          {:else}\n            <NBall\n              size=\"20\"\n              username={person.id}\n              className=\"ml-2\"\n              radius=\"0.3\" />\n          {/if}\n        {/each}\n      </div>\n    {/if}\n    <div class=\"trackers-list\">\n      <!-- Loop over the trackers within this log -->\n      {#each logMeta.trackers.filter(trk => {\n        if (focus) {\n          return trk.id == focus;\n        } else {\n          return true;\n        }\n      }) as trackerElement}\n        <!-- Tracker List Item  -->\n        <NItem\n          className=\"clickable bottom-line\"\n          on:click={event => {\n            event.preventDefault();\n            event.stopPropagation();\n            dispatch('trackerClick', { tracker: trackerElement.obj, log });\n            return false;\n          }}>\n          <div class=\"emoji\" slot=\"left\">\n            {(trackerElement.obj || {}).emoji || '⚪️'}\n          </div>\n          <div>{(trackerElement.obj || {}).label || trackerElement.id}</div>\n          <div class=\"value\" slot=\"right\">\n            {NomieUOM.format(trackerElement.value, (trackerElement.obj || {}).uom)}\n          </div>\n        </NItem>\n      {/each}\n    </div>\n\n  </NItem>\n{/if}\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import config from \"../../../config/global\";\n  import LogList from \"./log-list.svelte\";\n  import NItem from \"../list-item/list-item.svelte\";\n  import NSpinner from \"../spinner/spinner.svelte\";\n  import { LedgerStore } from \"../../store/ledger\";\n  import tick from \"../../utils/tick/tick\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  // vendor\n  import dayjs from \"dayjs\";\n\n  export let term = null;\n  export let limit = 20;\n  export let compact = false;\n\n  let loading = false;\n  let logs = [];\n\n  let lastFrom;\n  let lastTo;\n\n  let searchCount = 0;\n\n  // React to Term Change\n  let lastTerm;\n\n  $: if (term && lastTerm !== term) {\n    lastTerm = term;\n    reset();\n    search();\n  }\n\n  function reset() {\n    logs = [];\n    lastTo = null;\n    lastFrom = null;\n    lastTerm = null;\n  }\n\n  async function search() {\n    searchCount++;\n    // Set from and to date\n    loading = true;\n    let from = !lastFrom\n      ? dayjs().subtract(limit, config.book_time_unit)\n      : dayjs(lastFrom).subtract(limit, config.book_time_unit);\n    let to = !lastTo\n      ? dayjs()\n      : dayjs(lastTo).subtract(limit, config.book_time_unit);\n\n    // Query the ledger\n    let book = await LedgerStore.query({\n      start: from.toDate(),\n      end: to.toDate(),\n      search: term\n    });\n    //\n    logs = [...logs, ...book].sort((a, b) => {\n      return a.end > b.end ? 1 : -1;\n    });\n    lastFrom = from;\n    lastTo = to;\n    await tick(12);\n    loading = false;\n  }\n\n  function cancelSearch() {\n    canceled = true;\n  }\n\n  onMount(() => {\n    reset();\n  });\n</script>\n\n<style lang=\"scss\">.log-list-loader {\n  position: relative; }\n</style>\n\n<div class=\"log-list-loader\">\n  <LogList\n    {compact}\n    {logs}\n    on:trackerClick={event => {\n      dispatch('trackerClick', event.detail);\n    }}\n    on:locationClick={event => {\n      dispatch('locationClick', event.detail);\n    }}\n    on:textClick={event => {\n      dispatch('textClick', event.detail);\n    }}\n    on:moreClick={event => {\n      dispatch('moreClick', event.detail);\n    }} />\n  {#if !loading && logs.length == 0}\n    <div class=\"p-2 text-center text-faded-2\">0 results</div>\n  {/if}\n  {#if !loading && lastTo}\n    <NItem className=\"py-2 bg-transparent mb-2\">\n      <button class=\"btn btn-outline btn-light btn-block\" on:click={search}>\n        Search past {lastFrom.format('MMM Do YYYY')}...\n      </button>\n    </NItem>\n  {:else if loading}\n    <NItem className=\"py-2 bg-transparent mb-2\">\n      <button class=\"btn btn-outline btn-light btn-block\" disabled>\n        Searching...\n      </button>\n    </NItem>\n  {/if}\n\n</div>\n",
    "<script>\n  import NText from \"../text/text.svelte\";\n\n  import { fly } from \"svelte/transition\";\n  import { onDestroy, createEventDispatcher } from \"svelte\";\n\n  import NToolbarGrid from \"../toolbar/toolbar-grid.svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n\n  const dispatch = createEventDispatcher();\n  // Props\n  export let padding = false;\n  export let title = \"Modal\";\n  export let allowClose = undefined;\n  export let fullscreen = false;\n  export let flexBody = undefined;\n  export let show = true; // Defaulted to true so it can be controlled by a parent component\n  export let className = undefined;\n  export let type = \"normal\"; // cover, fullscreen, bottom, bottom-slide-up\n  export let bodyClass = \"\";\n  export let closeOnBackgroundTap = false;\n\n  const has_header = (arguments[1].$$slots || {}).hasOwnProperty(\"header\");\n  const has_raw_header = (arguments[1].$$slots || {}).hasOwnProperty(\n    \"raw-header\"\n  );\n  const has_footer = (arguments[1].$$slots || {}).hasOwnProperty(\"footer\");\n\n  let domVisible = false;\n  let showModal = false;\n\n  // Stagger showing and dom showing for CSS effects\n  $: if (show) {\n    // document.body.classList.add(\"no-scroll\");\n    showModal = true;\n    setTimeout(() => {\n      domVisible = true;\n    }, 100);\n  }\n\n  $: if (show == false) {\n    // document.body.classList.remove(\"no-scroll\");\n    domVisible = false;\n    setTimeout(() => {\n      showModal = false;\n    }, 400);\n  }\n\n  function backgroundTap() {\n    console.log(\"Background Tap\");\n    if (closeOnBackgroundTap == true) {\n      console.log(\"Closing\");\n      dispatch(\"close\");\n    }\n  }\n\n  onDestroy(() => {\n    // document.body.classList.remove(\"no-scroll\");\n  });\n</script>\n\n<style lang=\"scss\">@media (max-width: 599.98px) {\n  .container {\n    padding-left: 0 !important;\n    padding-right: 0 !important; } }\n\n@media (min-width: 980px) {\n  .container.board-container {\n    max-width: 90% !important; } }\n\n.n-modal-frame {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--color-full-screen);\n  z-index: 2000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.6s ease-in-out; }\n  .n-modal-frame.hidden {\n    opacity: 0;\n    pointer-events: none;\n    overflow: hidden; }\n  .n-modal-frame.type-bottom {\n    justify-content: flex-end; }\n  .n-modal-frame.type-bottom-slideup {\n    justify-content: flex-end;\n    margin-bottom: -20px;\n    padding-bottom: 20px; }\n    .n-modal-frame.type-bottom-slideup.hidden .n-modal {\n      transform: translateY(700px); }\n    .n-modal-frame.type-bottom-slideup .n-modal {\n      transition: all 0.4s ease-in-out;\n      max-height: 87vh;\n      width: 95vw;\n      max-width: 600px;\n      flex-grow: 1;\n      flex-shrink: 1;\n      height: 70vh;\n      margin-bottom: 0px;\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      padding-bottom: env(safe-area-inset-bottom);\n      box-shadow: var(--box-shadow);\n      border: solid 1px var(--color-faded-1); }\n  .n-modal-frame.type-fullscreen {\n    background-color: rgba(0, 0, 0, 0.95); }\n    .n-modal-frame.type-fullscreen .n-modal {\n      height: 100vh;\n      width: 100vw;\n      max-height: 100vh;\n      max-width: 100vw;\n      border-radius: 0px;\n      margin: 0; }\n      @media (min-width: 600px) {\n        .n-modal-frame.type-fullscreen .n-modal {\n          max-width: 500px;\n          max-height: 700px;\n          border-radius: 0.7rem; } }\n    .n-modal-frame.type-fullscreen .n-modal-footer {\n      padding-bottom: calc(env(safe-area-inset-bottom) + 10px); }\n  .n-modal-frame.type-cover .n-modal {\n    padding-top: env(safe-area-inset-top) !important;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-width: 100vw;\n    bottom: 0;\n    border-radius: 0px;\n    margin: 0;\n    margin-left: 0;\n    margin-right: 0;\n    max-height: 100vh; }\n\n.n-modal {\n  border: var(--modal-border);\n  min-width: 320px;\n  background-color: var(--color-solid);\n  min-height: 200px;\n  max-height: 90vh;\n  max-width: 400px;\n  position: relative;\n  margin: 10px;\n  border-radius: 1.2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: stretch;\n  border: var(--modal-border);\n  box-shadow: var(--box-shadow-float);\n  transition: all 0.2s ease-in-out; }\n  .n-modal .n-modal-body {\n    flex-grow: 1;\n    overflow-y: auto;\n    overflow-x: hidden;\n    z-index: 1; }\n    @media (min-width: 600px) {\n      .n-modal .n-modal-body {\n        padding: 20px; } }\n  .n-modal.full-screen-modal {\n    height: 96vh;\n    width: 96vw;\n    max-width: 700px;\n    max-height: 700px; }\n    @media (max-width: 599.98px) {\n      .n-modal.full-screen-modal {\n        height: 100vh;\n        width: 100vw;\n        max-height: 100vh;\n        max-width: 100vh;\n        margin: 0 !important; } }\n    .n-modal.full-screen-modal .n-modal-footer {\n      padding-bottom: calc(env(safe-area-inset-bottom) + 10px); }\n    .n-modal.full-screen-modal .n-modal-body.flex-body {\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: stretch;\n      align-items: stretch; }\n\n.n-modal-raw-header {\n  z-index: 2; }\n\n.n-modal-header {\n  min-height: 40px;\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-grow: 0;\n  flex-shrink: 0;\n  color: var(--color-inverse);\n  box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.09);\n  z-index: 2; }\n\n.n-modal-footer {\n  flex-grow: 0;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 10px;\n  border-top: solid 1px rgba(0, 0, 0, 0.05);\n  box-shadow: 0px -6px 12px rgba(0, 0, 0, 0.09);\n  z-index: 2; }\n\n:global(.n-modal-footer .btn) {\n  padding-left: 26px;\n  padding-right: 26px; }\n\n.n-modal-body {\n  overflow-y: scroll;\n  overflow-y: scroll; }\n  .n-modal-body.padding {\n    padding: 20px; }\n  .n-modal-body.no-padding {\n    padding: 0px !important;\n    overflow: scroll; }\n</style>\n\n<div\n  on:click={backgroundTap}\n  class=\"n-modal-frame {className} type-{type}\n  {domVisible ? 'visible' : 'hidden'}\">\n  <div\n    on:click|stopPropagation={() => {}}\n    class=\"n-modal animate up {fullscreen ? 'full-screen-modal' : ''}\n    {domVisible ? 'visible' : 'hidden'}\">\n    {#if has_raw_header}\n      <div class=\"n-modal-raw-header\">\n        <slot name=\"raw-header\" />\n      </div>\n    {:else if has_header || title}\n      <div class=\"n-modal-header\">\n        {#if has_header}\n          <slot name=\"header\" />\n        {:else}\n          <NToolbarGrid>\n            <div slot=\"left\">\n              {#if allowClose}\n                <button\n                  class=\"btn btn-clear btn-icon tap-icon\"\n                  on:click={() => {\n                    dispatch('close');\n                  }}>\n                  <NIcon name=\"close\" />\n                </button>\n              {/if}\n            </div>\n            <h1 slot=\"main\">{title}</h1>\n          </NToolbarGrid>\n        {/if}\n      </div>\n    {/if}\n    <div\n      class=\"{bodyClass} n-modal-body {padding ? 'padding' : 'no-padding'}\n      {flexBody ? 'flex-body' : 'no-flex-body'}\n      \">\n      <slot />\n    </div>\n    {#if has_footer}\n      <div class=\"n-modal-footer\">\n        <slot name=\"footer\" />\n      </div>\n    {/if}\n  </div>\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  // Components\n  import NTagBadge from \"../tag-badge/tag-badge.svelte\";\n\n  //Utils\n  import extractor from \"../../utils/extract/extract\";\n\n  // Modules\n  import Tracker from \"../../modules/tracker/tracker\";\n\n  // Props\n  export let note = \"\";\n  export let trackers = {};\n  export let className = undefined;\n\n  const dispatch = createEventDispatcher();\n\n  const state = {\n    words: []\n  };\n\n  let actual = 0;\n\n  const methods = {\n    split(str) {\n      return str.split(\" \");\n    },\n    tracker_get(tag) {\n      return (trackers || {})[tag] || new Tracker({ tag: tag });\n    },\n    textElementClick(element) {\n      dispatch(\"textClick\", element);\n    },\n    linkClick(link) {\n      window.open(link, \"_system\");\n    },\n    note_to_array(str) {\n      let parsed = extractor.parse(str, { includeGeneric: true });\n      let matches = parsed.filter(trackableElement => {\n        return (\n          (\"person\", \"context\", \"generic\").indexOf(trackableElement.type) > -1\n        );\n      });\n      actual = matches.length;\n      return parsed;\n    }\n  };\n\n  state.words = methods.note_to_array(note);\n</script>\n\n<style lang=\"scss\">.n-note-textualized.inherit {\n  font-size: inherit;\n  line-height: inherit;\n  letter-spacing: inherit; }\n\n.n-note-textualized .value {\n  max-height: 15px;\n  flex-shrink: 0;\n  font-size: 10px;\n  font-weight: bold;\n  height: 14px;\n  min-width: 14px;\n  padding: 0 4px;\n  color: #fff;\n  border-radius: 6px;\n  text-align: center;\n  display: inline-block; }\n\n.n-note-textualized .string,\n.n-note-textualized .tracker,\n.n-note-textualized .person,\n.n-note-textualized .context {\n  padding-right: 3px;\n  flex-shrink: 0; }\n\n.n-note-textualized .remainder {\n  padding-right: 5px;\n  margin-left: -6px; }\n\n.n-note-textualized span {\n  display: inline; }\n</style>\n\n{#if actual}\n  <div\n    class=\"n-note-textualized {className}\n    {state.words.length > 20 ? 'long-note' : 'short-note'}\">\n    {#each state.words as word}\n      {#if word.type === 'tracker'}\n        <span\n          class=\"tracker font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.textElementClick(word);\n          }}>\n          {` #${word.id} `}\n        </span>\n      {:else if word.type == 'person'}\n        <span\n          class=\"person font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.textElementClick(word);\n          }}>\n          {` ${word.raw} `}\n        </span>\n      {:else if word.type == 'context'}\n        <span\n          class=\"context font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.textElementClick(word);\n          }}>\n          {` ${word.raw} `}\n        </span>\n      {:else if word.type == 'link'}\n        <span\n          class=\"context font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.linkClick(word.raw);\n          }}>\n          {` ${word.id} `}\n        </span>\n      {:else if word.type == 'line-break'}\n        <br />\n      {:else if word.raw}{word.raw + ' '}{/if}\n      {#if word.remainder}\n        <span class=\"remainder\">{word.remainder.trim()}</span>\n      {/if}\n    {/each}\n  </div>\n{/if}\n",
    "<script>\n  export let points = 0;\n  export let className = undefined;\n  $: dir = points > 0 ? \"+\" : points < 0 ? \"\" : \"\";\n  $: positiveClass =\n    points > 0 ? \"positive\" : points < 0 ? \"negative\" : \"neutral\";\n</script>\n\n<style lang=\"scss\">.n-points {\n  position: relative;\n  border-radius: 13px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n  font-weight: bolder;\n  overflow: visible;\n  max-height: 22px; }\n  .n-points.positive {\n    color: var(--color-green); }\n    .n-points.positive .dir {\n      color: var(--color-green); }\n  .n-points svg {\n    margin-left: 2px;\n    position: absolute;\n    display: block;\n    width: 12px;\n    height: 12px;\n    right: -7px;\n    top: -4px; }\n  .n-points.negative {\n    color: var(--color-red); }\n    .n-points.negative .dir {\n      color: var(--color-red); }\n  .n-points.neutral {\n    color: var(--color-primary-bright); }\n    .n-points.neutral .dir {\n      color: var(--color-primary-bright); }\n</style>\n\n{#if points !== 0}\n  <div class=\"n-points {className} {positiveClass}\">\n    <span class=\"dir\">{dir}</span>\n    <span class=\"number\">{points}</span>\n    {#if points > 0}\n      <svg\n        width=\"19\"\n        height=\"19\"\n        viewBox=\"0 0 19 19\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0)\">\n          <path\n            d=\"M-4.15258e-07 9.5C-6.44599e-07 14.7467 4.25329 19 9.5 19C14.7467\n            19 19 14.7467 19 9.5C19 4.25329 14.7467 -1.85917e-07 9.5\n            -4.15258e-07C4.25329 -6.44599e-07 -1.85917e-07 4.25329 -4.15258e-07\n            9.5Z\"\n            fill=\"#FFD93B\" />\n          <path\n            d=\"M9.4999 15.606C6.72175 15.606 4.30103 13.7244 3.61347\n            11.0312C3.55943 10.8192 3.68709 10.6037 3.89906 10.5497C4.10984\n            10.4944 4.32597 10.6233 4.38 10.8352C4.9785 13.1782 7.08334 14.8146\n            9.49931 14.8146C11.9153 14.8146 14.0207 13.1782 14.6186\n            10.8352C14.6721 10.6233 14.8876 10.4944 15.1002 10.5497C15.3121\n            10.6037 15.4398 10.8192 15.3857 11.0312C14.6988 13.7244 12.2781\n            15.606 9.4999 15.606Z\"\n            fill=\"#3E4347\" />\n          <path\n            d=\"M6.43195 9.90569C7.23601 9.90569 7.88782 9.13106 7.88782\n            8.1755C7.88782 7.21994 7.23601 6.44531 6.43195 6.44531C5.62789\n            6.44531 4.97607 7.21994 4.97607 8.1755C4.97607 9.13106 5.62789\n            9.90569 6.43195 9.90569Z\"\n            fill=\"#3E4347\" />\n          <path\n            d=\"M7.08871 7.8032C6.9753 7.89227 6.78886 7.84833 6.66952\n            7.70345C6.55017 7.55858 6.54424 7.36442 6.65764 7.27536C6.77046\n            7.18214 6.95749 7.22608 7.07624 7.37096C7.19618 7.51999 7.19736\n            7.71058 7.08871 7.8032Z\"\n            fill=\"#5A5F63\" />\n          <path\n            d=\"M12.5696 9.90569C13.3737 9.90569 14.0255 9.13106 14.0255\n            8.1755C14.0255 7.21994 13.3737 6.44531 12.5696 6.44531C11.7656\n            6.44531 11.1138 7.21994 11.1138 8.1755C11.1138 9.13106 11.7656\n            9.90569 12.5696 9.90569Z\"\n            fill=\"#3E4347\" />\n          <path\n            d=\"M13.2249 7.8032C13.1115 7.89227 12.9251 7.84833 12.8057\n            7.70345C12.6864 7.55858 12.6805 7.36442 12.7939 7.27536C12.9067\n            7.18214 13.0931 7.22608 13.2125 7.37096C13.3324 7.51999 13.3336\n            7.71058 13.2249 7.8032Z\"\n            fill=\"#5A5F63\" />\n        </g>\n        <defs>\n          <clipPath id=\"clip0\">\n            <rect width=\"19\" height=\"19\" fill=\"white\" />\n          </clipPath>\n        </defs>\n      </svg>\n    {:else}\n      <svg\n        width=\"19\"\n        height=\"19\"\n        viewBox=\"0 0 19 19\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0)\">\n          <path\n            d=\"M-4.15258e-07 9.5C-6.44599e-07 14.7467 4.25329 19 9.5 19C14.7467\n            19 19 14.7467 19 9.5C19 4.25329 14.7467 -1.85917e-07 9.5\n            -4.15258e-07C4.25329 -6.44599e-07 -1.85917e-07 4.25329 -4.15258e-07\n            9.5Z\"\n            fill=\"#FFB13B\" />\n          <path\n            d=\"M13.1586 15.1102C12.686 15.3952 11.4142 14.127 9.66145\n            14.1115C7.93423 14.0961 6.63689 15.3958 6.16427 15.1102C5.59842\n            14.8799 6.56623 12.1189 9.66145 12.1023C12.7567 12.1189 13.7245\n            14.8805 13.1586 15.1102Z\"\n            fill=\"#1C1C1C\" />\n          <path\n            d=\"M14.485 8.22031C14.485 9.0569 13.8005 9.74149 12.9603\n            9.74149C12.1195 9.74149 11.4355 9.0569 11.4355 8.22031C11.4355\n            7.37599 12.1201 6.69556 12.9603 6.69556C13.801 6.69556 14.485\n            7.37599 14.485 8.22031Z\"\n            fill=\"#19191A\" />\n          <path\n            d=\"M13.6584 7.36028C13.471 7.19754 13.235 7.16236 13.1314\n            7.28171C13.0278 7.40106 13.0957 7.62974 13.2832 7.79249C13.4706\n            7.95523 13.7066 7.99041 13.8102 7.87106C13.9138 7.75171 13.8459\n            7.52303 13.6584 7.36028Z\"\n            fill=\"#5A5F63\" />\n          <path\n            d=\"M7.56415 8.22031C7.56415 9.0569 6.87955 9.74149 6.0394\n            9.74149C5.19924 9.74149 4.51465 9.0569 4.51465 8.22031C4.51465\n            7.37599 5.19924 6.69556 6.0394 6.69556C6.87955 6.69556 7.56415\n            7.37599 7.56415 8.22031Z\"\n            fill=\"#19191A\" />\n          <path\n            d=\"M6.73703 7.36077C6.54958 7.19803 6.31363 7.16285 6.21001\n            7.2822C6.10638 7.40155 6.17433 7.63023 6.36178 7.79297C6.54922\n            7.95572 6.78517 7.99089 6.8888 7.87155C6.99242 7.7522 6.92447\n            7.52352 6.73703 7.36077Z\"\n            fill=\"#5A5F63\" />\n        </g>\n        <defs>\n          <clipPath id=\"clip0\">\n            <rect width=\"19\" height=\"19\" fill=\"white\" />\n          </clipPath>\n        </defs>\n      </svg>\n    {/if}\n\n  </div>\n{/if}\n",
    "<script>\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NItem from \"../list-item/list-item.svelte\";\n  import { createEventDispatcher, onMount, onDestroy } from \"svelte\";\n  import { Lang } from \"../../store/lang\";\n  const dispatch = createEventDispatcher();\n\n  export let title = undefined;\n  export let description = undefined;\n  export let buttons = [];\n  // export let cancel = undefined;\n  export let show = true;\n\n  const methods = {\n    backgroundClicked(event) {\n      dispatch(\"close\");\n    }\n  };\n  let escListener;\n  $: if (show) {\n    escListener = document.addEventListener(\"keyup\", evt => {\n      if (evt.key == \"Escape\") {\n        dispatch(\"close\");\n      }\n    });\n  } else {\n    escListener = document.removeEventListener(\"keyup\", () => {});\n  }\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">:global(.pop-menu) {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2000;\n  padding-bottom: env(safe-area-inset-bottom);\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  transition: all 0.5s ease-in-out; }\n  :global(.pop-menu):before {\n    content: \"\";\n    background-color: var(--color-full-screen);\n    opacity: 0.8;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0; }\n  :global(.pop-menu).visible {\n    opacity: 1; }\n  :global(.pop-menu).hidden {\n    pointer-events: none;\n    opacity: 0; }\n    :global(.pop-menu).hidden .card {\n      opacity: 0;\n      transform: translateY(400px) scaleY(0.1) scaleX(0.1); }\n  :global(.pop-menu) .card {\n    transition: all 0.2s ease-in-out;\n    max-width: 400px;\n    max-height: 80vh;\n    min-height: 100px;\n    width: 200px;\n    min-width: 300px !important;\n    flex-grow: 1;\n    background-color: var(--color-darkest);\n    color: var(--color-inverse-1);\n    border-radius: 1.2rem;\n    border: var(--modal-border);\n    box-shadow: var(--box-shadow-float);\n    padding: 10px;\n    margin: 10px;\n    display: flex;\n    justify-content: stretch;\n    align-content: stretch; }\n    :global(.pop-menu) .card .btn {\n      border-radius: 0;\n      margin-bottom: 0;\n      margin-top: 0; }\n      :global(.pop-menu) .card .btn:first-child {\n        border-top-right-radius: 1rem;\n        border-top-left-radius: 1rem; }\n      :global(.pop-menu) .card .btn:nth-last-child(2) {\n        border-bottom-right-radius: 1rem;\n        border-bottom-left-radius: 1rem; }\n      :global(.pop-menu) .card .btn:last-child {\n        border-radius: 1rem;\n        margin-top: 10px; }\n      :global(.pop-menu) .card .btn:active {\n        transform: scale(0.98); }\n      :global(.pop-menu) .card .btn:hover {\n        transform: none;\n        background-color: var(--color-faded) !important; }\n      :global(.pop-menu) .card .btn.btn-danger:hover {\n        background-color: var(--color-red) !important; }\n    :global(.pop-menu) .card .card-body {\n      flex-grow: 1;\n      flex-shrink: 1;\n      overflow-x: hidden; }\n  :global(.pop-menu) .btn-toolbar .btn {\n    min-width: 100px; }\n</style>\n\n<div\n  class=\"full-screen dark-glass pop-menu {show === true ? 'visible' : 'hidden'}\"\n  on:click={methods.backgroundClicked}>\n  <div class=\"card\">\n    {#if title || description}\n      <div class=\"pb-3 pt-2 text-center\">\n        {#if title}\n          <h5 class=\"text-center m-0 p-0 text-md text-inverse-2\">{title}</h5>\n        {/if}\n        {#if description}\n          <p class=\"text-center m-0 p-0\">{description}</p>\n        {/if}\n      </div>\n    {/if}\n    <div class=\"list\">\n      {#each buttons as button}\n        <button\n          class=\"btn btn-block btn-light btn-lg {button.description ? 'btn-desc' : ''}\"\n          on:click|stopPropagation={() => {\n            button.click();\n            dispatch('close');\n          }}>\n          <div class=\"title\">{button.title}</div>\n          {#if button.description}\n            <div class=\"description\">{button.description}</div>\n          {/if}\n        </button>\n      {/each}\n      <button\n        class=\"btn btn-block btn-danger btn-lg\"\n        on:click|stopPropagation={() => {\n          dispatch('close');\n        }}>\n        {Lang.t('general.cancel')}\n      </button>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import math from \"../../utils/math/math\";\n  import { onMount } from \"svelte\";\n\n  export let positive = 10;\n  export let negative = 10;\n  export let neutral = 30;\n  export let className = \"\";\n  export let style = \"\";\n\n  let positivity = [0, 0, 0];\n  let negativeStyle = \"\";\n  let neutralStyle = \"\";\n  let positiveStyle = \"\";\n\n  $: if (neutral | positive | negative) {\n    main();\n  }\n\n  function main() {\n    positivity = math.percentile([negative, neutral, positive]);\n    negativeStyle = `width:${positivity[0]}%`;\n    neutralStyle = `width:${positivity[1]}%`;\n    positiveStyle = `width:${positivity[2]}%`;\n  }\n</script>\n\n<style lang=\"scss\">.positivity-bar {\n  padding: 8pt 16px; }\n  .positivity-bar .bar {\n    display: flex;\n    border-radius: 4pt;\n    overflow: hidden;\n    flex-direction: row;\n    height: 8pt; }\n  .positivity-bar .negative {\n    background-color: var(--color-red);\n    margin-right: 1px; }\n  .positivity-bar .positive {\n    background-color: var(--color-green);\n    margin-left: 1px; }\n  .positivity-bar .neutral {\n    background-color: var(--color-primary-bright); }\n  .positivity-bar .unit {\n    height: 8pt;\n    border-radius: 4pt; }\n</style>\n\n{#if negative || neutral || positive}\n  <div class=\"positivity-bar {className}\" {style}>\n    <div class=\"bar\">\n      <div class=\"unit negative\" data-score={negative} style={negativeStyle} />\n      <div class=\"unit neutral\" data-score={neutral} style={neutralStyle} />\n      <div class=\"unit positive\" data-score={positive} style={positiveStyle} />\n    </div>\n  </div>\n{/if}\n",
    "<script>\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NInput from \"../input/input.svelte\";\n\n  import { Lang } from \"../../store/lang\";\n  import { createEventDispatcher } from \"svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let searchTerm = null;\n  export let autocomplete = false;\n  export let placeholder = `${Lang.t(\"general.search\")}...`;\n  export let style = \"\";\n  export let className = \"\";\n\n  let _elInput;\n  // export let hasResults = false;\n\n  // FIre off changes when input changes\n  function fireChange() {\n    dispatch(\"change\", searchTerm);\n  }\n\n  export function focus() {\n    if (_elInput.doFocus) {\n      _elInput.doFocus();\n    }\n  }\n  // Fire off when search is hit\n  function fireSearch() {\n    dispatch(\"search\", searchTerm);\n  }\n  // Fire off clearing\n  function fireClear() {\n    dispatch(\"clear\");\n    searchTerm = null;\n  }\n  // Watch for enter keys\n  function searchKeypress(event) {\n    if (event.key === \"Enter\" || event.key === \"Return\") {\n      fireSearch();\n      return false;\n    } else {\n      fireChange();\n    }\n  }\n</script>\n\n<style lang=\"scss\">@charset \"UTF-8\";\n:global(.search-bar) {\n  padding: 0 16pt;\n  position: relative;\n  îdisplay: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-shrink: 0;\n  flex-grow: 1;\n  width: calc(100% - 16pt);\n  margin: 0 8pt; }\n  @media (min-width: 350px) {\n    :global(.search-bar) {\n      margin: 0 auto; } }\n\n:global(.search-bar .btn-action-clear) {\n  font-size: 14px; }\n\n:global(.search-bar input) {\n  width: calc(100% - 30px); }\n\n:global(.search-bar .n-input-wrapper) {\n  min-height: 40px !important; }\n\n:global(.search-bar .n-input-container) {\n  margin-bottom: 0 !important; }\n</style>\n\n<NToolbar className=\"search-bar container {className}\" {style}>\n  {#if searchTerm}\n    <button\n      class=\"btn btn-sm btn-clear btn-action-clear\"\n      on:click={fireClear}\n      style=\"margin-left:-10px;\">\n      <NIcon name=\"close\" size=\"32\" />\n    </button>\n  {/if}\n  <div class=\"n-row\">\n    <NInput\n      solo\n      compact\n      bind:this={_elInput}\n      bind:value={searchTerm}\n      on:change={fireChange}\n      on:enter={fireSearch}\n      {placeholder}>\n      <div slot=\"left\" class=\"pl-2\">\n        <NIcon\n          name=\"search\"\n          style=\"height:20px; width: 20px; opacity:0.3; margin-top:-4px;\" />\n      </div>\n      <div slot=\"right\">\n        <slot name=\"right-inside\" />\n      </div>\n    </NInput>\n    <slot name=\"right\" />\n    {#if searchTerm && !autocomplete}\n      <button class=\"btn btn-sm text-inverse-2\" on:click={fireSearch}>\n        Search\n      </button>\n    {/if}\n  </div>\n</NToolbar>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import Sortable from \"sortablejs\";\n  // DISPATCH REORDER\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  // PROPS\n  export let items;\n  export let key;\n  export let handle = undefined;\n\n  let sortableList;\n\n  const reorder = (to, from) => {\n    let newList = [...items];\n    let tempItem = \"temp\";\n    let movedItem = newList[from];\n\n    // Cut in the temp Item\n    newList.splice(to, 0, tempItem);\n    // FILTER OUT MOVED ITEM\n    newList = newList\n      .filter(item => {\n        return item !== movedItem;\n      })\n      .map(item => {\n        return item !== tempItem ? item : movedItem;\n      });\n\n    dispatch(\"update\", newList);\n  };\n\n  // UTILS\n  const getKey = item => (key ? item[key] : item);\n\n  onMount(() => {\n    setTimeout(() => {\n      if (sortableList) {\n        let sortable = Sortable.create(sortableList, {\n          handle: handle,\n          onEnd: function(evt) {\n            reorder(evt.newDraggableIndex, evt.oldDraggableIndex);\n          }\n        });\n      }\n    });\n  });\n</script>\n\n<style>\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    max-width: 100%;\n    overflow: hidden;\n  }\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  :global(.sortable-chosen) {\n    box-shadow: 0px 10px 15px rgba(0, 0, 0, 0.3);\n  }\n  :global(.sortable-ghost) {\n    opacity: 0.7;\n  }\n</style>\n\n{#if items && items.length}\n  <ul bind:this={sortableList}>\n    {#each items as item, index (getKey(item))}\n      <li>\n        <slot {item} {index} />\n      </li>\n    {/each}\n  </ul>\n{/if}\n",
    "<script>\n  export let steps = 0;\n  export let current = 0;\n  export let dark = false;\n  export let stepClass = \"\";\n\n  let _steps = [];\n  $: if (steps || current) {\n    _steps = [];\n    for (let i = 0; i < steps; i++) {\n      _steps.push(current >= i);\n    }\n  }\n</script>\n\n<style lang=\"scss\">.n-stepper {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: stretch;\n  padding: 4px; }\n  .n-stepper .step {\n    transition: all 0.2s ease-in-out;\n    border: solid 1px var(--color-translucent);\n    opacity: 0.5;\n    height: 6px;\n    flex-grow: 1;\n    flex-shrink: 1;\n    margin: 0 2px;\n    min-width: 6px;\n    border-radius: 3px; }\n    .n-stepper .step.primary-bright {\n      border: solid 1px var(--color-primary-bright) !important; }\n    .n-stepper .step.active {\n      background-color: var(--color-translucent);\n      opacity: 1;\n      height: 6px; }\n      .n-stepper .step.active.primary-bright {\n        background-color: var(--color-primary-bright) !important; }\n  .n-stepper.dark .step {\n    background-color: var(--color-primary);\n    opacity: 0.2; }\n    .n-stepper.dark .step.active {\n      opacity: 1; }\n</style>\n\n<div class=\"n-stepper {dark ? 'dark' : 'light'}\">\n  {#each _steps as step}\n    <div class=\"step {stepClass} {step ? 'active' : 'inactive'}\" />\n  {/each}\n</div>\n",
    "<script>\n  export let label = undefined;\n  export let value = undefined;\n  // export let color = undefined;\n  export let emoji = undefined;\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.n-tag-badge {\n  display: inline-flex;\n  align-items: center;\n  background-color: #fff;\n  box-shadow: 0px 3px 5px -2px rgba(0, 0, 0, 0.1);\n  border: solid 1px rgba(49, 158, 215, 0.2);\n  color: #319ed7;\n  padding-left: 6px;\n  padding-right: 2px;\n  border-radius: 20px;\n  margin-right: 6px;\n  line-height: 15px; }\n\n.n-tag-badge .value {\n  display: inline-block;\n  padding: 2px 4px 2px;\n  background-color: rgba(255, 255, 255, 0.2);\n  min-width: 20px;\n  border-radius: 20px;\n  text-align: center;\n  margin-left: 4px; }\n\n.n-tag-badge .emoji {\n  margin-right: 3px;\n  opacity: 0.7; }\n</style>\n\n<div class=\"n-tag-badge badge badge-sm\">\n  {#if emoji}\n    <div class=\"emoji\">{emoji}</div>\n  {/if}\n  <div class=\"label\">{label}</div>\n  <div class=\"value\">{value}</div>\n</div>\n",
    "<script>\n  export let size = \"sm\";\n  // export let color = undefined;\n  export let bold = undefined;\n  export let medium = undefined;\n  export let tag = \"span\";\n  export let className = \"\";\n</script>\n\n<style type=\"text/scss\">.n-text {\n  color: var(--color-inverse);\n  line-height: 100%; }\n  .n-text.xs {\n    font-size: 0.65rem; }\n  .n-text.sm {\n    font-size: 0.85rem;\n    line-height: 0.98rem; }\n  .n-text.md {\n    font-size: 1rem; }\n  .n-text.lg {\n    font-size: 1.25rem; }\n  .n-text.xl {\n    font-size: 2rem; }\n  .n-text.font-weight-bold {\n    font-weight: bold; }\n  .n-text.font-weight-medium {\n    font-weight: 500; }\n</style>\n\n{#if tag === 'span'}\n  <span\n    class=\"n-text {size || 'sm'}\n    {className}\n    {bold ? 'font-weight-bold' : ''}\n    {medium ? 'font-weight-medium' : ''}\">\n    <slot />\n  </span>\n{:else}\n  <div\n    class=\"n-text {size || 'sm'}\n    {className}\n    {bold ? 'font-weight-bold' : ''}\n    {medium ? 'font-weight-medium' : ''}\">\n    <slot />\n  </div>\n{/if}\n",
    "<script>\n  export let hours = [];\n  export let base = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23\n  ];\n</script>\n\n<style lang=\"scss\">.time-balls {\n  border-radius: 4px;\n  height: 4px;\n  display: flex; }\n  .time-balls .hour {\n    flex-shrink: 0;\n    flex-grow: 0;\n    min-height: calc(100% / 24);\n    min-width: calc(100% / 24);\n    border-radius: 2px;\n    overflow: visible; }\n    .time-balls .hour .active {\n      background-color: var(--color-primary);\n      opacity: 0.5;\n      width: 4px;\n      height: 4px;\n      border-radius: 2px; }\n</style>\n\n<div class=\"time-balls\">\n  {#each base as hour}\n    <div class=\"hour\">\n      {#if hours.indexOf(hour) > -1}\n        <div class=\"active\" />\n      {/if}\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  import { Lang } from \"../../store/lang\";\n  import Storage from \"../../modules/storage/storage\";\n  import NStepper from \"../../components/stepper/stepper.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import { Interact } from \"../../store/interact\";\n  import md5 from \"md5\";\n  export let tips = [];\n  export let className = \"\";\n\n  let hiddenTips = Storage.local.get(\"hidden-tips\") || [];\n\n  let id = null;\n  let show = false;\n\n  const state = {\n    activeTip: 0\n  };\n\n  $: if (tips) {\n    id = md5(JSON.stringify(tips));\n    show = hiddenTips.indexOf(id) == -1;\n  } else {\n    show = false;\n  }\n\n  async function hideTips() {\n    let confirmed = await Interact.confirm(\"Hide Tips?\");\n    if (confirmed) {\n      hiddenTips.push(id);\n      Storage.local.put(\"hidden-tips\", hiddenTips);\n      show = false;\n    }\n  }\n\n  function nextTip() {\n    if (state.activeTip == tips.length - 1) {\n      state.activeTip = 0;\n    } else {\n      state.activeTip++;\n    }\n  }\n  function previousTip() {\n    if (state.activeTip == 0) {\n      state.activeTip = tips.length - 1;\n    } else {\n      state.activeTip--;\n    }\n  }\n</script>\n\n<style lang=\"scss\">.n-tip-wrapper {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin: 0 16px; }\n\n.n-tips {\n  margin: 16px;\n  width: 100%;\n  max-width: 400px;\n  padding: 16px;\n  padding-bottom: 6px;\n  position: relative;\n  border-radius: 6px;\n  background-color: var(--color-solid);\n  box-shadow: var(--box-shadow-float); }\n  .n-tips .tip {\n    font-size: 0.9rem;\n    line-height: 1.2rem;\n    text-align: center;\n    color: var(--color-inverse); }\n</style>\n\n{#if show}\n  <section class=\"n-tip-wrapper {className}\">\n    <div class=\"n-tips\">\n      <div class=\"n-row mb-2\">\n        <div class=\"btn-close text-lg flex-grow-off\" on:click={hideTips}>\n          <NIcon name=\"close\" />\n        </div>\n        <button class=\"btn btn-clear btn-icon tap-icon\" on:click={previousTip}>\n          <NIcon name=\"chevronLeft\" />\n        </button>\n        <div class=\"tip filler\">{tips[state.activeTip]}</div>\n        <div class=\"d-flex flex-row arrows\">\n          <button class=\"btn btn-clear btn-icon tap-icon\" on:click={nextTip}>\n            <NIcon name=\"chevronRight\" />\n          </button>\n        </div>\n      </div>\n      <NStepper steps={tips.length} current={state.activeTip} dark />\n    </div>\n  </section>\n{/if}\n",
    "<script>\n  // Svelte\n  import { slide } from \"svelte/transition\";\n\n  // Props\n  export let message = \"Done\";\n  export let show = false;\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.n-toast {\n  z-index: 10003;\n  position: fixed;\n  bottom: 0px;\n  height: 140px;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  pointer-events: none;\n  padding-bottom: env(safe-area-inset-bottom);\n  transition: all 0.2s ease-in-out;\n  padding-left: 16px;\n  padding-right: 16px; }\n  .n-toast.hidden {\n    transform: translateY(100px) scale(0.8);\n    opacity: 0; }\n  .n-toast.visible {\n    transform: none;\n    opacity: 1; }\n  .n-toast .n-toast-panel {\n    min-height: 36px;\n    max-height: 36px;\n    max-width: 600px;\n    min-width: 300px;\n    border-radius: 6px;\n    background-color: #319ed7;\n    color: #fff;\n    flex-grow: 0;\n    border: solid 1px rgba(0, 0, 0, 0.1);\n    box-shadow: 0px 26px 18px rgba(0, 0, 0, 0.2);\n    padding: 0 20px;\n    display: flex;\n    align-items: center; }\n</style>\n\n<div class=\"n-toast {show ? 'visible' : 'hidden'}\">\n  <div class=\"n-toast-panel\">\n    <div class=\"truncate\">{message}</div>\n  </div>\n</div>\n",
    "<script>\n  //utils\n  import { createEventDispatcher } from \"svelte\";\n\n  // consts\n  const dispatch = createEventDispatcher();\n\n  export let value = false;\n  export let locked = null;\n\n  const id = `switch-${Math.random()}`;\n\n  const methods = {\n    onChange(event) {\n      if (locked == null) {\n        dispatch(\"change\", event.target.checked);\n      } else {\n        event.target.checked = locked;\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.onoffswitch {\n  position: relative;\n  width: 50px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none; }\n  .onoffswitch .onoffswitch-checkbox {\n    display: none; }\n  .onoffswitch .onoffswitch-label {\n    display: block;\n    overflow: hidden;\n    cursor: pointer;\n    height: 30px;\n    padding: 0;\n    line-height: 30px;\n    border: 2px solid var(--color-solid-1);\n    border-radius: 30px;\n    background-color: var(--color-solid-1);\n    transition: background-color 0.2s ease-in-out;\n    margin: 0; }\n  .onoffswitch .onoffswitch-label:before {\n    content: \"\";\n    display: block;\n    width: 30px;\n    margin: 0px;\n    background: var(--color-solid);\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 22px;\n    border: 2px solid var(--color-solid-2);\n    border-radius: 30px;\n    transition: all 0.2s ease-in-out 0s; }\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label {\n    background-color: #319ed7; }\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label,\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label:before {\n    border-color: #319ed7; }\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label:before {\n    right: 0px; }\n</style>\n\n<div class=\"onoffswitch\">\n  <input\n    type=\"checkbox\"\n    name=\"onoffswitch\"\n    class=\"onoffswitch-checkbox\"\n    {id}\n    bind:value\n    bind:checked={value}\n    on:change={methods.onChange} />\n  <label class=\"onoffswitch-label\" for={id} />\n</div>\n",
    "<script>\n  export let pinTop = undefined;\n  export let className = \"\";\n  export let style = \"\";\n</script>\n\n<style lang=\"scss\">.n-toolbar {\n  transition: all 0.2s ease-in-out;\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  padding: 0 8pt; }\n  .n-toolbar h1,\n  .n-toolbar h2,\n  .n-toolbar h3 {\n    font-size: 1rem !important;\n    margin: 0; }\n  .n-toolbar .btn-sm {\n    max-height: 40px; }\n  .n-toolbar.hidden {\n    opacity: 0;\n    pointer-events: none; }\n  .n-toolbar.pin-top {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 300;\n    background-color: var(--color-solid);\n    color: var(--color-inverse);\n    min-height: 50px;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    box-shadow: 0px 4px 4px -2px rgba(0, 0, 0, 0.1);\n    padding-top: env(safe-area-inset-top); }\n    .n-toolbar.pin-top.sub-header {\n      top: 49px !important; }\n  .n-toolbar [slot=\"sub-header\"] {\n    width: 100%; }\n\n.n-toolbar.stretch {\n  justify-content: stretch; }\n\n:global(.n-toolbar .btn-clear, .n-toolbar-grid .btn-clear) {\n  border-radius: 0 !important;\n  outline: none !important;\n  padding: 0 10px;\n  font-size: 1rem; }\n</style>\n\n<div class=\"n-toolbar {pinTop ? 'pin-top' : ''} {className}\" {style}>\n  <div class=\"container n-row px-0\">\n    <slot />\n  </div>\n</div>\n",
    "<script>\n  import Dymoji from \"../dymoji/dymoji.svelte\";\n\n  export let avatar = null;\n  export let emoji = null;\n  export let username = null;\n  export let size = 102;\n  export let color = \"#000\";\n  export let className = \"\";\n  export let style = \"\";\n  export let radius = 0;\n</script>\n\n<style lang=\"scss\">.avatar {\n  background-size: cover;\n  background-position: center; }\n\n.letter {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  z-index: 102;\n  font-size: 51px;\n  color: rgba(0, 0, 0, 0.8);\n  text-shadow: 0px 1px 1px rgba(255, 255, 255, 0.5); }\n  .letter.emoji-letter {\n    white-space: pre;\n    color: black; }\n\n.letter.just-letter {\n  color: #fff !important;\n  text-shadow: 0px 2px 3px rgba(0, 0, 0, 0.3); }\n\n.dymoji-wrapper {\n  position: absolute !important;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  display: flex; }\n\n.n-ball {\n  position: relative;\n  display: inline-block; }\n  .n-ball.frame {\n    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.16);\n    border-radius: 32%;\n    overflow: hidden; }\n</style>\n\n<div\n  class=\"n-ball {className}\"\n  style=\"width:{size}px; height:{size}px; {radius ? `border-radius:${size * radius}px; overflow:hidden;` : ''}\n  {style}\">\n  {#if avatar}\n    <div\n      class=\" avatar\"\n      style=\"background-image:url({avatar}); width:{size}px; height:{size}px\" />\n  {:else if emoji}\n    <div\n      class=\" letter emoji-letter\"\n      style=\"font-size: {size * 0.5}px; width:{size}px; height:{size}px; {color ? `color:${color}` : ''}\n      \">\n      {emoji}\n    </div>\n  {:else if username}\n    <div class=\"dymoji-wrapper\">\n      <div\n        class=\"letter just-letter\"\n        style=\"font-size: {size * 0.5}px; {color ? `color:${color}` : ''}\">\n        {username.substr(0, 2).toUpperCase()}\n      </div>\n      <Dymoji {username} {size} radius={0.32} />\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import Dymoji from \"../dymoji/dymoji.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  import dayjs from \"dayjs\";\n  import NBall from \"./ball.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  // export let score = 0;\n  // export let last = null;\n\n  export let avatar = null;\n  export let emoji = null;\n  export let username = null;\n\n  export let label = null;\n  export let color = \"#333\";\n  export let note = null;\n  export let className = \"\";\n\n  export let id = \"\";\n</script>\n\n<style lang=\"scss\">:global(.item-ball .n-ball) {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  overflow: hidden; }\n</style>\n\n<div\n  {id}\n  class={`item-ball ${className}`}\n  on:click={() => {\n    dispatch('click', this);\n  }}>\n  <!-- -->\n  <div class=\"avatar-ball\">\n    <slot />\n    <NBall {username} {emoji} {avatar} {color} size={102} />\n  </div>\n\n  <div class=\"username text-inverse-2 text-sm truncate-1\">{label}</div>\n  {#if note}\n    <div class=\"last text-xs text-faded-3\">{note}</div>\n  {/if}\n</div>\n",
    "<script>\n  export let positivity = 0;\n  export let score = 0;\n\n  let changed = false;\n\n  let lastScore;\n  $: if (score !== lastScore) {\n    lastScore = score;\n    changed = true;\n    setTimeout(() => {\n      changed = false;\n    }, 200);\n  }\n</script>\n\n<style lang=\"scss\">.score.negative {\n  background-color: var(--color-red);\n  box-shadow: 0px 10px 10px -5px rgba(233, 65, 81, 0.4) !important; }\n\n.score.positive {\n  background-color: var(--color-green);\n  box-shadow: 0px 10px 10px -5px rgba(56, 168, 63, 0.4) !important; }\n\n.score {\n  transition: all 0.2s ease-in-out;\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  height: 26px;\n  min-width: 26px;\n  border-radius: 13px;\n  padding: 0 6px;\n  line-height: 26px;\n  text-align: center;\n  font-size: 13px;\n  background-color: var(--color-primary-bright);\n  box-shadow: 0px 10px 10px -5px rgba(49, 158, 215, 0.4);\n  font-weight: bold;\n  color: #fff;\n  z-index: 100; }\n  .score.negative {\n    background-color: var(--color-red); }\n  .score.changed {\n    transform: scale(1.2);\n    z-index: 1000; }\n  .score.popin.hidden {\n    opacity: 0; }\n</style>\n\n<div\n  class={`${changed ? 'changed' : ''} score animate popin ${positivity < 0 ? 'negative' : ''} ${positivity > 0 ? 'positive' : ''} ${score ? 'visible' : 'hidden'}`}>\n  {score}\n</div>\n",
    "<script>\n  import Modal from \"../../components/modal/modal.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NSortableList from \"../../components/sortable-list/sortable-list.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  // Utils\n  import arrayUtils from \"../../utils/array/array_utils\";\n\n  // Stores\n  import { Lang } from \"../../store/lang\";\n  import { BoardStore } from \"../../store/boards\";\n  import { Interact } from \"../../store/interact\";\n\n  import is from \"../../utils/is/is\";\n\n  function boardsSorted(evt) {\n    if (evt.detail instanceof Array) {\n      $BoardStore.boards = evt.detail;\n      BoardStore.save($BoardStore.boards);\n    }\n  }\n</script>\n\n<style>\n  .btn-group .btn {\n    width: 36px;\n  }\n  .emoji-only {\n    font-size: 2.4rem;\n  }\n</style>\n\n<Modal\n  title=\"Sort Tabs\"\n  type=\"fullscreen\"\n  allowClose={true}\n  on:close={Interact.toggleBoardSorter}>\n  <div slot=\"modal-header\">\n    <NToolbarGrid>\n      <button\n        slot=\"left\"\n        class=\"btn btn-icon btn-clear tap-icon\"\n        on:click={Interact.toggleBoardSorter}>\n        <NIcon name=\"close\" />\n      </button>\n      <div slot=\"main\">{Lang.t('board.sort-tabs', 'Sort Tabs')}</div>\n      <button class=\"btn btn-clear\" slot=\"right\">\n        {Lang.t('general.save')}\n      </button>\n    </NToolbarGrid>\n  </div>\n  <div class=\"n-list\">\n    <NSortableList\n      bind:items={$BoardStore.boards}\n      handle=\".menu-handle\"\n      key=\"label\"\n      on:update={boardsSorted}\n      let:item>\n      <NItem className=\"bottom-line\">\n        <div slot=\"right\" class=\"menu-handle\">\n          <NIcon name=\"sort\" />\n        </div>\n        {#if is.emoji(item.label)}\n          <div class=\"emoji-only text-center\">{item.label}</div>\n        {:else}\n          <div class=\"name-only text-center\">{item.label}</div>\n        {/if}\n      </NItem>\n    </NSortableList>\n  </div>\n</Modal>\n",
    "<script>\n  /**\n   * Brace yourself - this is a massive file\n   *\n   * Board / Home / MainView\n   * This monolith is basically the sum of all nomie.\n   * It should be broken down into more managable chunks over time.\n   * but for now, this is where all tracking and managing of your boards\n   * happens. God speed.\n   *\n   * Brnadon\n   */\n\n  // svelte\n  import { navigate } from \"svelte-routing\";\n  import { onMount, onDestroy } from \"svelte\";\n  import dayjs from \"dayjs\";\n  import { fade, fly } from \"svelte/transition\";\n\n  // Components\n  import NTrackerButton from \"./tracker-button.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NSearchBar from \"../../components/search-bar/search-bar.svelte\";\n  import NModal from \"../../components/modal/modal.svelte\";\n  import LogoType from \"../../components/logo/logo.svelte\";\n  import NTip from \"../../components/tip/tip.svelte\";\n  import CaptureLog from \"../../components/capture-log.svelte\";\n  import Spinner from \"../../components/spinner/spinner.svelte\";\n  import NBoardTabs from \"../../components/board-tabs/board-tabs.svelte\";\n\n  // Containers\n  import NLayout from \"../../containers/layout/layout.svelte\";\n  import BoardSortModal from \"../../containers/board/board-sort.svelte\";\n\n  // Modules/Libs/Utils\n  import Tracker from \"../../modules/tracker/tracker\";\n  import NomieLog from \"../../modules/nomie-log/nomie-log\";\n  import StarterPacks from \"../../modules/packs/starter-packs\";\n  import math from \"../../utils/math/math\";\n  import Logger from \"../../utils/log/log\";\n  import NomieUOM from \"../../utils/nomie-uom/nomie-uom\";\n  import tick from \"../../utils/tick/tick\";\n  import TrackerInputer from \"../../modules/tracker/tracker-inputer\";\n\n  import ScoreTracker from \"../../modules/scoring/score-tracker\";\n\n  //Stores\n  import { ActiveLogStore } from \"../../store/active-log\";\n  import { LedgerStore } from \"../../store/ledger\";\n  import { UserStore } from \"../../store/user\";\n  import { BoardStore } from \"../../store/boards\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { Interact } from \"../../store/interact\";\n  import { Lang } from \"../../store/lang\";\n  import { TrackerLibrary } from \"../../store/tracker-library\";\n  import { LastUsed } from \"../../store/last-used\";\n  // Consts\n  const console = new Logger(\"board.svelte\");\n\n  // Local Vars\n  let user = undefined; // will hold the user when the user is ready - basically a ready var\n  let today = {}; // holds today's activities\n  let searchInput; // binding to dom element\n  let foundTrackers = null; // for search results\n  let boardTrackers = []; // Actual array to display to user\n\n  // Browser Title\n  let appTitle = \"(Loading)\";\n  let _elSearchBar;\n\n  // Data Storage\n  let state = {\n    selectedTracker: null, // populated when user tabs tracker\n    showStartPacks: false, // shows the start library\n    savingTrackers: [], // to highlight trackers that are being saved\n    addedTrackers: [], // Visually showing what trackers are in the notes field\n    searching: false, // if the user is searching\n    searchTerm: null, // the search term the user is typing\n    activeTip: 0, // index of the current tip to show\n    hideTips: false // temp hide - it will stop showing after 12 launches.\n  };\n\n  /**\n   * isReady\n   * Holder of the state for each req store\n   * boards, trackers and ledger need to be loaded\n   * before we can render the page. If the user is\n   * using blockstack, this could take a little bit\n   **/\n  let isReady = {\n    boards: false,\n    trackers: false,\n    ledger: false,\n    done: false,\n    checking: false\n  };\n\n  // Check if it's ready\n  const checkIfReady = requester => {\n    if (isReady.done == false) {\n      if (isReady.boards && $TrackerStore.trackers && isReady.ledger) {\n        isReady.done = true;\n        setTimeout(() => {\n          setBoardTrackers();\n        }, 20);\n      }\n    }\n  };\n\n  /**\n   * Add some tips to help new users\n   * This will stop showing after 12 nomie launches\n   **/\n\n  let tips = [\n    \"Tap a button to track, press and hold for additional options\",\n    \"The History tab shows you everything you've done\",\n    \"Enable location tracking in the Settings for more data\",\n    \"Tap the Tab icon in the upper right to enable Tracker Tabs\",\n    \"You can manually track by writing a note. For example: Today is awesome! #mood(8) with @brandon\",\n    \"Use @username in notes to tag people\",\n    \"Include @username in a note to automatically tag that user.\",\n    \"Include +context to add additional context to your log\",\n    \"Tap the clock icon in the notes field to back date a log\",\n    \"Tap the Location pin in the notes field to set a specific location\",\n    \"Import data from places like IFTTT. Tap Settings, then Nomie API\"\n  ];\n\n  // Wait for the User to be ready\n  UserStore.onReady(() => {\n    // Set user to kick off top view conditional.\n    user = $UserStore; // Kick off\n    // Setup Hooks These will fire on before safe, and onLogSave\n    LedgerStore.hook(\"onBeforeSave\", log => {\n      state.savingTrackers = log.getMeta().trackers.map(t => t.id);\n    });\n\n    LedgerStore.hook(\"onLogSaved\", log => {\n      // Clear saving states\n      state.savingTrackers = [];\n      state.searching = false;\n      state.addedTrackers = [];\n    });\n  });\n\n  function editBoard() {\n    if (!$BoardStore.activeBoard) {\n      navigate(`/board/all`);\n    } else {\n      navigate(`/board/${$BoardStore.activeBoard.id}`);\n    }\n  }\n\n  function setBoardTrackers() {\n    /** If its the ALL Board we need to handle it different **/\n    if ($BoardStore.active == \"all\") {\n      appTitle = \"All\";\n      // Get the All Board\n      let allBoard = $BoardStore.boards.find(b => b.id == \"all\");\n      let boardSort = allBoard ? allBoard.trackers : [];\n      // // Loop over Tracker store - sorting by boardSort\n      boardTrackers = Object.keys($TrackerStore.trackers)\n        .sort((a, b) => {\n          if (boardSort.indexOf(a) > boardSort.indexOf(b)) {\n            return 1;\n          } else if (boardSort.indexOf(a) < boardSort.indexOf(b)) {\n            return -1;\n          } else {\n            return a > b ? 1 : -1;\n          }\n        })\n        .map(tag => {\n          return $TrackerStore.trackers[tag];\n        })\n        // Remove any nulls\n        .filter(tracker => tracker);\n    } else {\n      /**\n       * Else we have a real board and need to render it.\n       */\n\n      // Get Board Trackers from active Board\n      appTitle = ($BoardStore.activeBoard || {}).label || \"\";\n      // Get trackers from activeBoard\n      boardTrackers = (($BoardStore.activeBoard || {}).trackers || [])\n        .map(\n          tag => {\n            return $TrackerStore.trackers[tag];\n          }\n          // Remove any nulls\n        )\n        .filter(tracker => tracker);\n    }\n  }\n\n  // Component Methods\n  const methods = {\n    // When user starts searching\n    searchKeypress() {\n      // Find trackers matching query\n      foundTrackers = Object.keys($TrackerStore.trackers)\n        .map(tag => {\n          return $TrackerStore.trackers[tag];\n        })\n        .filter(tracker => {\n          // Search the tag and the label\n          let regex = new RegExp((state.searchTerm || \"\").trim(), \"gi\");\n          return `${tracker.tag}-${tracker.label}`.search(regex) > -1;\n        });\n    },\n    // Toggle if the user is searching or not.\n    async toggleSearch() {\n      if (state.searching) {\n        methods.stopSearch();\n      } else {\n        state.searching = true;\n        await tick(200);\n        if (_elSearchBar) {\n          _elSearchBar.focus();\n        }\n      }\n    },\n    stopSearch() {\n      state.searchTerm = null;\n      state.searching = false;\n      foundTrackers = null;\n    },\n    // When the user wants to add a new tracker\n    addButtonTap() {\n      let buttons = [];\n      // Add Library Button\n      buttons.push({\n        title: Lang.t(\"board.browse-starter-trackers\"),\n        click() {\n          TrackerLibrary.toggle();\n        }\n      });\n      // If NOT \"all\" Board\n      if ($BoardStore.active != \"all\") {\n        // Add \"Existing Tracker\" button\n        buttons.push({\n          title: Lang.t(\"board.add-existing-tracker\"),\n          click: async () => {\n            let trackers = await Interact.selectTrackers();\n\n            BoardStore.addTrackersToActiveBoard(trackers);\n            setTimeout(() => {\n              state = state;\n            }, 100);\n          }\n        });\n      }\n      // Add \"Create Tracker\" button\n      buttons.push({\n        title: Lang.t(\"board.create-custom-tracker\"),\n        click() {\n          // methods.trackerEditor();\n          navigate(\"/tracker/design\");\n        }\n      });\n\n      // Show Menu\n      Interact.popmenu({\n        buttons: buttons\n      });\n    },\n    /**\n     * Inject the \"All\" board automatically\n     * In past versions, managing this was a nightmare\n     * Now i just add it on dynamically\n     */\n    injectAllBoard(boards) {\n      // Get boards passed\n      boards = boards || [];\n      // Clone the board;\n\n      let allBoard = $BoardStore.boards.find(b => b.id == \"all\") || {\n        id: \"all\",\n        label: \"All\",\n        trackers: Object.keys($TrackerStore.trackers || {})\n      };\n      let b = boards.filter(b => b.id !== \"all\");\n\n      b.unshift(allBoard);\n      return b;\n    },\n\n    /**\n     * Control Tracker Editor\n     */\n    trackerEditor() {\n      Interact.editTracker().then(tracker => {\n        BoardStore.addTracker(tracker);\n      });\n    },\n\n    getLastUsed(tracker) {\n      if ($LastUsed.hasOwnProperty(tracker.tag)) {\n        let last = $LastUsed[tracker.tag];\n        if (last) {\n          return dayjs(last.log.end);\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Create a new board\n     * This will prompt the user to input a name\n     * then create the new board\n     */\n    async newBoard() {\n      let res = await Interact.prompt(\n        Lang.t(\"board.add-a-board\"),\n        Lang.t(\"board.add-a-board-description\"),\n        {\n          placeholder: Lang.t(\"board.board-input-placeholder\")\n        }\n      );\n      if (res) {\n        let label = res.trim();\n        if (label.toLowerCase() !== \"all\") {\n          BoardStore.addBoard(label).then(board => {\n            BoardStore.setActive(board.id);\n          });\n        } else {\n          Interact.alert(\"Error\", \"Sorry, All is a reserved named\");\n        }\n      }\n    },\n    // Settings Shortcut - enable boards - tap on logo\n    async enableBoards() {\n      $UserStore.meta.boardsEnabled = true;\n      await UserStore.saveMeta();\n      methods.newBoard();\n    },\n    // User Tapped a Tracker\n    async trackerTapped(tracker) {\n      // Set selected tracker to this one.\n      state.selectedTracker = tracker;\n      // Inserting new TrackerInputer\n      let inputer = new TrackerInputer(tracker, $TrackerStore);\n      let payload = await inputer.get();\n\n      /**\n       * Payload could be an array of, or single { tracker, value }\n       */\n      if (payload instanceof Array) {\n        let items = payload.filter(item => item);\n        items.forEach(item => {\n          // ActiveLogStore.addTag(item.tracker.tag, item.value);\n          let tracker = TrackerStore.getByTag(item.tracker.tag);\n          // Get any additional content to pull along with this tracker\n          let includeStr = tracker.getIncluded(item.value) || \"\";\n          includeStr = includeStr.length ? ` ${includeStr}` : \"\";\n          ActiveLogStore.addElement(\n            `#${tracker.tag}(${item.value})${includeStr}`\n          );\n        });\n      } else if (payload) {\n        let tracker = payload.tracker;\n        // Get any additional content to pull along with this tracker\n        let includeStr = tracker.getIncluded(payload.value) || \"\";\n        includeStr = includeStr.length ? ` ${includeStr}` : \"\";\n        ActiveLogStore.addElement(\n          `#${tracker.tag}(${payload.value})${includeStr}`\n        );\n      }\n      // One Tap Trackers\n      // TODO move the adding to the activeLogStore here.\n      if (tracker.one_tap) {\n        LedgerStore.saveLog($ActiveLogStore);\n      }\n    },\n    /**\n     * Get Tracker Value\n     * Used to get the current value of today for a given tracker\n     * This will total or avg their values depending on the tracker calcuate\n     */\n    getTrackerValue(tracker) {\n      // Default to null\n      let value = null;\n\n      // Does this tracker exist in today's map?\n      if (today.hasOwnProperty(tracker.tag)) {\n        // What type of Math should we do?\n        if (tracker.math === \"sum\") {\n          // Sum it up!\n          value = math.round(math.sum(today[tracker.tag].values));\n        } else {\n          // Round things!\n          value = math.round(math.average(today[tracker.tag].values));\n        }\n      }\n      return value ? NomieUOM.format(value, tracker.uom) : null;\n    },\n    getPositivity(tracker) {\n      let value = methods.getTrackerValue(tracker);\n      value = value || 0;\n      return ScoreTracker(value, tracker);\n    },\n    /**\n     * Get Hours Used\n     * Used for generating the time-balls on the trackers\n     * It maybe shouldn't be here, but it is for now\n     */\n    getHoursUsed(tracker) {\n      if (today.hasOwnProperty(tracker.tag)) {\n        return today[tracker.tag].hours;\n      } else {\n        return [];\n      }\n    },\n    // Show Tracker Options\n    showTrackerOptions(tracker) {\n      // Make it a real tracker in case it's not - doubling up shouldn't be a problem.\n      tracker = new Tracker(tracker);\n      // Define buttons\n      let buttons = [\n        {\n          title: Lang.t(\"tracker.stats\", \"Stats\"),\n          click() {\n            Interact.openStats(`#${tracker.tag}`);\n          }\n        },\n        {\n          title: Lang.t(\"tracker.streak\", \"Streak\"),\n          click() {\n            Interact.openStreak(`#${tracker.tag}`);\n          }\n        },\n        {\n          title: Lang.t(\"tracker.edit-tracker\", \"Edit Tracker\"),\n          click() {\n            Interact.editTracker(tracker);\n          }\n        }\n      ];\n      // Remove Tracker Button Prompts\n      const removeButton = {\n        title: `${Lang.t(\"general.remove\")}...`,\n        click() {\n          // If we're on All - warn the hell out of the user\n          if ($BoardStore.active === \"all\") {\n            Interact.confirm(\n              Lang.t(\"general.delete-from-nomie\", { thing: tracker.label }),\n              Lang.t(\"tracker.delete-description\")\n            ).then(res => {\n              if (res) {\n                // User said to delete it - so delete it.\n                TrackerStore.deleteTracker(tracker).then(done => {});\n              }\n            });\n          } else {\n            // We're on another board - allow them to just remove the tracker\n            Interact.confirm(\n              `Remove ${tracker.label} from this board?`,\n              \"You can always re-add it later\"\n            ).then(res => {\n              if (res) {\n                // Remove it from the active Board\n                BoardStore.removeTrackerFromBoard(tracker, $BoardStore.active);\n              }\n            });\n          }\n        }\n      };\n\n      // If a Last Used is present\n      let subtitle;\n      if ($LastUsed.hasOwnProperty(tracker.tag)) {\n        let last = $LastUsed[tracker.tag];\n        if (last.log) {\n          subtitle = `${Lang.t(\"board.last-used\", \"Last used\")} ${dayjs(\n            last.date\n          ).fromNow()}`;\n        }\n      }\n      // Add Remove button to array\n      buttons.push(removeButton);\n\n      // Fire Pop menu\n      Interact.popmenu({\n        title: `${tracker.emoji || \"⚪️\"} ${tracker.label || tracker.tag}`,\n        description: subtitle,\n        buttons: buttons\n      });\n    } // end showTrackerOptions\n  };\n\n  let boardUnsub;\n  let ledgerUnsub;\n  let activeLogUnsub;\n  let trackerUnsub;\n  let lastTrackers;\n\n  onMount(() => {\n    trackerUnsub = TrackerStore.subscribe(trackerStore => {\n      setTimeout(() => {\n        boardTrackers = boardTrackers;\n        setBoardTrackers();\n      }, 120);\n    });\n\n    // Wait for changes to happen to the boardstore\n    boardUnsub = BoardStore.subscribe(boardPayload => {\n      isReady.boards = true;\n      checkIfReady(\"boardPayload\");\n      // If the board is ready, and it changes\n      // Refire the setBoard Trackers for the new changes\n      if (isReady.done) {\n        setBoardTrackers();\n      }\n      /**\n       * Board Check\n       * If this board doesn't exist (user clears localstorage, switching data store, imports etc)\n       * then we should set it to the ALL board\n       **/\n      if (\n        boardPayload.boards.map(b => b.id).indexOf(boardPayload.active) == -1 &&\n        boardPayload.active !== \"all\"\n      ) {\n        setTimeout(() => {\n          BoardStore.setActive(\"all\");\n        }, 100);\n      }\n    });\n\n    // Ledger Store Change\n    ledgerUnsub = LedgerStore.subscribe(ledgerPayload => {\n      // If it's not saving\n      if (!ledgerPayload.saving) {\n        isReady.ledger = true; // say it's true\n        checkIfReady(\"ledgerPayload\"); // check for others\n        setTimeout(() => {\n          today = ledgerPayload.today;\n          foundTrackers = foundTrackers; // force reaction\n          boardTrackers = boardTrackers; // force reaction\n        }, 100);\n      }\n    });\n\n    // Active Log Change\n    activeLogUnsub = ActiveLogStore.subscribe(log => {\n      /**\n       * Active Log Change\n       * When the log changes, extract the trackers so we can\n       * make them pulse\n       */\n      state.addedTrackers = new NomieLog(log).getMeta().trackers.map(t => t.id);\n    });\n    LedgerStore.getToday();\n  }); // end onMount\n\n  onDestroy(() => {\n    boardUnsub();\n    ledgerUnsub();\n    activeLogUnsub();\n    trackerUnsub();\n  });\n</script>\n\n<style type=\"text/scss\" name=\"scss\">@media (max-width: 599.98px) {\n  .container {\n    padding-left: 0 !important;\n    padding-right: 0 !important; } }\n\n@media (min-width: 980px) {\n  .container.board-container {\n    max-width: 90% !important; } }\n\n@media (min-width: 600px) {\n  :global(.n-board .tracker-button-wrapper) {\n    margin: 8pt; } }\n\n.n-board {\n  padding: 0px 0px;\n  background-color: var(--color-bg);\n  min-height: 50vh;\n  display: flex;\n  flex-direction: column; }\n  @media (min-width: 600px) {\n    .n-board {\n      padding-top: 20px; } }\n  .n-board .new-user {\n    font-size: 0.7rem;\n    max-width: 280px;\n    border-radius: 30px;\n    background-color: transparent;\n    border: var(--modal-border);\n    color: var(--color-inverse-2);\n    margin: 10px auto;\n    padding: 6px 20px;\n    line-height: 115%;\n    flex-grow: 0; }\n    .n-board .new-user .main {\n      text-align: center; }\n    .n-board .new-user .btn:active {\n      color: var(--color-inverse); }\n\n.no-trackers {\n  min-height: 300px;\n  height: 50vh;\n  display: flex;\n  color: var(--color-solid-3);\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n\n.board-edit-button {\n  display: flex;\n  align-items: center;\n  padding: 0px;\n  justify-content: center;\n  min-width: 40px;\n  min-height: 40px;\n  width: 40px;\n  height: 40px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  border-radius: 20px;\n  font-size: 22px;\n  background-color: var(--color-faded-1);\n  color: var(--color-inverse) !important; }\n\n.board-actions {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 16px;\n  margin-bottom: 32px;\n  padding: 0 10px; }\n</style>\n\n<!-- Start App Layout -->\n<NLayout pageTitle={appTitle}>\n  <header slot=\"header\">\n    {#if $BoardStore.boards.length || $UserStore.meta.boardsEnabled}\n      <div class=\"container p-0 n-row h-100\">\n        {#if $TrackerStore.timers.length}\n          <button\n            xtransition:fade\n            class=\"btn tap-icon pl-3 pr-1\"\n            on:click={TrackerStore.toggleTimers}>\n            <NIcon name=\"time\" size={22} className=\"fill-red-pulse\" />\n          </button>\n        {/if}\n        <!-- IF MORE THAN 13 TRACKERS - SHOW SEARCH ICON-->\n        {#if Object.keys($TrackerStore.trackers).length > 13}\n          <button\n            class=\"btn tap-icon pr-2 {$TrackerStore.timers.length ? 'pl-1' : ''}\"\n            on:click={methods.toggleSearch}>\n            <NIcon\n              name=\"search\"\n              size={22}\n              className={state.searching ? 'fill-primary-bright' : 'fill-faded-2'} />\n          </button>\n        {/if}\n\n        <NBoardTabs\n          boards={methods.injectAllBoard($BoardStore.boards || [])}\n          active={$BoardStore.active}\n          on:create={methods.newBoard}\n          on:tabTap={event => {\n            methods.stopSearch();\n            BoardStore.setActive(event.detail.id, event.detail);\n          }}>\n          {#if $BoardStore.boards.length > 1}\n            <button\n              class=\"btn btn-clear tap-icon px-2 pl-1\"\n              on:click={() => {\n                Interact.toggleBoardSorter();\n              }}>\n              <NIcon name=\"sort\" size=\"22\" className=\"fill-primary-bright\" />\n            </button>\n          {/if}\n        </NBoardTabs>\n      </div>\n    {:else}\n      <NToolbarGrid>\n        <div slot=\"left\">\n          {#if $TrackerStore.timers.length}\n            <button\n              xtransition:fade\n              class=\"btn tap-icon pl-2\"\n              on:click={TrackerStore.toggleTimers}>\n              <NIcon name=\"time\" size={20} className=\"fill-red-pulse\" />\n            </button>\n          {/if}\n        </div>\n        <div slot=\"main\" class=\"align-items-center\">\n          <LogoType size={20} on:click={methods.enableBoards} />\n        </div>\n        <button\n          slot=\"right\"\n          class=\"btn btn-clear btn-icon tap-icon\"\n          on:click={methods.enableBoards}>\n          <NIcon name=\"newTab\" size=\"20\" />\n        </button>\n      </NToolbarGrid>\n    {/if}\n    {#if state.searching}\n      <div>\n        <NSearchBar\n          bind:this={_elSearchBar}\n          className=\"mt-2\"\n          autocomplete\n          on:clear={() => {\n            state.searchTerm = null;\n          }}\n          on:change={value => {\n            state.searchTerm = value.detail;\n            methods.searchKeypress();\n          }}\n          placeholder=\"{Lang.t('general.search-trackers', 'Search Trackers')}...\">\n          <button\n            slot=\"right-inside\"\n            class=\"btn btn-clear\"\n            on:click={methods.toggleSearch}>\n            <NIcon name=\"close\" className=\"fill-faded-2\" />\n          </button>\n        </NSearchBar>\n      </div>\n    {/if}\n  </header>\n  <!-- end header-->\n  <div slot=\"content\" class=\"container board-container\">\n    {#if user}\n      {#if !isReady.done}\n        <div class=\"empty-notice\">\n          <Spinner />\n        </div>\n      {:else}\n        <main class=\"n-board h-100\">\n          {#if $TrackerStore.showTimers && $TrackerStore.timers.length}\n            <div\n              class=\"trackers n-grid framed mt-2\"\n              style=\"min-height:auto\"\n              transition:fly={{ y: -20, duration: 200 }}>\n              {#each TrackerStore.state.runningTimers() as tracker}\n                <NTrackerButton\n                  {tracker}\n                  value={methods.getTrackerValue(tracker)}\n                  hoursUsed={methods.getHoursUsed(tracker)}\n                  positivity={methods.getPositivity(tracker)}\n                  on:click={() => {\n                    methods.trackerTapped(tracker);\n                  }}\n                  disabled={state.savingTrackers.indexOf(tracker.tag) > -1}\n                  className={`${state.addedTrackers.indexOf(tracker.tag) > -1 ? 'added pulse' : ''} ${state.savingTrackers.indexOf(tracker.tag) > -1 ? 'wiggle saving' : ''}`}\n                  on:longpress={() => {\n                    methods.showTrackerOptions(tracker);\n                  }} />\n              {/each}\n              <button class=\"btn-close\" on:click={TrackerStore.hideTimers}>\n                <NIcon name=\"chevronUp\" className=\"fill-inverse\" />\n              </button>\n            </div>\n          {/if}\n          <!-- Loop over trackers -->\n          <div class=\"trackers n-grid\">\n\n            {#if (foundTrackers || boardTrackers || []).length === 0}\n              {#if foundTrackers != null}\n                <div class=\"no-trackers\">\n                  {Lang.t('board.no-search-results', 'No trackers found')}\n                </div>\n              {/if}\n            {/if}\n            <!-- lastUsed={methods.getLastUsed(tracker)} -->\n            {#each foundTrackers || boardTrackers as tracker}\n              <NTrackerButton\n                {tracker}\n                value={methods.getTrackerValue(tracker)}\n                hoursUsed={methods.getHoursUsed(tracker)}\n                positivity={methods.getPositivity(tracker)}\n                on:click={() => {\n                  methods.trackerTapped(tracker);\n                }}\n                disabled={state.savingTrackers.indexOf(tracker.tag) > -1}\n                className={`${state.addedTrackers.indexOf(tracker.tag) > -1 ? 'added pulse' : ''} ${state.savingTrackers.indexOf(tracker.tag) > -1 ? 'wiggle saving' : ''}`}\n                on:longpress={() => {\n                  methods.showTrackerOptions(tracker);\n                }} />\n            {/each}\n            {#if !state.searching && $BoardStore.active !== '_timers'}\n              <NTrackerButton\n                on:click={methods.addButtonTap}\n                tracker={{ label: 'Add', emoji: '➕' }} />\n            {/if}\n          </div>\n\n          <!-- Include User Tips - shit should be a component -->\n          <NTip {tips} />\n\n          <div class=\"board-actions\">\n            <button\n              on:click={editBoard}\n              class=\"btn btn btn-round board-edit-button clickable\">\n              <NIcon name=\"more\" size=\"32\" className=\"fill-white\" />\n            </button>\n          </div>\n\n        </main>\n      {/if}\n    {/if}\n  </div>\n  <!-- End -->\n  <div slot=\"footer\">\n    <div id=\"note-capture\">\n      <CaptureLog />\n    </div>\n  </div>\n  <!-- end content-->\n</NLayout>\n\n{#if $Interact.boardSorter.show}\n  <BoardSortModal />\n{/if}\n\n{#if state.showStartPacks}\n  <NModal title=\"Starter Packs\">\n    <div slot=\"header\">\n      <NBoardTabs boards={StarterPacks.methods.asArray()} />\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  // TODO: Move this to components/tracker-button\n\n  // svelte\n  import { createEventDispatcher } from \"svelte\";\n\n  import TrackerBall from \"../../components/tracker-ball/tracker-ball.svelte\";\n\n  // modules\n  import Tracker from \"../../modules/tracker/tracker\";\n  import TimeBalls from \"../../components/time-balls/time-balls.svelte\";\n\n  // Components\n  import Counter from \"../../components/counter/counter.svelte\";\n\n  // Props\n  export let tracker = new Tracker();\n  export let value = null;\n  // export let refreshing = false;\n  export let id = undefined;\n  export let className = undefined;\n  export let disabled = undefined;\n  export let hoursUsed = [];\n  // export let hideMore = false;\n  // export let lastUsed = null; // or dayjs object\n  export let positivity = 0;\n\n  // Define Dispatch\n  const dispatch = createEventDispatcher();\n\n  let data = {\n    pressing: false\n  };\n\n  let timeout = null;\n  // Functions\n  const methods = {\n    // Clicked\n    click() {\n      dispatch(\"click\", {});\n    },\n    moreClicked(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n\n      methods.longPress();\n    },\n    rightclick(evt) {\n      evt.preventDefault();\n      return false;\n    },\n    longPress() {\n      dispatch(\"longpress\", {});\n    },\n    // On Mouse Release / Touch Stop\n    mouseup() {\n      data.pressing = false;\n    },\n    mousedown() {\n      data.pressing = true;\n    }\n  };\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.tracker-ball svg {\n  display: none; }\n\n.tracker-ball .countdown {\n  z-index: 202;\n  font-size: 1rem; }\n\n.tracker-button-wrapper {\n  border-radius: 40px; }\n</style>\n\n<div\n  on:click={methods.click}\n  on:longtap={methods.longPress}\n  on:touchstart={methods.mousedown}\n  on:mousedown={methods.mousedown}\n  on:touchend={methods.mouseup}\n  on:contextmenu={methods.rightclick}\n  on:mouseout={methods.mouseup}\n  on:mouseup={methods.mouseup}\n  class=\"tracker-button-wrapper tracker-{tracker.tag}\n  {data.pressing ? 'pressing' : ''}\n  {className}\n  {disabled ? 'disabled' : ''}\">\n  <TrackerBall {id} {tracker} score={value} {positivity}>\n    {#if tracker.started}\n      <div class=\"center countdown\">\n        <Counter started={tracker.started} />\n      </div>\n    {/if}\n    {#if hoursUsed.length}\n      <div class=\"balls\">\n        <TimeBalls hours={hoursUsed} />\n      </div>\n    {/if}\n    {#if tracker.one_tap}\n      <div class=\"one-tap\" />\n    {/if}\n  </TrackerBall>\n\n</div>\n<!-- last.log.end -->\n",
    "<script>\n  // Vendors\n  import { onMount } from \"svelte\";\n  import { Link } from \"svelte-routing\";\n\n  // Components\n  import Icon from \"../../components/icon/icon.svelte\";\n\n  import { Lang } from \"../../store/lang\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  const state = {\n    mounted: false\n  };\n\n  onMount(() => {\n    state.mounted = true;\n  });\n</script>\n\n<style lang=\"scss\">#app-tabs {\n  height: calc(62px + env(safe-area-inset-bottom));\n  padding-bottom: calc(env(safe-area-inset-bottom));\n  background-color: var(--footer-background);\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 1200;\n  flex-shrink: 0; }\n  #app-tabs .n-row {\n    z-index: 10;\n    max-height: 60px;\n    min-height: 60px;\n    height: 60px;\n    flex-shrink: 0; }\n  #app-tabs .notification {\n    position: absolute;\n    top: 0;\n    right: calc(50% - 15px);\n    width: 6px;\n    height: 6px;\n    background-color: var(--color-red);\n    border-radius: 3px; }\n\n:global(#app-tabs a svg) {\n  height: 24px !important;\n  width: 24px !important;\n  margin-bottom: 3px; }\n\n:global(#app-tabs a[aria-current=\"page\"] svg) {\n  fill: var(--color-primary-bright) !important;\n  transform: scale(1.1);\n  transition: all 0.2s ease-in-out; }\n\n:global(#app-tabs a[aria-current=\"page\"] svg .fill) {\n  fill: var(--color-primary-bright) !important; }\n\n:global(#app-tabs a) {\n  color: var(--color-inverse-2);\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  padding: 4px 10px 0;\n  font-size: 0.7rem;\n  text-decoration: none;\n  transition: all 0.2s ease-in-out;\n  min-width: 30px;\n  width: 100%; }\n  :global(#app-tabs a) i {\n    font-size: 1.2rem;\n    transition: all 0.2s ease-in-out; }\n  :global(#app-tabs a) label {\n    margin-bottom: 0; }\n  :global(#app-tabs a):after {\n    content: \"\";\n    position: absolute;\n    bottom: -6px;\n    left: 40%;\n    right: 40%;\n    height: 0px;\n    border-radius: 2px;\n    background-color: rgba(49, 158, 215, 0); }\n  :global(#app-tabs a)[aria-current=\"page\"] {\n    color: var(--color-primary-bright); }\n    :global(#app-tabs a)[aria-current=\"page\"] svg {\n      fill: var(--color-primary-bright);\n      transform: scale(1.1);\n      transition: all 0.2s ease-in-out; }\n    :global(#app-tabs a)[aria-current=\"page\"]:after {\n      content: \"\";\n      position: absolute;\n      bottom: -6px;\n      left: 20%;\n      right: 20%;\n      height: 4px;\n      border-radius: 2px;\n      background-color: var(--color-primary-bright); }\n</style>\n\n{#if state.mounted}\n  <nav id=\"app-tabs\" class=\"\">\n    <div class=\"n-row mw-500px mx-auto\">\n\n      <Link to=\"/history\">\n        <Icon name=\"calendar\" />\n        <label>{Lang.t('tabs.history')}</label>\n      </Link>\n\n      <Link to=\"/\">\n        {#if $TrackerStore.timers.length}\n          <div class=\"notification\" />\n        {/if}\n        <Icon name=\"tracker\" />\n        <label>{Lang.t('general.trackers', 'Trackers')}</label>\n      </Link>\n\n      <Link to=\"/people\">\n        <Icon name=\"people\" />\n        <label>{Lang.t('tabs.people')}</label>\n      </Link>\n\n      <Link to=\"/settings\">\n        <Icon name=\"settings\" />\n        <label>{Lang.t('tabs.settings')}</label>\n      </Link>\n\n    </div>\n  </nav>\n{/if}\n",
    "<script>\n  import Modal from \"../../components/modal/modal.svelte\";\n\n  import TrackerButton from \"../../containers/board/tracker-button.svelte\";\n  import NText from \"../../components/text/text.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  // Stores\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { Lang } from \"../../store/lang\";\n  import { TrackerLibrary } from \"../../store/tracker-library\";\n  import { Interact } from \"../../store/interact\";\n  import { UserStore } from \"../../store/user\";\n  import tick from \"../../utils/tick/tick\";\n\n  let installed = {}; // hol der for anything installed during the opening\n\n  let trackers = [];\n  let ready = false;\n\n  UserStore.onReady(() => {\n    ready = true;\n  });\n\n  $: if ($TrackerLibrary && !trackers.length && ready) {\n    trackers = $TrackerLibrary.trackers.map(tracker => {\n      if (tracker.uom == \"oz\" && $UserStore.meta.is24Hour === true) {\n        tracker.uom = \"milliliter\";\n        tracker.default = \"350\";\n      }\n      return tracker;\n    });\n  }\n\n  function isInstalled(tracker) {\n    return (\n      $TrackerStore.trackers.hasOwnProperty(tracker.tag) ||\n      installed.hasOwnProperty(tracker.tag)\n    );\n  }\n\n  async function toggleTrackerInstalled(tracker) {\n    if (!isInstalled(tracker)) {\n      TrackerStore.saveTracker(tracker);\n      installed[tracker.tag] = true;\n      Interact.toast(`${tracker.label} added`);\n    } else {\n      let confirmed = await Interact.confirm(\n        `Remove ${tracker.label}?`,\n        `Data will be untouched`\n      );\n      if (confirmed) {\n        await TrackerStore.deleteTracker(tracker);\n        delete installed[tracker.tag];\n        installed = installed;\n        Interact.toast(`${tracker.label} removed`);\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.grid {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 16px 0;\n  flex-grow: 1; }\n  .grid .tracker-option {\n    margin: 4px; }\n\n.intro-message {\n  text-align: center;\n  margin: 0 16px; }\n\n.tracker-option {\n  position: relative; }\n  .tracker-option .badge {\n    position: absolute;\n    right: 8px;\n    top: 10px;\n    z-index: 400;\n    width: 22px;\n    padding: 0;\n    text-align: center; }\n</style>\n\n<Modal\n  type={$TrackerLibrary.first ? 'fullscreen' : 'fullscreen'}\n  show={true}\n  className=\"library-modal\"\n  title={Lang.t('tracker.things-to-track')}>\n\n  {#if $TrackerLibrary.first}\n    <div class=\"px-2 pt-3 intro-message\">\n      <NText size=\"sm\" tag=\"div\">{Lang.t('tracker.pick-at-least-one')}</NText>\n    </div>\n  {/if}\n\n  <div class=\"n-grid\">\n    {#each trackers as tracker, index (tracker.tag)}\n      <div class=\"tracker-option\">\n        {#if $TrackerStore.trackers.hasOwnProperty(tracker.tag) || installed.hasOwnProperty(tracker.tag)}\n          <div class=\"badge badge-green\">\n            <NIcon name=\"checkmark\" className=\"fill-white\" size=\"16\" />\n          </div>\n        {/if}\n        <TrackerButton\n          hideMore={true}\n          {tracker}\n          on:click={() => {\n            toggleTrackerInstalled(tracker);\n          }} />\n      </div>\n    {/each}\n  </div>\n  <button\n    slot=\"footer\"\n    disabled={Object.keys(installed).length === 0 && $TrackerLibrary.first}\n    class=\"btn btn-primary filler btn-lg\"\n    on:click={TrackerLibrary.toggle}>\n    {Lang.t('general.done')}\n  </button>\n</Modal>\n",
    "<script>\n  // Utils\n  import Logger from \"../../utils/log/log\";\n  import time from \"../../utils/time/time\";\n\n  //Svelte\n  import { createEventDispatcher, onMount } from \"svelte\";\n\n  // Vendor\n  import dayjs from \"dayjs\";\n\n  // Modules\n  import NomieLog from \"../../modules/nomie-log/nomie-log\";\n\n  // Components\n  import NModal from \"../../components/modal/modal.svelte\";\n  import NPositivitySelector from \"../../components/positivity-selector/positivity-selector.svelte\";\n  import AutoComplete from \"../../components/auto-complete/auto-complete.svelte\";\n  import HScroller from \"../../components/h-scroller/h-scroller.svelte\";\n  import NMap from \"../../containers/map/map.svelte\";\n  import NCell from \"../../components/cell/cell.svelte\";\n  import NInput from \"../../components/input/input.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  // Props\n  export let log = undefined;\n\n  let textarea;\n  // consts\n  const console = new Logger(\"log-editor.svelte\");\n  const dispatch = createEventDispatcher();\n\n  // Setup state\n  let state = {\n    view: \"note\",\n    dateTimeValue: null,\n    saving: false\n  };\n\n  // Watch for Log\n  // $: if (log) {\n  //   state.log = new NomieLog(log);\n  // }\n\n  // Set up Methods\n  const methods = {\n    init() {\n      if (log) {\n        state.log = new NomieLog(log);\n        state.dateTimeValue = dayjs(new Date(log.end)).format(\n          \"YYYY-MM-DDTHH:mm\"\n        );\n      }\n    },\n    setView(view) {\n      state.view = view;\n    },\n    getLocations() {\n      let locations = [];\n      if (state.log.lat) {\n        locations.push({\n          lat: state.log.lat,\n          lng: state.log.lng,\n          name: state.log.location\n        });\n      }\n      return locations;\n    },\n    save() {\n      state.saving = true;\n      let updatedDate = time.datetimeLocal(state.dateTimeValue);\n      state.log.start = updatedDate.getTime();\n      state.log.end = updatedDate.getTime();\n      dispatch(\"save\", state.log);\n      // dispatch(\"close\");\n    }\n  };\n\n  onMount(() => {\n    methods.init();\n  });\n</script>\n\n<style lang=\"scss\">:global(.log-editor) {\n  z-index: 1301 !important; }\n\n:global(.log-editor .view-port .n-map-container) {\n  height: 300px; }\n\n:global(.log-editor .n-modal) {\n  max-width: 300px;\n  width: 300px; }\n\n.view-port {\n  min-height: 200px; }\n  .view-port textarea {\n    font-size: 1rem;\n    height: 275px; }\n  .view-port .center-content {\n    display: flex;\n    width: 100%;\n    flex-grow: 1;\n    flex-shrink: 1;\n    height: 100%;\n    align-items: center;\n    padding: 16px;\n    height: 200px; }\n  .view-port .date-time input {\n    border: none;\n    border-bottom: solid 2px var(--color-primary);\n    background-color: transparent;\n    border-radius: 0;\n    padding: 7px 0;\n    color: var(--color-inverse); }\n</style>\n\n{#if state.log}\n  <NModal title=\"Log Options\" className=\"log-editor\">\n    <div class=\"btn-group w-100 m-2\" slot=\"header\">\n      <button\n        class=\"btn -text {state.view === 'note' ? 'active' : ''}\"\n        on:click={() => {\n          methods.setView('note');\n        }}>\n        Note\n      </button>\n      <button\n        class=\"btn -text {state.view === 'score' ? 'active' : ''}\"\n        on:click={() => {\n          methods.setView('score');\n        }}>\n        Score\n      </button>\n      <button\n        class=\"btn -location {state.view === 'where' ? 'active' : ''}\"\n        on:click={() => {\n          methods.setView('where');\n        }}>\n        Where\n      </button>\n      <button\n        class=\"btn {state.view === 'when' ? 'active' : ''}\"\n        on:click={() => {\n          methods.setView('when');\n        }}>\n        When\n      </button>\n    </div>\n\n    <div class=\"view-port\">\n      {#if state.view == 'note'}\n        <div class=\"p-2\">\n          <textarea\n            class=\"form-control\"\n            bind:this={textarea}\n            bind:value={state.log.note} />\n          <AutoComplete\n            scroller\n            input={state.log.note}\n            on:select={evt => {\n              state.log.note = evt.detail.note;\n              textarea.focus();\n              textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n            }} />\n        </div>\n      {:else if state.view == 'where'}\n        <NMap\n          locations={methods.getLocations()}\n          picker={true}\n          on:change={event => {\n            state.log.lat = event.detail.lat;\n            state.log.lng = event.detail.lng;\n            state.log.location = event.detail.location;\n          }} />\n      {:else if state.view == 'score'}\n        <div class=\"score center-content\">\n          <NPositivitySelector\n            size=\"xl\"\n            score={state.log.score}\n            on:change={evt => {\n              state.log.score = evt.detail;\n            }} />\n        </div>\n      {:else if state.view == 'when'}\n        <div class=\"date-time center-content\">\n          <input\n            name=\"value\"\n            title=\"input value\"\n            bind:value={state.dateTimeValue}\n            type=\"datetime-local\"\n            class=\"form-control mt-2\" />\n        </div>\n      {/if}\n    </div>\n\n    <div class=\"buttons n-row\" slot=\"footer\">\n      {#if !state.saving}\n        <button\n          class=\"btn btn-clear w-50\"\n          on:click={() => {\n            dispatch('close');\n          }}>\n          Cancel\n        </button>\n        <button class=\"btn btn-primary w-50\" on:click={methods.save}>\n          Save\n        </button>\n      {:else}\n        <button class=\"btn btn-primary w-100\" disabled>Saving...</button>\n      {/if}\n    </div>\n\n  </NModal>\n{/if}\n",
    "<script>\n  //svelte\n  import { onMount } from \"svelte\";\n  import { createEventDispatcher } from \"svelte\";\n\n  // components\n  import Item from \"../../components/list-item/list-item.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  // modules\n  import locate from \"../../modules/locate/locate\";\n  import distance from \"../../modules/locate/distance\";\n  import Location from \"../../modules/locate/Location\";\n  // stores\n  import { Locations } from \"../../store/locations\";\n  import { Interact } from \"../../store/interact\";\n  import { Lang } from \"../../store/lang\";\n\n  import tick from \"../../utils/tick/tick\";\n\n  // props\n  export let locations = [];\n\n  export let small = undefined;\n  export let picker = undefined;\n  export let height = undefined;\n  export let className = \"\";\n  export let style = \"\";\n\n  // consts\n  const dispatch = createEventDispatcher();\n  const id = `map-${Math.random()\n    .toString()\n    .replace(\".\", \"\")}`;\n\n  // Setup GeoCode SErvice\n  const geocodeService = L.esri.Geocoding.geocodeService();\n\n  // Leaflet Map Holder\n  let MAP = undefined;\n  let _el;\n\n  // Local State\n  let data = {\n    locationName: null,\n    activeLocation: locations[locations.length - 1] || null,\n    locating: false,\n    lat: null,\n    lng: null,\n    showLocations: false,\n    height: `100px`\n  };\n\n  $: if (locations) {\n    setTimeout(async () => {\n      await methods.init();\n      methods.renderMap();\n    }, 12);\n  }\n\n  $: if (picker && MAP && locations.length == 0) {\n    locate().then(location => {\n      locations.push({\n        lat: location.latitude,\n        lng: location.longitude\n      });\n      MAP.setView(L.latLng(location.latitude, location.longitude), 12);\n    });\n  }\n\n  // methods\n  let methods = {\n    init() {\n      if (_el) {\n        data.height = _el.parentElement.clientHeight;\n      }\n\n      /** Initialize map **/\n      return new Promise((resolve, reject) => {\n        if (!MAP) {\n          MAP = new L.Map(id).fitWorld();\n        }\n        MAP.eachLayer(function(layer) {\n          MAP.removeLayer(layer);\n        });\n\n        if (picker) {\n          MAP.on(\"moveend\", () => {\n            let center = MAP.getCenter();\n            let lat = center.lat;\n            let lng = center.lng;\n            data.lat = lat;\n            data.lng = lng;\n            // Stop this from being called multiple times.\n            if (!data.locating) {\n              data.locating = true;\n              methods.getLocation(lat, lng).then(loc => {\n                data.locationName = loc.Match_addr;\n                data.locating = false;\n              });\n            }\n            dispatch(\"change\", {\n              ...MAP.getCenter(),\n              ...{ location: data.locationName }\n            });\n          });\n        }\n\n        resolve(MAP);\n      });\n    },\n    deleteLocation(location) {\n      Interact.confirm(`${Lang.t(\"general.delete\")} ${location.name}?`).then(\n        res => {\n          if (res) {\n            Locations.deleteByID(location.id);\n          }\n        }\n      );\n    },\n    editName(location) {\n      Interact.prompt(\"Location Name\", null, { value: location.name }).then(\n        res => {\n          location.name = res;\n          Locations.save(location);\n        }\n      );\n    },\n    setLocation(location) {\n      data.locationName = location.name;\n      data.lat = location.lat;\n      data.lng = location.lng;\n      locations = [location];\n      data.showLocations = false;\n      MAP.setView(L.latLng(location.lat, location.lng), 12);\n    },\n    /**\n     * Save the current Location\n     */\n    saveLocation() {\n      Locations.save(\n        new Location({\n          name: data.locationName,\n          lat: data.lat,\n          lng: data.lng\n        })\n      ).then(loc => {\n        Interact.toast(Lang.t(\"general.saved\"));\n      });\n      // Locations.save({\n      //   name: data.locationName,\n      //   lat:\n      // })\n    },\n\n    renderMap() {\n      let mapTheme = `https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png`;\n      if (document.body.classList.contains(\"theme-dark\")) {\n        mapTheme = `https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png`;\n      }\n      // Add Attribution\n      L.tileLayer(mapTheme, {\n        attribution:\n          '&copy; <a href=\"https://www.openstreetmap.org/\">OSM</a> <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n        maxZoom: 18\n      }).addTo(MAP);\n\n      var myIcon = window.L.icon({\n        iconUrl: \"/images/map/map-marker.svg\",\n        iconRetinaUrl: \"/images/map/map-marker.svg\",\n        iconSize: [32, 32],\n        iconAnchor: [9, 21],\n        popupAnchor: [0, -14]\n      });\n\n      let latLngArray = locations.map(loc => {\n        return [loc.lat, loc.lng];\n      });\n\n      // Quick Add Marker Function\n      let addMarker = (latLng, name, click) => {\n        let mkr = new L.marker(latLng, {\n          icon: myIcon\n        });\n        // If location name is present (TODO) show it in a popup\n        if (name) {\n          mkr.bindPopup(name);\n        }\n        mkr.on(\"click\", click);\n        mkr.addTo(MAP);\n      };\n\n      /**\n       * PIN RENDERING\n       * If maxDistance between them is greater than 0.1 km\n       */\n      let maxDistance = distance.furthest(latLngArray);\n      if (maxDistance > 0.4) {\n        // Loop over locaitons provided in props\n        locations.forEach(loc => {\n          addMarker([loc.lat, loc.lng], loc.name, () => {\n            // On Marker Click\n            data.activeLocation = loc;\n            // If a log exists - show the Share Log popup\n            if (loc.log) {\n              Interact.shareLog(loc.log);\n            }\n          });\n        });\n\n        let connectTheDots = data => {\n          // TODO: Look at making this curved dotted lines - and not just straight ones\n          var c = [];\n          data.forEach(location => {\n            c.push([location.lat, location.lng]);\n          });\n          return c;\n        };\n        //let pathLine =\n        window.L.polyline(connectTheDots(locations), {\n          color: \"rgba(2.7%, 52.5%, 100%, 0.378)\"\n        }).addTo(MAP);\n      } else {\n        // Max Distance is not enough to justify rendering a bunch of pins\n        if (locations.length) {\n          addMarker(\n            [locations[0].lat, locations[0].lng],\n            locations[0].name,\n            () => {\n              data.activeLocation = locations[0];\n              if (data.activeLocation.log) {\n                Interact.shareLog(data.activeLocation.log);\n              }\n            }\n          );\n        }\n      }\n\n      // Make the map fit the bounds of all locations provided\n      if (latLngArray.length) {\n        MAP.fitBounds(latLngArray);\n      }\n\n      MAP.invalidateSize();\n    },\n    getLocation(lat, lng) {\n      return new Promise((resolve, reject) => {\n        geocodeService\n          .reverse()\n          .latlng([lat, lng])\n          .run((error, result) => {\n            resolve((result || {}).address || \"Unknown\");\n          });\n      });\n    }\n  };\n\n  // Reactive Location Lookup\n  // $: getLocation = () => {\n  //   return new Promise(resolve => {\n  //     // If activeLocation is not null\n  //     if (data.activeLocation) {\n  //       // Look up lat long\n  //       methods\n  //         .getLocation(data.activeLocation.lat, data.activeLocation.lng)\n  //         .then(address => {\n  //           resolve(address);\n  //         });\n  //     } else {\n  //       resolve(null);\n  //     }\n  //   });\n  // };\n\n  let check = 1;\n\n  // On Mount\n  onMount(async () => {\n    await tick(120);\n    await methods.init();\n    methods.renderMap();\n  });\n</script>\n\n<style lang=\"scss\">.n-map-container {\n  background-color: var(--color-solid);\n  position: relative;\n  min-height: 100%;\n  flex-grow: 1; }\n  .n-map-container .n-map-wrapper {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 1; }\n\n.n-map-container .location-name {\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  font-weight: bold;\n  font-size: 0.9rem;\n  height: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: stretch;\n  transition: height 0.2s ease-in-out;\n  z-index: 1000;\n  padding: 0px 5px;\n  background-color: var(--color-solid);\n  border-top: solid 1px var(--color-faded);\n  color: var(--color-inverse);\n  text-align: center;\n  z-index: 2;\n  box-shadow: 0px -6px 10px rgba(0, 0, 0, 0.1); }\n  .n-map-container .location-name .row {\n    margin: 0;\n    flex-wrap: nowrap; }\n  .n-map-container .location-name .locations {\n    width: 100%; }\n  .n-map-container .location-name.expanded {\n    z-index: 2001;\n    max-height: 300px;\n    flex-grow: 1;\n    height: auto;\n    max-height: 300px;\n    overflow: scroll;\n    padding: 0; }\n    .n-map-container .location-name.expanded .row {\n      min-height: 50px; }\n    .n-map-container .location-name.expanded .locations.list {\n      border-top: solid 1px var(--color-faded);\n      overflow-y: scroll;\n      display: flex;\n      flex-direction: column;\n      align-content: stretch; }\n      .n-map-container .location-name.expanded .locations.list .right {\n        margin-left: 0px; }\n  .n-map-container .location-name .row {\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-items: center;\n    justify-content: stretch; }\n    .n-map-container .location-name .row .name {\n      text-align: left;\n      width: calc(100% - 90px);\n      margin: 0 auto;\n      font-size: 0.7rem;\n      line-height: 0.8rem;\n      align-self: center;\n      flex-grow: 1;\n      flex-shrink: 1;\n      padding: 0 4px; }\n\n.picker-cover {\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 40px;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000; }\n  .picker-cover svg {\n    fill: red;\n    opacity: 0.5; }\n\n.n-map-container .n-map {\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n  flex-shrink: 1; }\n</style>\n\n<div\n  bind:this={_el}\n  class=\"{className} n-map-container {small ? 'small ' : ''}\"\n  style=\"{height ? `height: ${height}px;` : `min-height: ${data.height}px;`}\n  {style}\">\n  {#if picker}\n    <div class=\"picker-cover\">\n      <div class=\"picker-target\">\n        <svg\n          version=\"1.1\"\n          id=\"Capa_1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          x=\"0px\"\n          y=\"0px\"\n          viewBox=\"0 0 60 60\"\n          height=\"120\"\n          style=\"enable-background:new 0 0 60 60;\"\n          xml:space=\"preserve\">\n          <g>\n            <path\n              d=\"M59,29h-2.025C56.458,14.907,45.093,3.542,31,3.025V1c0-0.553-0.447-1-1-1s-1,0.447-1,1v2.025\n              C14.907,3.542,3.542,14.907,3.025,29H1c-0.553,0-1,0.447-1,1s0.447,1,1,1h2.025C3.542,45.093,14.907,56.458,29,56.975V59\n              c0,0.553,0.447,1,1,1s1-0.447,1-1v-2.025C45.093,56.458,56.458,45.093,56.975,31H59c0.553,0,1-0.447,1-1S59.553,29,59,29z\n              M31,54.975V53c0-0.553-0.447-1-1-1s-1,0.447-1,1v1.975C16.01,54.46,5.54,43.99,5.025,31H7c0.553,0,1-0.447,1-1s-0.447-1-1-1H5.025\n              C5.54,16.01,16.01,5.54,29,5.025V7c0,0.553,0.447,1,1,1s1-0.447,1-1V5.025C43.99,5.54,54.46,16.01,54.975,29H53\n              c-0.553,0-1,0.447-1,1s0.447,1,1,1h1.975C54.46,43.99,43.99,54.46,31,54.975z\" />\n            <path\n              d=\"M42,29h-5.08c-0.441-3.059-2.861-5.479-5.92-5.92V18c0-0.553-0.447-1-1-1s-1,0.447-1,1v5.08\n              c-3.059,0.441-5.479,2.862-5.92,5.92H18c-0.553,0-1,0.447-1,1s0.447,1,1,1h5.08c0.441,3.059,2.861,5.479,5.92,5.92V42\n              c0,0.553,0.447,1,1,1s1-0.447,1-1v-5.08c3.059-0.441,5.479-2.862,5.92-5.92H42c0.553,0,1-0.447,1-1S42.553,29,42,29z\n              M30,35\n              c-2.757,0-5-2.243-5-5s2.243-5,5-5s5,2.243,5,5S32.757,35,30,35z\" />\n          </g>\n        </svg>\n      </div>\n    </div>\n  {/if}\n  <div class=\"n-map-wrapper\" style=\"bottom:{picker ? '50px' : '0'}\">\n    <div {id} class=\"n-map\" />\n  </div>\n\n  {#if picker}\n    <div class=\"location-name {data.showLocations ? 'expanded' : 'collapsed'}\">\n      <div class=\"row\">\n        <div class=\"left\">\n          <button\n            class=\"btn btn-clear btn-icon\"\n            disabled={!picker}\n            on:click={() => {\n              data.showLocations = !data.showLocations;\n            }}>\n\n            {#if data.showLocations}\n              <NIcon name=\"chevronDown\" />\n            {:else}\n              <NIcon name=\"menu\" />\n            {/if}\n\n          </button>\n        </div>\n\n        <div\n          class=\"name flex-grow\"\n          on:click={() => {\n            data.showLocations = !data.showLocations;\n          }}>\n          {data.locationName || 'Locations'}\n        </div>\n\n        {#if data.showLocations && data.locationName}\n          <div class=\"right\">\n            <div\n              class=\"btn btn-clear text-primary\"\n              on:click={methods.saveLocation}>\n              Save\n            </div>\n          </div>\n        {/if}\n\n      </div>\n      {#if data.showLocations}\n        <div class=\"locations list\">\n          {#if $Locations.length == 0}\n            <div class=\"empty-notice\" style=\"max-height:120px;\">\n              No Saved Locations\n            </div>\n          {/if}\n          {#each $Locations as location}\n            <Item className=\"compact text-primary\">\n              <button\n                slot=\"left\"\n                class=\"btn btn-clear btn-icon text-red\"\n                on:click={() => {\n                  methods.setLocation(location);\n                }}>\n\n                <NIcon name=\"radio\" />\n              </button>\n              <div\n                class=\"text-md text-inverse font-weight-bold\"\n                on:click={() => {\n                  methods.setLocation(location);\n                }}>\n                {location.name}\n              </div>\n              <div slot=\"right\" class=\"n-row\" style=\"min-width:50px;\">\n                <button\n                  class=\"btn btn-clear mr-2\"\n                  on:click={evt => {\n                    methods.editName(location);\n                  }}>\n                  <NIcon name=\"edit\" size=\"24\" />\n                </button>\n                <button\n                  class=\"btn btn-clear\"\n                  on:click={evt => {\n                    methods.deleteLocation(location);\n                  }}>\n                  <NIcon name=\"delete\" className=\"fill-red\" />\n                </button>\n              </div>\n\n            </Item>\n          {/each}\n          <div class=\"gap\" />\n        </div>\n      {/if}\n\n    </div>\n  {/if}\n\n</div>\n",
    "<script>\n  // Components\n  import Modal from \"../../components/modal/modal.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NInput from \"../../components/input/input.svelte\";\n  import NLogListLoader from \"../../components/log-list/log-list-loader.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import ButtonGroup from \"../../components/button-group/button-group.svelte\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n  import LogItem from \"../../components/list-item-log/list-item-log.svelte\";\n  import BarChart from \"../../components/charts/bar-chart.svelte\";\n\n  // Container Items\n  import PersonCheckin from \"./person-check-in.svelte\";\n\n  // Modules / Utils\n  import tick from \"../../utils/tick/tick\";\n  import Person from \"../../modules/person/person\";\n\n  // Vendors\n  import html2canvas from \"html2canvas\";\n  import domtoimage from \"dom-to-image-chrome-fix\";\n  import dayjs from \"dayjs\";\n\n  import { LedgerStore } from \"../../store/ledger\";\n  import { Interact } from \"../../store/interact.js\";\n  import { PeopleStore } from \"../../store/people-store.js\";\n\n  let domVisible = false;\n  let avatarBase64 = null;\n\n  let activePerson;\n  let activeStats;\n  let lastActivePersonKey;\n  let activeLogs;\n\n  $: if (\n    $Interact.people.active &&\n    lastActivePersonKey !== $Interact.people.active\n  ) {\n    lastActivePersonKey = $Interact.people.active;\n    domVisible = true;\n    activePerson = new Person($PeopleStore.people[$Interact.people.active]);\n  }\n\n  const state = {\n    view: \"check-in\"\n  };\n\n  async function deleteUser() {\n    let confirmed = await Interact.confirm(\n      `Remove ${activePerson.username}?`,\n      \"This only deletes them from your list, NO log data will be deleted.\"\n    );\n    if (confirmed) {\n      await PeopleStore.deletePerson(activePerson);\n      Interact.toast(`${activePerson.username} removed`);\n      close();\n    }\n  }\n\n  async function saveActivePerson() {\n    try {\n      await PeopleStore.savePerson(activePerson);\n      Interact.toast(\"Saved\");\n    } catch (e) {\n      Interact.alert(\"Error\", e.message);\n    }\n  }\n\n  async function getAvatarImage(imageBase64) {\n    let image = document.getElementById(\"photo-holder-image\");\n    image.src = imageBase64;\n    await tick(200);\n    let wrapper = document.getElementById(\"photo-holder\");\n    if (image.naturalHeight > image.naturalWidth) {\n      wrapper.setAttribute(\"data-orientation\", \"vertical\");\n    } else if (image.naturalHeight < image.naturalWidth) {\n      wrapper.setAttribute(\"data-orientation\", \"horizontal\");\n    } else {\n      wrapper.setAttribute(\"data-orientation\", \"square\");\n    }\n\n    try {\n      await tick(400);\n      let canvas = await html2canvas(wrapper, { width: 90, height: 90 });\n      let avatar64 = canvas.toDataURL(\"image/jpeg\", 0.2);\n      return avatar64;\n    } catch (e) {\n      alert(e.message);\n      return null;\n    }\n  }\n\n  async function close() {\n    domVisible = false;\n    await tick(200);\n    Interact.person(null);\n  }\n\n  async function loadActiveLogs() {\n    let active = $Interact.people.active;\n    activePerson = new Person($PeopleStore.people[active]);\n    activeLogs = await LedgerStore.queryPerson(\n      active,\n      dayjs().subtract(1, \"year\"),\n      dayjs()\n    );\n  }\n\n  async function selectPhoto(evt) {\n    const toBase64 = file =>\n      new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n      });\n\n    let input = evt.target;\n    let files = evt.target.files;\n    let avatarBase64 = await toBase64(files[0]);\n    await tick(20);\n    let smallAvatar64 = await getAvatarImage(avatarBase64);\n    await tick(20);\n    document.getElementById(\"photo-holder-image\").src = null;\n    await tick(10);\n    activePerson.avatar = smallAvatar64;\n  }\n\n  async function changeView(view) {\n    state.view = view;\n  }\n</script>\n\n<style lang=\"scss\">.file-input-wraper {\n  height: 1px;\n  overflow: hidden; }\n\n:global(.person-checkin .btn-group .active div) {\n  font-size: 2rem !important; }\n</style>\n\n<Modal\n  className=\"person-modal\"\n  bodyClass=\"bg-solid-1\"\n  show={domVisible}\n  type=\"bottom-slideup\">\n  <header class=\"w-100\" slot=\"header\" on:swipedown={close}>\n    <NToolbarGrid>\n      <button\n        slot=\"left\"\n        class=\"btn btn-clear btn-icon tap-icon\"\n        on:click={close}>\n        <NIcon name=\"close\" />\n      </button>\n      <div class=\"main\">\n        <div class=\"n-row\">\n          <Dymoji person={activePerson} size={26} radius={0.3} />\n          &nbsp; {activePerson.getDisplayName()}\n        </div>\n      </div>\n      <button\n        slot=\"right\"\n        class=\"btn btn-sm tap-icon\"\n        on:click={() => {\n          close();\n          Interact.openStats(`@${activePerson.getUsername()}`);\n        }}>\n        <NIcon name=\"chart\" size=\"22\" />\n      </button>\n\n    </NToolbarGrid>\n    <NToolbar>\n      <ButtonGroup\n        size=\"sm\"\n        buttons={[{ label: 'Logs', active: state.view === 'logs', click() {\n              changeView('logs');\n            } }, { label: 'Check-In', active: state.view === 'check-in', click() {\n              changeView('check-in');\n            } }, { label: 'Edit', active: state.view === 'edit', click() {\n              changeView('edit');\n            } }]} />\n    </NToolbar>\n  </header>\n\n  <main>\n    {#if state.view == 'check-in'}\n      <PersonCheckin on:checkedIn={close} />\n    {:else if state.view == 'edit'}\n      <div class=\"edit p-3\">\n\n        <NItem className=\"bg-transparent\">\n          <NInput\n            type=\"text\"\n            placeholder=\"Display Name\"\n            bind:value={activePerson.displayName} />\n        </NItem>\n\n        <NItem className=\"bg-transparent\">\n          <NInput\n            type=\"textarea\"\n            placeholder=\"Notes\"\n            bind:value={activePerson.notes} />\n        </NItem>\n\n        <NItem className=\"bg-transparent\">\n          <div\n            slot=\"left\"\n            on:click={() => {\n              document.getElementById('avatarFileInput').click();\n            }}>\n            {#if activePerson.avatar}\n              <Dymoji avatar={activePerson.avatar} size={50} radius={0.3} />\n            {:else}\n              <Dymoji\n                username={activePerson.displayName}\n                size={50}\n                radius={0.3} />\n            {/if}\n          </div>\n\n          <button\n            class=\"btn btn-fill btn-light btn-block\"\n            on:click={() => {\n              document.getElementById('avatarFileInput').click();\n            }}>\n            Select Photo...\n          </button>\n          <div class=\"file-input-wraper\">\n            <input\n              class=\"form-control pb-2\"\n              id=\"avatarFileInput\"\n              placeholder=\"Avatar\"\n              type=\"file\"\n              accept=\"png,jpeg,jpg\"\n              on:change={selectPhoto} />\n          </div>\n\n        </NItem>\n\n        <NItem className=\"bg-transparent\">\n          <button\n            class=\"btn btn-block btn-secondary my-4\"\n            on:click={saveActivePerson}>\n            Save @{activePerson.username}\n          </button>\n        </NItem>\n\n        <NItem\n          className=\"bg-transparent text-red text-sm text-center\"\n          on:click={deleteUser}>\n          Delete @{activePerson.username}...\n        </NItem>\n      </div>\n    {:else if state.view == 'logs'}\n      <NLogListLoader compact term={`@${activePerson.username}`} />\n    {/if}\n  </main>\n\n</Modal>\n",
    "<script>\n  //svelte\n  import { createEventDispatcher } from \"svelte\";\n  import { tap } from \"@sveltejs/gestures\";\n\n  // Props\n  export let value = \"\";\n\n  // Consts\n  const dispatch = createEventDispatcher();\n\n  // Methods\n  const select = num => () => (value += num);\n  const clear = () => (value = \"\");\n  const submit = event => {\n    setTimeout(() => {\n      dispatch(\"submit\");\n      event.stopPropagation();\n    }, 10);\n  };\n</script>\n\n<style>\n  .keypad {\n    display: grid;\n    grid-template-columns: repeat(3, 5em);\n    grid-template-rows: repeat(4, 3em);\n    grid-gap: 0.5em;\n  }\n\n  button {\n    margin: 0;\n    color: var(--color-solid-2);\n    touch-action: manipulation;\n  }\n  button:hover,\n  button:focus {\n    color: var(--color-solid-3);\n  }\n</style>\n\n<div class=\"keypad\">\n  <button class=\"btn btn-clear\" on:click={select(1)}>1</button>\n  <button class=\"btn btn-clear\" on:click={select(2)}>2</button>\n  <button class=\"btn btn-clear\" on:click={select(3)}>3</button>\n  <button class=\"btn btn-clear\" on:click={select(4)}>4</button>\n  <button class=\"btn btn-clear\" on:click={select(5)}>5</button>\n  <button class=\"btn btn-clear\" on:click={select(6)}>6</button>\n  <button class=\"btn btn-clear\" on:click={select(7)}>7</button>\n  <button class=\"btn btn-clear\" on:click={select(8)}>8</button>\n  <button class=\"btn btn-clear\" on:click={select(9)}>9</button>\n  <button class=\"btn btn-clear\" disabled={!value} on:click={clear}>\n    Clear\n  </button>\n  <button class=\"btn btn-clear\" on:click={select(0)}>0</button>\n  <button class=\"btn btn-clear\" disabled={!value} on:click={submit}>\n    Submit\n  </button>\n</div>\n",
    "<script>\n  // Components\n  import Keypad from \"./keypad.svelte\";\n  // Stores\n  import { UserStore } from \"../../store/user\";\n\n  let pin;\n  $: view = pin ? pin.replace(/\\d(?!$)/g, \" • \") : \"Enter Pin\";\n  $: locked = $UserStore.locked || false;\n  $: accessPin = $UserStore.meta.pin || null;\n\n  const methods = {\n    submit() {\n      if (`${pin} ` === `${accessPin} `) {\n        UserStore.unlock();\n      } else {\n        methods.shake();\n      }\n    },\n    shake() {\n      alert(\"Incorrect Pin\");\n    }\n  };\n</script>\n\n<style>\n  h1 {\n    color: #fff;\n    margin-bottom: 20px;\n    border-bottom: solid 1px rgba(255, 255, 255, 0.2);\n    padding-bottom: 20px;\n    width: 100%;\n    text-align: center;\n  }\n</style>\n\n<div\n  class=\"full-screen flex-column bg-primary {$UserStore.locked && accessPin ? 'visible' : 'hidden'}\">\n  <h1>{view}</h1>\n  <Keypad bind:value={pin} on:submit={methods.submit} />\n</div>\n",
    "<script>\n  // components\n  import NText from \"../../components/text/text.svelte\";\n  import NModal from \"../../components/modal/modal.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n\n  //Utils\n  import { createEventDispatcher } from \"svelte\";\n  import { fade } from \"svelte/transition\";\n\n  // Stores\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { PeopleStore } from \"../../store/people-store\";\n  import { Interact } from \"../../store/interact\";\n  import { ContextStore } from \"../../store/context-store\";\n  import { Lang } from \"../../store/lang\";\n\n  // Props\n  export let show = false;\n  export let multiple = false;\n  // export let multiple = false;\n\n  // Consts\n  const dispatch = createEventDispatcher();\n\n  // State\n  let state = {\n    selected: [],\n    items: [],\n    multiple\n  };\n\n  // Holder of the alphabet for the list\n  let alphaGroup = {};\n\n  // When tracker store loads. Turn trackers into array sorted by label\n  $: type = $Interact.selector.type;\n\n  let isShown = false;\n  $: if ($Interact.selector.show && !isShown) {\n    isShown = true;\n    switch ($Interact.selector.type) {\n      case \"tracker\":\n        state.title = multiple ? \"Select Trackers\" : \"Select a Tracker\";\n        state.items = Object.keys($TrackerStore.trackers || {})\n          .map(tag => {\n            return $TrackerStore.trackers[tag];\n          })\n          .sort((a, b) => {\n            return a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1;\n          });\n        break;\n\n      case \"person\":\n        state.title = multiple ? \"Select People\" : \"Select a Person\";\n\n        state.items = Object.keys($PeopleStore.people || {})\n          .map(username => {\n            return $PeopleStore.people[username];\n          })\n          .sort((a, b) => {\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\n          });\n        break;\n\n      case \"context\":\n        state.title = \"Select Context\";\n\n        state.items = Object.keys($ContextStore || {})\n          .map(tag => {\n            return $ContextStore[tag];\n          })\n          .sort((a, b) => {\n            return a > b ? 1 : -1;\n          });\n        break;\n    }\n  } else if ($Interact.selector.show == false && isShown) {\n    isShown = false;\n    state.selected = [];\n  }\n\n  // When selected, auto create an array of selected trackers\n  // $: state.selectedArray = Object.keys(state.selected).map(tag => {\n  //   alphaGroup = {};\n  //   return state.selected[tag];\n  // });\n\n  $: if (state.selected) {\n    alphaGroup = {};\n  }\n\n  // If show changes, set selected to notihng\n\n  // Methods\n  const methods = {\n    toggle(item) {\n      if (multiple) {\n        let index = state.selected.indexOf(item);\n        if (index > -1) {\n          // unselect\n          state.selected.splice(index, 1);\n        } else {\n          state.selected.push(item);\n        }\n      } else {\n        state.selected = [item];\n      }\n      state.selected = state.selected;\n    },\n    close() {\n      dispatch(\"cancel\");\n    },\n    // Check if a letter has been shown\n    alphaGroupExists(item) {\n      if (state.items.length > 10) {\n        // get first letter\n        let alpha = item.substr(0, 1).toLowerCase();\n        // If it has value - return true...\n        if (alphaGroup.hasOwnProperty(alpha)) {\n          return true;\n        } else {\n          // Else - populate the alphaGroup, then return false\n          alphaGroup[alpha] = true;\n          return false;\n        }\n      } else {\n        // if it's less than 10 trackers - just show them without the letters\n        return true;\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\">:global(.tracker-selector-modal .sticky-top) {\n  position: sticky;\n  top: 0px; }\n</style>\n\n{#if show}\n  <NModal\n    title={state.title}\n    type=\"fullscreen\"\n    className=\"tracker-selector-modal\"\n    allowClose={true}\n    on:close={methods.close}>\n\n    {#if state.items.length == 0}\n      <NItem class=\"text-inverse-2\">Nothing found</NItem>\n    {/if}\n\n    {#if type == 'tracker'}\n      <div class=\"list trackers\">\n        {#each state.items as item}\n          {#if !methods.alphaGroupExists(item.label)}\n            <NItem\n              className=\"bg-light text-faded sticky-top\"\n              title={item.label.substr(0, 1).toUpperCase()} />\n          {/if}\n          <NItem\n            className=\"bottom-line\"\n            title={item.label}\n            on:click={() => {\n              methods.toggle(item);\n            }}>\n            <span slot=\"left\">\n              <NText size=\"lg\">{item.emoji}</NText>\n            </span>\n            <span slot=\"right\">\n              {#if state.selected.indexOf(item) > -1}\n                <NIcon name=\"radioFilled\" className=\"fill-primary-bright\" />\n              {:else}\n                <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n              {/if}\n            </span>\n          </NItem>\n        {/each}\n      </div>\n    {:else if type == 'person'}\n      <!-- It's a person list -->\n      <div class=\"list people\">\n        {#each state.items as person}\n          {#if !methods.alphaGroupExists(person.displayName)}\n            <NItem\n              className=\"bg-light text-faded sticky-top\"\n              title={person.displayName.substr(0, 1).toUpperCase()} />\n          {/if}\n          <NItem\n            className=\"bottom-line {state.selected.indexOf(person) > -1 ? 'bg-selected' : ''}\"\n            title={person.displayName}\n            on:click={() => {\n              methods.toggle(person);\n            }}>\n            <span slot=\"left\">\n              <Dymoji username={person.username} size=\"24\" />\n            </span>\n            <span slot=\"right\">\n              {#if state.selected.indexOf(person) > -1}\n                <NIcon name=\"radioFilled\" className=\"fill-primary-bright\" />\n              {:else}\n                <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n              {/if}\n            </span>\n          </NItem>\n        {/each}\n      </div>\n    {:else if type == 'context'}\n      <div class=\"list context\">\n        {#each state.items as context}\n          {#if !methods.alphaGroupExists(context)}\n            <NItem\n              className=\"bg-light text-faded sticky-top\"\n              title={context.substr(0, 1).toUpperCase()} />\n          {/if}\n          <NItem\n            className=\"bottom-line {state.selected.indexOf(context) > -1 ? 'bg-selected' : ''}\"\n            title={'+' + context}\n            on:click={() => {\n              methods.toggle(context);\n            }}>\n            <span slot=\"right\">\n              {#if state.selected.indexOf(context) > -1}\n                <NIcon name=\"radioFilled\" className=\"fill-primary-bright\" />\n              {:else}\n                <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n              {/if}\n            </span>\n          </NItem>\n        {/each}\n      </div>\n    {/if}\n    <div slot=\"footer\" class=\"n-row\">\n      <button class=\"btn btn-light btn-lg w-100 mr-2\" on:click={methods.close}>\n        {Lang.t('general.close')}\n      </button>\n      {#if state.selected.length > 0}\n        <button\n          transition:fade\n          class=\"btn btn-primary btn-lg w-100\"\n          on:click={() => {\n            dispatch('select', state.selected);\n          }}>\n          {Lang.t('general.done', 'Done')}\n        </button>\n      {/if}\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  //Vendors\n  import { onMount } from \"svelte\";\n  import { navigate, Router, Route } from \"svelte-routing\";\n  import dayjs from \"dayjs\";\n\n  // Modules\n  import Tracker from \"../../modules/tracker/tracker\";\n  import NLog from \"../../modules/nomie-log/nomie-log\";\n  import StatsV5 from \"../../modules/stats/statsV5\";\n  import StatsRef from \"../../modules/stats/stats-ref\";\n\n  import { strToColor } from \"../../components/dymoji/dymoji\";\n\n  // Utils\n  import NomieUOM from \"../../utils/nomie-uom/nomie-uom\";\n  import tick from \"../../utils/tick/tick\";\n  import math from \"../../utils/math/math\";\n  import Storage from \"../../modules/storage/storage\";\n\n  import extractor from \"../../utils/extract/extract\";\n\n  // Components\n  import NModal from \"../../components/modal/modal.svelte\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n  import NButtonGroup from \"../../components/button-group/button-group.svelte\";\n  import HScroller from \"../../components/h-scroller/h-scroller.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NSpinner from \"../../components/spinner/spinner.svelte\";\n  import NKVBlock from \"../../components/kv-block/kv-block.svelte\";\n  import NBarChart from \"../../components/charts/bar-chart.svelte\";\n  import NLogList from \"../../components/log-list/log-list.svelte\";\n  import NTimeGrid from \"../../components/day-time-grid/day-time-grid.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  // Containers\n  import NMap from \"../../containers/map/map.svelte\";\n\n  // Stores\n  import { LedgerStore } from \"../../store/ledger\";\n  import { Interact } from \"../../store/interact\";\n  import { UserStore } from \"../../store/user\";\n  import { Lang } from \"../../store/lang\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { PeopleStore } from \"../../store/people-store\";\n\n  const timeSpans = {\n    d: { id: \"d\", label: \"D\", title: \"Day\", unit: \"day\" },\n    w: { id: \"w\", label: \"W\", title: \"Week\", unit: \"week\" },\n    m: { id: \"m\", label: \"M\", title: \"Month\", unit: \"month\" },\n    y: { id: \"y\", label: \"Y\", title: \"Year\", unit: \"year\" }\n  };\n\n  const dataViews = {\n    overview: { id: \"overview\", label: \"Home\" },\n    compare: { id: \"compare\", label: \"Compare\" },\n    map: { id: \"map\", label: \"Map\" },\n    time: { id: \"time\", label: \"Time\" },\n    logs: { id: \"logs\", label: \"Logs\", focused: true }\n  };\n\n  const types = {\n    tracker: { prefix: \"#\" },\n    person: { prefix: \"@\" },\n    context: { prefix: \"+\" },\n    location: { prefix: \"\" }\n  };\n\n  const viewMemory = new Storage.SideStore(\"stats-memory\");\n\n  function remember(key, value) {\n    let base = `${getLastTerm()}-${key}`;\n    if (key && value !== undefined) {\n      viewMemory.put(base, value);\n      return value;\n    } else {\n      return viewMemory.get(base);\n    }\n  }\n\n  const state = {\n    currentTerm: null,\n    currentColor: \"#444\",\n    date: dayjs(),\n    timeSpan: remember(\"timeSpan\") || \"w\",\n    dataView: remember(\"dataView\") || \"overview\",\n    timeOption: [],\n    viewOption: [],\n    loading: true,\n    stats: null,\n    compare: [],\n    selected: { index: undefined, rows: null },\n    lookupStack: [],\n    related: []\n  };\n\n  function setTimeView(option) {\n    remember(\"timeSpan\", option.id);\n    state.timeSpan = option.id;\n  }\n\n  function setView(option) {\n    remember(\"dataView\", option.id);\n    state.dataView = option.id;\n  }\n\n  function getTimeSpan() {\n    return timeSpans[state.timeSpan];\n  }\n\n  function getTimeViewButtons() {\n    return;\n  }\n\n  $: timeViewButtons = Object.keys(timeSpans).map(optionId => {\n    let option = timeSpans[optionId];\n    return {\n      label: option.label,\n      active: state.timeSpan === optionId,\n      click: () => {\n        setTimeView(option);\n      }\n    };\n  });\n\n  $: logViewButtons = [\n    {\n      label: `Only ${state.currentTerm}`,\n      id: \"focused\",\n      active: dataViews.logs.focused,\n      click() {\n        dataViews.logs.focused = true;\n        if (state.selected) {\n          setSelected(state.selected);\n        }\n      }\n    },\n    {\n      label: `All Logs`,\n      id: \"all\",\n      active: !dataViews.logs.focused,\n      click() {\n        dataViews.logs.focused = false;\n        if (state.selected) {\n          setSelected(state.selected);\n        }\n      }\n    }\n  ];\n\n  function getScore() {\n    let scores = [];\n    state.stats.rows.forEach(row => {\n      let score = row.score || row.calculateScore();\n      scores.push(score);\n    });\n    let score = math.sum(scores);\n    let final = 0;\n\n    if (score > 0) {\n      return `${score} 😄`;\n    } else if (score < 0) {\n      return `${score} 😞`;\n    } else {\n      return `0 😐`;\n    }\n  }\n\n  function getDataViewButtons() {\n    return Object.keys(dataViews)\n      .map(optionId => {\n        let option = dataViews[optionId];\n        if ((option.excludeFrom || []).indexOf(state.timeSpan) == -1) {\n          return {\n            label: option.label,\n            active: state.dataView === optionId,\n            click: () => {\n              setView(option);\n            }\n          };\n        } else {\n          return null;\n        }\n      })\n      .filter(row => row);\n  }\n\n  function close() {\n    Interact.closeStats();\n  }\n\n  function back() {\n    Interact.update(state => {\n      state.stats.terms.pop();\n      return state;\n    });\n    main();\n  }\n\n  function getSearchTerm(type, text) {\n    let response = \"\";\n    switch (type) {\n      case \"tracker\":\n        response = `#${text}`;\n        break;\n      case \"person\":\n        response = `@${text}`;\n        break;\n      case \"context\":\n        response = `+${text}`;\n        break;\n      default:\n        response = text;\n        break;\n    }\n    return response;\n  }\n\n  function getTitle() {\n    return getLastTerm();\n  }\n\n  function getFromDate() {\n    let timespan = getTimeSpan();\n    return getToDate().subtract(1, timespan.unit);\n  }\n\n  function getToDate() {\n    return dayjs(state.date);\n  }\n\n  function removeCompare(compare) {\n    state.compare = state.compare.filter(row => {\n      return row != compare;\n    });\n    rememberCompare();\n  }\n\n  function getTrackableElement(str) {\n    let type = extractor.toElement(str);\n    if (type.type == \"tracker\") {\n      type.obj = $TrackerStore.trackers[type.id];\n    }\n    return type;\n  }\n\n  async function compareTracker() {\n    let trackers = await Interact.select(\"tracker\", true);\n    if (trackers.length) {\n      for (var i = 0; i < trackers.length; i++) {\n        const tracker = trackers[i];\n        let compareObj = new StatsRef({\n          type: \"tracker\",\n          key: tracker.tag,\n          label: tracker.label,\n          base: tracker,\n          is24Hour: $UserStore.meta.is24Hour\n        });\n        await compareObj.getStats(state.timeSpan, getFromDate(), getToDate());\n        state.compare.push(compareObj);\n      }\n      state.compare = state.compare;\n      rememberCompare();\n    }\n  }\n\n  function rememberCompare() {\n    let comparing = state.compare.map(statRef => statRef.getSearchTerm());\n    remember(\"compare\", comparing);\n  }\n\n  async function comparePerson() {\n    let people = await Interact.select(\"person\", true);\n    if (people.length) {\n      for (var i = 0; i < people.length; i++) {\n        const person = people[i];\n        let compareObj = new StatsRef({\n          type: \"person\",\n          key: person.username,\n          label: person.displayName,\n          base: person,\n          is24Hour: $UserStore.meta.is24Hour\n        });\n        await compareObj.getStats(state.timeSpan, getFromDate(), getToDate());\n        state.compare.push(compareObj);\n      }\n      state.compare = state.compare;\n      rememberCompare();\n    }\n  }\n\n  async function compareContext() {\n    let contexts = await Interact.select(\"context\", true);\n    if (contexts.length) {\n      for (var i = 0; i < contexts.length; i++) {\n        const context = contexts[i];\n        let compareObj = new StatsRef({\n          type: \"context\",\n          key: context,\n          label: context,\n          base: context,\n          is24Hour: $UserStore.meta.is24Hour\n        });\n        await compareObj.getStats(state.timeSpan, getFromDate(), getToDate());\n        state.compare.push(compareObj);\n      }\n      state.compare = state.compare;\n      rememberCompare();\n    }\n  }\n\n  async function compareSearchTerm() {\n    let item = await Interact.prompt(\"Term\");\n    if (item) {\n      let compareObj = new StatsRef({\n        type: \"search\",\n        key: item,\n        label: item,\n        base: item,\n        is24Hour: $UserStore.meta.is24Hour\n      });\n      await compareObj.getStats(state.timeSpan, getFromDate(), getToDate());\n      state.compare.push(compareObj);\n    }\n    state.compare = state.compare;\n    rememberCompare();\n  }\n\n  async function compareType() {\n    let types = [\"Tracker\", \"Person\", \"Context\", \"Search Term\"];\n    Interact.popmenu({\n      buttons: types.map(type => {\n        return {\n          title: `${type}...`,\n          async click() {\n            switch (type) {\n              case \"Tracker\":\n                await compareTracker();\n                setView(dataViews.compare);\n                break;\n              case \"Person\":\n                await comparePerson();\n                setView(dataViews.compare);\n                break;\n              case \"Context\":\n                await compareContext();\n                setView(dataViews.compare);\n                break;\n              case \"Search Term\":\n                await compareSearchTerm();\n                setView(dataViews.compare);\n                break;\n            }\n          }\n        };\n      })\n    });\n  }\n\n  function onMoreTap() {\n    let buttons = [];\n    const compare = {\n      title: \"Compare to...\",\n      click() {\n        compareType();\n      }\n    };\n    const gotoToday = {\n      title: \"Today\",\n      click: () => {\n        changeDate(dayjs());\n      }\n    };\n    const startOfMonth = {\n      title: \"Start of month\",\n      click: () => {\n        changeDate(state.date.startOf(\"month\"));\n      }\n    };\n    const startOfYear = {\n      title: \"Start of year\",\n      click: () => {\n        changeDate(state.date.startOf(\"year\"));\n      }\n    };\n    const startOfWeek = {\n      title: \"Start of week\",\n      click: () => {\n        changeDate(state.date.startOf(\"week\"));\n      }\n    };\n    const viewStreak = {\n      title: \"View Streak\",\n      click: () => {\n        Interact.openStreak(state.currentTerm);\n      }\n    };\n\n    const editElement = {\n      title: `Edit ${state.currentTerm}`,\n      click: () => {\n        if (state.trackableElement.type == \"tracker\") {\n          Interact.editTracker(TrackerStore.byTag(state.trackableElement.id));\n        } else if (state.trackableElement.type == \"person\") {\n          Interact.person(state.trackableElement.id);\n        }\n      }\n    };\n\n    buttons.push(compare);\n    if (dayjs().format(\"DD-MM-YYYY\") !== state.date.format(\"DD-MM-YYYY\")) {\n      buttons.push(gotoToday);\n    }\n    buttons.push(startOfWeek);\n    buttons.push(startOfMonth);\n    buttons.push(startOfYear);\n    buttons.push(viewStreak);\n    // If it's a person or tracker\n    if (state.trackableElement.type.search(/tracker|person/) > -1) {\n      buttons.push(editElement);\n    }\n\n    //state.trackableElement\n    Interact.popmenu({ title: \"Stat Options\", buttons });\n  }\n\n  function getLastTerm() {\n    let lastTerm = $Interact.stats.terms[$Interact.stats.terms.length - 1];\n    return lastTerm;\n  }\n\n  async function loadSavedCompares(queryPayload) {\n    let savedCompares = remember(\"compare\");\n    // If we do - then lets load them each up\n    if (state.compare.length == 0 && savedCompares) {\n      // Loop over compares\n      (savedCompares || [])\n        .filter(row => row)\n        .forEach(searchTerm => {\n          let type = extractor.toElement(searchTerm);\n          type.obj = type.type == \"tracker\" ? TrackerStore.byTag(type.id) : {};\n          state.compare.push(\n            new StatsRef({\n              type: type.type,\n              key: type.id,\n              math: type.obj.math || \"sum\",\n              label: type.id,\n              base: type.obj,\n              is24Hour: $UserStore.meta.is24Hour\n            })\n          );\n        });\n    }\n    // Get Stats for Compares\n    for (let i = 0; i < state.compare.length; i++) {\n      let stats = await state.compare[i].getStats(\n        state.timeSpan,\n        queryPayload.start,\n        queryPayload.end\n      );\n    }\n  } // end load saved compares\n\n  async function getStats() {\n    state.loading = true;\n    let queryPayload = {\n      search: state.trackableElement,\n      start: getFromDate(),\n      end: getToDate()\n    };\n    // if day - normalize start and end\n    if (state.timeSpan == \"d\") {\n    }\n    queryPayload.start = dayjs(getFromDate()).startOf(\"day\");\n    queryPayload.end = dayjs(getToDate()).endOf(\"day\");\n\n    // Get Logs from the Ledger Store\n    let results = await LedgerStore.query(queryPayload);\n    // Prep Stats\n    const statsV5 = new StatsV5();\n\n    // Generate Stats\n    state.stats = statsV5.generate({\n      rows: results,\n      fromDate: getFromDate(),\n      toDate: getToDate(),\n      mode: state.timeSpan,\n      math: state.tracker.math,\n      trackableElement: state.trackableElement\n    });\n    // See if we have any saved compares\n    loadSavedCompares(queryPayload);\n\n    state.related = statsV5.getRelated();\n    await tick(100);\n    state.compare = state.compare;\n\n    state.loading = false;\n  } // end getStats()\n\n  function getDayRange() {\n    return state.date.format(\"ddd MMM D, YYYY\");\n  }\n\n  function loadPreviousDate() {\n    state.date = dayjs(state.date).subtract(1, getTimeSpan().unit);\n    lastTimeSpan = null;\n  }\n\n  function loadNextDate() {\n    state.date = dayjs(state.date).add(1, getTimeSpan().unit);\n    lastTimeSpan = null;\n  }\n\n  function changeDate(date) {\n    state.date = date;\n    lastTimeSpan = null;\n  }\n\n  function getWeekRange() {\n    const from = getFromDate();\n    const to = getToDate();\n    if (to.format(\"MMM\") !== from.format(\"MMM\")) {\n      return `${from.format(\"MMM D\")} - ${to.format(\"MMM D YYYY\")}`;\n    } else {\n      return `${from.format(\"MMM D\")} - ${to.format(\"D YYYY\")}`;\n    }\n  }\n\n  function getCalendarData() {\n    let rows = state.stats.rows\n      .filter(row => {\n        return new Date(row.end).getMonth() == state.date.toDate().getMonth();\n      })\n      .map(row => {\n        row.start = new Date(row.start);\n        row.end = new Date(row.end);\n        row.repeat = \"never\";\n        return row;\n      });\n    return rows;\n  }\n\n  function getLocations() {\n    return state.stats.rows\n      .map(row => {\n        if (row.lat) {\n          return {\n            lat: row.lat,\n            lng: row.lng,\n            name: row.location,\n            log: row\n          };\n        } else {\n          return null;\n        }\n      })\n      .filter(row => row);\n  }\n\n  function formatValue(value, includeUnit) {\n    let tracker = state.tracker;\n    if (state.tracker) {\n      return state.tracker.displayValue(value, includeUnit);\n    }\n    return value;\n  }\n\n  function getMonthRange() {\n    const from = getFromDate();\n    const to = getToDate();\n    return `${from.format(\"MMM D\")} - ${to.format(\"MMM D YYYY\")}`;\n  }\n\n  function getTimeGridRows() {}\n\n  function getYearRange() {\n    const from = getFromDate();\n    const to = getToDate();\n    return `${from.format(\"MMM D YYYY\")} - ${to.format(\"MMM D YYYY\")}`;\n  }\n\n  function getDateRangeText() {\n    let range;\n    switch (state.timeSpan) {\n      case \"d\":\n        range = getDayRange();\n        break;\n      case \"w\":\n        range = getWeekRange();\n        break;\n      case \"m\":\n        range = getMonthRange();\n        break;\n      case \"y\":\n        range = getYearRange();\n        break;\n    }\n    return range;\n  }\n\n  function clearSelected() {\n    state.selected = { index: undefined, rows: null };\n  }\n\n  /**\n   * Set Selected ({point})\n   * User Selected a Specific Date from the Cart\n   */\n  async function setSelected(selected) {\n    state.selected = selected;\n\n    let payload = {\n      start: dayjs(state.selected.point.date).startOf(\"day\"),\n      end: dayjs(state.selected.point.date).endOf(\"day\"),\n      limit: 100\n    };\n    // if day - normalize start and end\n    if (state.timeSpan == \"d\") {\n      payload.start = dayjs(state.selected.point.date).startOf(\"hour\");\n      payload.end = dayjs(state.selected.point.date).endOf(\"hour\");\n    } else if (state.timeSpan == \"w\" || state.timeSpan == \"m\") {\n      payload.start = dayjs(state.selected.point.date).startOf(\"day\");\n      payload.end = dayjs(state.selected.point.date).endOf(\"day\");\n    } else if (state.timeSpan == \"y\") {\n      payload.start = dayjs(state.selected.point.date).startOf(\"month\");\n      payload.end = dayjs(state.selected.point.date).endOf(\"month\");\n    }\n    let rows = await LedgerStore.query(payload);\n\n    if (dataViews.logs.focused) {\n      state.selected.rows = rows.filter(row => {\n        return row.note.match(state.trackableElement.toSearchTerm());\n      });\n    } else {\n      state.selected.rows = rows;\n    }\n\n    return state.selected.rows;\n  }\n\n  function getLogs() {\n    if (state.selected.rows) {\n      return state.selected.rows;\n    } else {\n      return state.stats.rows;\n    }\n  }\n\n  async function main() {\n    // Get term from Interact Store\n    state.currentTerm = $Interact.stats.terms[$Interact.stats.terms.length - 1];\n    // Get range and view options\n    state.range = getDateRangeText();\n    state.viewOption = getDataViewButtons();\n    // Get trackable element from the latest term\n    state.trackableElement = extractor.toElement(state.currentTerm);\n    // Get Tracker - make a fake one if a person, or context\n    state.tracker = TrackerStore.byTag(state.trackableElement.id);\n    state.currentColor = state.tracker.color;\n    getStats();\n  }\n\n  onMount(() => {\n    main();\n  });\n\n  /** Reactive Functions and Variables **/\n  let lastTimeSpan = state.timeSpan;\n  $: if (state.timeSpan && state.timeSpan !== lastTimeSpan) {\n    lastTimeSpan = state.timeSpan;\n    main();\n  }\n\n  /**\n   * IMPORTANT\n   * When the term changes - we must show the new stats\n   * Don't sleep on this one.\n   */\n  let lastTerms;\n  $: if ($Interact.stats.terms.join(\",\") !== lastTerms) {\n    lastTerms = $Interact.stats.terms.join(\",\");\n    main();\n    state.showAnimation = true;\n    setTimeout(() => {\n      state.showAnimation = false;\n    }, 200);\n    setTimeout(() => {\n      state.showAnimation = false;\n    }, 1000);\n  }\n\n  let lastDataView = state.dataView;\n  $: if (state.dataView && state.dataView != lastDataView) {\n    lastDataView = state.dataView;\n    state.viewOption = getDataViewButtons();\n  }\n\n  $: timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n  $: dateFormat = $UserStore.meta.is24Hour ? \"DD/MM/YYYY\" : \"MMM Do YYYY\";\n\n  function onSwipeDown(e) {\n    close();\n  }\n</script>\n\n<style lang=\"scss\">:global(.stats-modal) {\n  z-index: 1300 !important; }\n\n.n-list {\n  max-width: 100vw;\n  overflow: hidden; }\n\n.time-range {\n  font-size: 0.9rem;\n  font-weight: 500;\n  text-align: center;\n  line-height: 1rem; }\n\n:global(.stats-modal .n-modal) {\n  max-width: 500px !important; }\n\n:global(.chart-item) {\n  position: relative; }\n  :global(.chart-item) .btn-close {\n    position: absolute;\n    top: -4px;\n    right: -6px;\n    padding: 0;\n    height: 24px;\n    width: 24px;\n    border: solid 1px var(--color-inverse-1);\n    background-color: var(--color-solid); }\n\n:global(.chart-item .btn-close svg) {\n  fill: var(--color-inverse) !important; }\n</style>\n\n<NModal\n  className=\"stats-modal\"\n  bodyClass=\"bg-solid-1 \"\n  fullscreen\n  closeOnBackgroundTap\n  on:close={close}\n  on:swipeDown={onSwipeDown}>\n  <header slot=\"raw-header\" class=\"box-shadow-float\">\n    {#if $Interact.stats.terms.length > 1}\n      {#each $Interact.stats.terms as term}\n        <div class=\"mock-header mock-header\">\n          <span>{term}</span>\n        </div>\n      {/each}\n    {/if}\n    <div\n      class=\"mock-card-animation animate up {state.showAnimation ? 'visible' : 'hidden'}\" />\n    <NToolbarGrid>\n      <div slot=\"left\" className=\"truncate\" style=\"min-width:100px;\">\n        {#if $Interact.stats.terms.length == 1}\n          <button class=\"btn btn-clear tap-icon clickable\" on:click={close}>\n            <NIcon name=\"close\" />\n          </button>\n        {:else}\n          <button class=\"btn btn-clear tap-icon clickable pl-1\" on:click={back}>\n            <NIcon name=\"arrowBack\" size=\"28\" />\n            <small\n              class=\"text-sm text-inverse-2 ml-1 truncate\"\n              style=\"max-width:60px;\">\n              {$Interact.stats.terms[$Interact.stats.terms.length - 2]}\n            </small>\n          </button>\n        {/if}\n      </div>\n\n      <h1 class=\"title truncate\" slot=\"main\">{state.currentTerm}</h1>\n\n      <div\n        slot=\"right\"\n        style=\"min-width:100px\"\n        class=\"toolbar-buttons align-right\">\n        <button class=\"btn btn-clear tap-icon clickable\" on:click={onMoreTap}>\n          <NIcon name=\"more\" />\n        </button>\n      </div>\n    </NToolbarGrid>\n    <div class=\"n-row pb-2 px-2\">\n      <NButtonGroup size=\"sm\" buttons={timeViewButtons} />\n    </div>\n\n    <NToolbarGrid>\n      <button\n        class=\"btn btn-clear text-primary-bright clickable pr-1 pl-1\"\n        slot=\"left\"\n        on:click={loadPreviousDate}>\n        <NIcon name=\"chevronLeft\" className=\"fill-primary-bright\" />\n        Prev\n      </button>\n      <div class=\"time-range truncate\" slot=\"main\">{state.range}</div>\n      <button\n        class=\"btn btn-clear text-primary-bright clickable pl-1 pr-1\"\n        slot=\"right\"\n        on:click={loadNextDate}>\n        Next\n        <NIcon name=\"chevronRight\" className=\"fill-primary-bright\" />\n      </button>\n    </NToolbarGrid>\n\n    {#if state.loading}\n      <div class=\"container n-panel center-all\" style=\"height:140px;\">\n        <div>\n          <NSpinner size={46} />\n        </div>\n      </div>\n    {/if}\n\n    {#if state.stats && !state.loading}\n      <div class=\"main-chart px-2 pb-1\">\n        <NBarChart\n          height={140}\n          color={state.currentColor}\n          labels={state.stats.chart.values.map(point => point.x)}\n          points={state.stats.chart.values}\n          on:swipeLeft={loadNextDate}\n          on:swipeRight={loadPreviousDate}\n          xFormat={(x, index) => {\n            return x;\n          }}\n          yFormat={y => {\n            return state.tracker.displayValue(y);\n          }}\n          on:tap={event => {\n            setSelected(event.detail);\n          }}\n          activeIndex={state.selected.index} />\n      </div>\n    {/if}\n\n  </header>\n\n  <div slot=\"footer\" class=\"w-100\">\n    <NButtonGroup\n      inverse\n      color={state.currentColor}\n      buttons={state.viewOption} />\n  </div>\n\n  {#if !state.loading}\n    {#if state.dataView == 'compare'}\n      <div class=\"charts\">\n        {#each state.compare as compare}\n          <NItem className=\"solo chart-item\">\n            {#if compare.stats}\n              <NBarChart\n                height={110}\n                title={compare.getSearchTerm()}\n                color={compare.getTracker().color}\n                labels={compare.stats.chart.values.map(point => point.x)}\n                points={compare.stats.chart.values}\n                on:swipeLeft={loadNextDate}\n                on:swipeRight={loadPreviousDate}\n                xFormat={(x, index) => {\n                  return x;\n                }}\n                on:titleClick={event => {\n                  Interact.openStats(compare.getSearchTerm());\n                }}\n                on:tap={event => {\n                  setSelected(event.detail);\n                }}\n                yFormat={y => {\n                  return compare.getTracker().displayValue(y);\n                }}\n                activeIndex={state.selected.index} />\n            {:else}{compare.id} chart unavailable{/if}\n            <button\n              class=\"btn btn-clear btn-close\"\n              on:click={() => {\n                removeCompare(compare);\n              }}>\n              <NIcon name=\"close\" className=\"fill-white\" size=\"16\" />\n            </button>\n          </NItem>\n        {/each}\n      </div>\n\n      {#if state.compare.length == 0}\n        <div class=\"p-2\" />\n      {/if}\n\n      <div class=\"p-2 pt-2\">\n        <button class=\"btn btn-light btn-block\" on:click={compareType}>\n          {Lang.t('stats.select-comparison', 'Select Comparison')}...\n        </button>\n      </div>\n    {/if}\n    {#if state.dataView == 'map'}\n      <NMap\n        small\n        locations={getLocations()}\n        className=\"flex-grow flex-shrink\" />\n    {/if}\n    {#if state.stats}\n      {#if state.dataView == 'overview'}\n        <div class=\"overview py-2 flex-grow flex-shrink\">\n          {#if state.stats.math == 'sum'}\n            <NItem className=\"solo\" title=\"Total\">\n              <div slot=\"right\" class=\"text-lg text-inverse\">\n                {formatValue(state.stats.sum)}\n              </div>\n            </NItem>\n          {/if}\n          <NItem className=\"solo\" title=\"Average\">\n            <div slot=\"right\" class=\"text-lg text-inverse\">\n              {formatValue(state.stats.avg)}\n            </div>\n          </NItem>\n          {#if state.stats.max.value > state.stats.min.value}\n            <NItem className=\"solo\" title=\"Range\">\n              <div slot=\"right\" class=\"text-lg text-inverse value\">\n                {formatValue(state.stats.min.value, false)}\n                <span class=\"text-faded-2 font-weight-normal\">to</span>\n                {formatValue(state.stats.max.value)}\n              </div>\n            </NItem>\n          {/if}\n          <NItem className=\"solo\" title=\"Score\">\n            <div slot=\"right\" class=\"text-lg text-inverse\">{getScore()}</div>\n          </NItem>\n\n          {#if state.related.length}\n            <HScroller className=\"related-items p-2 px-3\">\n              {#each state.related as item}\n                {#if item.search != state.currentTerm}\n                  <button\n                    class=\"btn btn-badge\"\n                    on:click={() => {\n                      Interact.openStats(item.search);\n                    }}>\n                    {#if item.type == 'person'}\n                      <Dymoji\n                        person={$PeopleStore.people[item.value]}\n                        className=\"mr-2\"\n                        size={20}\n                        radius={0.3} />\n                    {/if}\n                    {#if item.type == 'tracker'}\n                      {TrackerStore.byTag(item.value).emoji}\n                    {/if}\n                    {item.search}\n                    <span class=\"count\">{item.count}</span>\n                  </button>\n                {/if}\n              {/each}\n            </HScroller>\n          {/if}\n\n        </div>\n        <!-- end over view -->\n      {:else if state.dataView == 'time'}\n        <NTimeGrid\n          term={state.currentTerm}\n          color={state.currentColor}\n          rows={state.stats.rows}\n          className=\"flex-grow flex-shrink\"\n          style=\"min-height:100%\" />\n      {:else if state.dataView == 'logs'}\n        {#if state.timeSpan == 'y'}\n          <div class=\"p-4 text-sm text-center text-inverse-2\">\n            Logs not yet available for a full year\n          </div>\n        {:else}\n          {#if state.selected.rows}\n            <NToolbar className=\"text-center mt-2\">\n              <div class=\"filler\" />\n              <NButtonGroup buttons={logViewButtons} />\n              <button\n                class=\"btn btn-badge btn-xs clickable ml-2\"\n                on:click={clearSelected}>\n                {state.selected.point.x}\n                <NIcon name=\"close\" size=\"22\" />\n              </button>\n              <div class=\"filler\" />\n            </NToolbar>\n          {/if}\n\n          <NLogList\n            compact\n            on:textClick={evt => {\n              if (evt.detail.type == 'tracker') {\n                Interact.openStats(`#${evt.detail.id}`);\n              } else {\n                Interact.openStats(`${evt.detail.raw}`);\n              }\n            }}\n            on:trackerClick={evt => {\n              Interact.openStats(`#${evt.detail.tag}`);\n            }}\n            logs={state.selected.rows || state.stats.rows}\n            style=\"min-height:100%\"\n            className=\"bg-solid-1 flex-grow flex-shrink\" />\n        {/if}\n\n        <!-- {#if state.dataView == 'logs' && (state.timeSpan != 'y' && state.selected.index !== undefined)}\n          <NLogList\n            compact\n            on:textClick={evt => {\n              if (evt.detail.type == 'tracker') {\n                Interact.openStats(`#${evt.detail.id}`);\n              } else {\n                Interact.openStats(`${evt.detail.raw}`);\n              }\n            }}\n            on:trackerClick={evt => {\n              Interact.openStats(`#${evt.detail.tag}`);\n            }}\n            logs={state.selected.rows || state.stats.rows}\n            style=\"min-height:100%\"\n            className=\"bg-solid-1 flex-grow flex-shrink\" />\n        {:else if state.dataView == 'logs' && state.timeSpan == 'y'}\n          <div class=\"p-4 text-sm text-center\">\n            Select a chart month to see the logs.\n          </div>\n        {/if} -->\n      {/if}\n    {/if}\n  {/if}\n</NModal>\n",
    "<script>\n  import NModal from \"../../components/modal/modal.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NCalendar from \"../../components/calendar/calendar.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import NProgressBar from \"../../components/progress-bar/progress-bar.svelte\";\n  import NSpinner from \"../../components/spinner/spinner.svelte\";\n  import NPositivityBar from \"../../components/positivity-bar/positivity-bar.svelte\";\n\n  // Modules and Utils\n  import math from \"../../utils/math/math\";\n  import Tracker from \"../../modules/tracker/tracker\";\n  import dayjs from \"dayjs\";\n  import extractor from \"../../utils/extract/extract\";\n\n  // Stores\n  import { UserStore } from \"../../store/user\";\n  import { Interact } from \"../../store/interact\";\n  import { LedgerStore } from \"../../store/ledger\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  const timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n  const dateFormat = $UserStore.meta.is24Hour ? \"MM/DD/YYYY\" : \"MMM D YYYY\";\n  let _elCalendar;\n\n  const state = {\n    date: dayjs().startOf(\"month\"),\n    logs: [],\n    percentage: 0,\n    daysHit: 0,\n    daysTotal: 0,\n    thisMonth: true\n  };\n\n  function next() {\n    state.date = state.date.add(1, \"month\");\n  }\n\n  function prev() {\n    state.date = state.date.subtract(1, \"month\");\n  }\n\n  let lastStreakShow = null;\n  let trackableElement = null;\n  let tracker = null;\n\n  $: if ($Interact.streak.show && $Interact.streak.show !== lastStreakShow) {\n    lastStreakShow = $Interact.streak.show;\n    trackableElement = extractor.toElement($Interact.streak.show);\n    tracker = TrackerStore.getByTag(trackableElement.id);\n  }\n\n  function getPercentage(rows) {\n    let start = dayjs(state.date).startOf(\"month\");\n    let end = dayjs(start).endOf(\"month\");\n    if (state.thisMonth) {\n      end = dayjs().endOf(\"day\");\n    }\n    let diff = end.diff(start, \"day\") + 1;\n    let final = [];\n    for (var i = 0; i < diff; i++) {\n      let date = dayjs(start).add(i, \"day\");\n      let hasEvent = rows.find(\n        row => new Date(row.end).toDateString() === date.toDate().toDateString()\n      );\n      final.push(hasEvent);\n    }\n    let found = final.filter(r => r).length;\n    let total = final.length;\n\n    state.daysTotal = total;\n    state.daysHit = found;\n\n    return found / total;\n  }\n\n  async function main() {\n    let payload = {\n      start: state.date.startOf(\"month\"),\n      end: state.date.endOf(\"month\")\n    };\n    let type = extractor.toElement($Interact.streak.show);\n\n    let logs = await LedgerStore.query({\n      search: type.toSearchTerm($Interact.streak.show),\n      start: payload.start,\n      end: payload.end\n    });\n\n    logs = logs.map(row => {\n      row.start = new Date(row.start);\n      row.end = new Date(row.end);\n      row.repeat = \"never\";\n      return row;\n    });\n    state.logs = logs;\n    state.percentage = getPercentage(logs) * 100;\n  }\n\n  let lastDate;\n  $: if ($Interact.streak.show && state.date.format(\"YYYY-MM\") !== lastDate) {\n    lastDate = state.date.format(\"YYYY-MM\");\n    state.thisMonth = lastDate == dayjs().format(\"YYYY-MM\");\n    main();\n  }\n  $: if (!$Interact.streak.show) {\n    state.date = dayjs();\n    lastDate = null;\n  }\n</script>\n\n<style lang=\"scss\">.spinner-container {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--color-solid);\n  box-shadow: var(--box-shadow-neu);\n  border-radius: 50px; }\n</style>\n\n{#if tracker}\n  <NModal show={$Interact.streak.show} type=\"bottom-slideup\">\n    <div slot=\"header\" class=\"w-100\">\n      <NToolbarGrid>\n        <button\n          class=\"btn btn-clear tap-icon\"\n          slot=\"left\"\n          on:click={Interact.closeStreak}>\n          <NIcon name=\"close\" />\n        </button>\n        <main slot=\"main\">{$Interact.streak.show}</main>\n      </NToolbarGrid>\n      <NToolbarGrid>\n        <button class=\"btn btn-clear tap-icon\" slot=\"left\" on:click={prev}>\n          <NIcon name=\"chevronLeft\" />\n        </button>\n        <main slot=\"main\" class=\"w-100 text-center\">\n          {state.date.format('MMM YYYY')}\n        </main>\n        <button class=\"btn btn-clear tap-icon\" slot=\"right\" on:click={next}>\n          <NIcon name=\"chevronRight\" />\n        </button>\n      </NToolbarGrid>\n    </div>\n    <div class=\"p-3\">\n\n      <NCalendar\n        bind:this={_elCalendar}\n        color={tracker.color}\n        {tracker}\n        showHeader={false}\n        on:dayClick={event => {\n          state.date = dayjs(event.detail);\n          main();\n        }}\n        initialDate={state.date}\n        events={state.logs} />\n\n      <div class=\"n-panel center-all\">\n\n        <div class=\"n-panel w-50 center-all vertical\">\n          <h1 class=\"text-inverse\">\n            {state.daysHit}\n            <span class=\"text-inverse-3\">of</span>\n            {state.daysTotal}\n          </h1>\n          <small class=\"text-inverse-2\">\n            {math.round(state.percentage, 0)}% of the days\n          </small>\n        </div>\n        <div class=\"n-panel w-50 center-all py-2\">\n          <div class=\"spinner-container\">\n            <NSpinner size=\"120\" speed=\"0\" gap={100 - state.percentage} />\n          </div>\n        </div>\n      </div>\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  import { TrackerDesignerStore } from \"./tracker-designer-store\";\n  import math from \"../../utils/math/math\";\n  import ColorPicker from \"../../components/color-picker/color-picker.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n</script>\n\n<style lang=\"scss\">:global(.color-grid .color-btn) {\n  margin: 4px; }\n</style>\n\n<div\n  class=\"step emoji n-panel vertical color-grid n-panel scroll-y\n  center-horizontal\">\n\n  <div class=\"container-sm\">\n    <ColorPicker grid={true} bind:value={$TrackerDesignerStore.tracker.color} />\n  </div>\n\n</div>\n",
    "<script>\n  import { TrackerDesignerStore } from \"./tracker-designer-store\";\n  import math from \"../../utils/math/math\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NInput from \"../../components/input/input.svelte\";\n  let tag = \"\";\n  $: if ($TrackerDesignerStore.tracker) {\n    tag = $TrackerDesignerStore.tracker.toTag(\n      $TrackerDesignerStore.tracker.label\n    );\n    if ($TrackerDesignerStore.tracker.emoji == \"⚪️\") {\n      $TrackerDesignerStore.tracker.emoji = math.random([\"💡\", \"🔥\", \"🧐\"]);\n    }\n  }\n</script>\n\n<style lang=\"scss\">input.input-emoji {\n  font-size: 120px;\n  max-width: 100px;\n  min-width: 200px;\n  width: 200px;\n  height: 200px;\n  border-radius: 100px !important;\n  overflow: hidden;\n  text-align: center; }\n</style>\n\n<div class=\"step emoji n-panel vertical center-all\">\n  <input\n    type=\"input\"\n    on:focus={evt => {\n      evt.target.select();\n    }}\n    bind:value={$TrackerDesignerStore.tracker.emoji}\n    class=\"form-control input-lg input-emoji\"\n    placeholder=\"\" />\n  <NItem className=\"text-sm text-faded-3 compact text-center\">\n    Pick Tracker Emoji\n  </NItem>\n</div>\n",
    "<script>\n  import { TrackerDesignerStore } from \"./tracker-designer-store\";\n  import { navigate } from \"svelte-routing\";\n  import NPage from \"../../containers/layout/page.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NLayout from \"../layout/layout.svelte\";\n\n  import NTrackerButton from \"../../containers/board/tracker-button.svelte\";\n  import NStepper from \"../../components/stepper/stepper.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import StepLabel from \"./step-label.svelte\";\n  import StepEmoji from \"./step-emoji.svelte\";\n  import StepType from \"./step-type.svelte\";\n  import StepColor from \"./step-color.svelte\";\n  import StepUOM from \"./step-uom.svelte\";\n  import StepDefaults from \"./step-defaults.svelte\";\n  import StepCalc from \"./step-calc.svelte\";\n  import StepPositivity from \"./step-positivity.svelte\";\n\n  // Stores\n  import { Lang } from \"../../store/lang\";\n  import { Interact } from \"../../store/interact\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  let step = 0;\n  let maxSteps = 4;\n  let stepChange = false;\n  let stepCount = 0;\n\n  const cancel = async () => {\n    let confirmed = await Interact.confirm(\n      \"Are you sure?\",\n      \"Any changes will be lost\"\n    );\n    if (confirmed) {\n      TrackerDesignerStore.clear();\n      navigate(\"/\");\n    }\n  };\n\n  const saveTracker = async () => {\n    let saved = await TrackerStore.saveTracker($TrackerDesignerStore.tracker);\n    TrackerDesignerStore.clear();\n    navigate(\"/\");\n  };\n\n  const nextStep = () => {\n    let steps = getSteps();\n    if (step < steps.length - 1) {\n      step++;\n    } else if (step == steps.length - 1) {\n      saveTracker();\n    }\n  };\n\n  const previousStep = () => {\n    if (step > -1) {\n      step = step - 1;\n    }\n  };\n\n  const getSteps = () => {\n    const label = {\n      component: StepLabel,\n      title: \"Tracker label\",\n      validate() {\n        return $TrackerDesignerStore.tracker.label.length > 1;\n      }\n    };\n    const positivity = {\n      component: StepPositivity,\n      title: \"Positivity\",\n      validate() {\n        if ($TrackerDesignerStore.tracker.score == \"custom\") {\n          return ($TrackerDesignerStore.tracker.score_calc || []).length > 0;\n        } else {\n          return true;\n        }\n      }\n    };\n    const emoji = {\n      component: StepEmoji,\n      title: \"Select the emoji\",\n      validate() {\n        return $TrackerDesignerStore.tracker.emoji;\n      }\n    };\n    const calc = {\n      title: \"Totals Calculation\",\n      component: StepCalc,\n      validate() {\n        return $TrackerDesignerStore.tracker.math;\n      }\n    };\n    const color = {\n      title: \"Pick Tracker Color\",\n      component: StepColor,\n      validate() {\n        return $TrackerDesignerStore.tracker.color;\n      }\n    };\n    const type = {\n      title: \"Pick Tracker Type\",\n      component: StepType,\n      validate() {\n        return $TrackerDesignerStore.tracker.type;\n      }\n    };\n    const defaultValue = {\n      title: \"Set Tracker Defaults\",\n      component: StepDefaults,\n      validate() {\n        return $TrackerDesignerStore.tracker.type;\n      }\n    };\n    const uom = {\n      title: \"Unit of Measurement\",\n      component: StepUOM,\n      validate() {\n        return $TrackerDesignerStore.tracker.uom;\n      }\n    };\n\n    let _steps = [];\n    switch ($TrackerDesignerStore.tracker.type) {\n      case \"tick\":\n        _steps = [type, label, emoji, color, defaultValue, positivity];\n        break;\n      case \"note\":\n        _steps = [type, label, emoji, color, defaultValue];\n        break;\n      case \"timer\":\n        _steps = [type, label, emoji, color, defaultValue, calc, positivity];\n        break;\n      default:\n        _steps = [\n          type,\n          label,\n          emoji,\n          color,\n          uom,\n          defaultValue,\n          calc,\n          positivity\n        ];\n        break;\n    }\n    stepCount = _steps.length;\n    return _steps;\n  };\n\n  let activeStep = getSteps()[step];\n  let canGoNext = false;\n\n  $: if (step !== null) {\n    let steps = getSteps();\n    activeStep = steps[step];\n  }\n  $: if ($TrackerDesignerStore.tracker) {\n    let steps = getSteps();\n    canGoNext = activeStep.validate();\n  }\n</script>\n\n<style lang=\"scss\">:global(.tracker-preview) {\n  margin-bottom: 10px; }\n\n:global(.tracker-preview .n-stepper) {\n  max-width: 400px;\n  width: 100%;\n  margin: 0 auto; }\n\n:global(.tracker-preview .item-ball .username) {\n  display: none; }\n\n@media (min-width: 600px) {\n  .main-body {\n    padding-top: 100px !important; } }\n</style>\n\n<NLayout showTabs={false}>\n\n  <div\n    slot=\"header\"\n    class=\"bg-bg pt-1 tracker-preview\"\n    style=\"background-color:{$TrackerDesignerStore.tracker.color};\n    box-shadow:0px 10px 10px -9px {$TrackerDesignerStore.tracker.color}\">\n\n    <div class=\"n-toolbar-grid\">\n      <button class=\"btn btn-clear text-white left\" on:click={cancel}>\n        <NIcon name=\"close\" className=\"fill-white\" size=\"32\" />\n      </button>\n      <div class=\"main text-white text-center\">\n        <div>#{step + 1}. {activeStep.title}</div>\n        <NStepper steps={stepCount} current={step} />\n      </div>\n    </div>\n\n    <div class=\"n-row align-top\">\n      <div class=\"text-bold filler text-center mb-2\">\n        <NTrackerButton tracker={$TrackerDesignerStore.tracker} />\n      </div>\n    </div>\n\n  </div>\n\n  <main slot=\"content\" class=\"bg-solid main-body pt-4 pb-4\">\n    {#if activeStep}\n      <svelte:component this={activeStep.component} />\n    {/if}\n  </main>\n\n  <footer slot=\"footer\" class=\"bg-solid\">\n    <div class=\"container-sm\">\n      <NToolbar className=\"\">\n        <button\n          on:click={previousStep}\n          disabled={step == 0}\n          class=\"btn btn-block btn-dark mr-1 my-0\">\n          Previous\n        </button>\n        <button\n          on:click={nextStep}\n          class=\"btn btn-block ml-1 my-0 btn-primary\"\n          disabled={!canGoNext}>\n          {step == getSteps().length - 1 ? Lang.t('general.create', 'Create') : Lang.t('general.next', 'Next')}\n        </button>\n      </NToolbar>\n    </div>\n  </footer>\n\n</NLayout>\n",
    "<script>\n  /**\n   * Tracker Input Mege Component\n   * This is a beast... Brace yourself.\n   * Officialy \"walk through\" - Nov 2 2019\n   */\n\n  // svelte\n  import { createEventDispatcher, onMount } from \"svelte\";\n  import { slide } from \"svelte/transition\";\n\n  // Components\n  import NModal from \"../../../components/modal/modal.svelte\";\n  import NIcon from \"../../../components/icon/icon.svelte\";\n\n  //Container for Slider (range), Keypad and Timer\n  import SliderInput from \"./slider.svelte\";\n  import NTimer from \"./timer.svelte\";\n  import NCalculator from \"../../../components/calculator/calculator.svelte\";\n\n  // Utils\n  import NomieUOM from \"../../../utils/nomie-uom/nomie-uom\";\n\n  // Stores\n  import { TrackerStore } from \"../../../store/tracker-store\";\n  import { Interact } from \"../../../store/interact\";\n  import { Lang } from \"../../../store/lang\";\n\n  // Props\n  export let tracker = undefined; // You can provide a tracker\n  export let show = undefined; // If it should show or not\n  export let value = undefined; // If a valid is provided\n  export let hideAdd = undefined; // If the Add button should be hidden\n  export let saveLabel = Lang.t(\"general.save\", \"Save\"); // The label of the save Button\n  // Consts\n  const dispatch = createEventDispatcher(); // Setup the dispatcher\n\n  let data = {\n    value: null, // holds current value\n    tracker: null, // holds current tracker\n    ready: false,\n    calcUsed: false // when it's ready\n  };\n\n  // Set up the Methods\n  const methods = {\n    // When the Save is hit\n    onSave() {\n      // Dispatch value and tracker\n      dispatch(\"save\", {\n        value: data.value,\n        tracker: tracker\n      });\n    },\n    // When Add is hit\n    onAdd() {\n      // Dispatch add\n      dispatch(\"add\", {\n        value: data.value,\n        tracker: tracker\n      });\n    },\n    onCancel() {\n      dispatch(\"cancel\");\n    },\n    // When the user starts the time\n    startTimer() {\n      // Set the date to epoch time (best to avoid timezones);\n      data.tracker.started = new Date().getTime();\n      // Start the Timer for this tracker\n      TrackerStore.startTimer(data.tracker);\n      methods.onCancel();\n    },\n    // Stop the Timer\n    stopTimer() {\n      // Get the Seconds between now and when the tracker started\n      data.value = (new Date().getTime() - tracker.started) / 1000;\n      // Clear local\n      data.tracker.started = null;\n      // tell store to stop timer\n      TrackerStore.stopTimer(data.tracker);\n    }\n  };\n\n  // If Tracker Changes\n  // FIres each time something happens to this object\n  $: if (tracker && data.tracker && data.tracker !== tracker) {\n    // Set to local variable\n    setTimeout(() => {\n      // Set to not ready and the new tracker\n      data.ready = true; // TODO: make this lack janky\n      data.tracker = tracker;\n      data.value = tracker.default || 0;\n      data.ready = true;\n    }, 12);\n  }\n\n  function editTracker() {\n    Interact.editTracker(tracker);\n    Interact.dismissTrackerInput();\n  }\n\n  // When Component Mounts\n  onMount(() => {\n    // If the value changes, and no data.value exists.\n    if (value && !data.value) {\n      data.value = value;\n    } else {\n      // TODO: Figure out wtf is going on with value and data.value - can we just use value?\n      data.value = tracker.default || 0;\n      value = data.value;\n    }\n    data.tracker = tracker;\n    setTimeout(() => {\n      data.ready = true;\n    }, 120);\n  });\n</script>\n\n<style lang=\"scss\">.tracker-input {\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: stretch;\n  flex-grow: 1;\n  height: 100%; }\n  .tracker-input .btn.w-25 {\n    width: 30% !important; }\n    .tracker-input .btn.w-25:first-child {\n      margin-right: 10px; }\n\n.footer .btn {\n  border-radius: 50px; }\n</style>\n\n<NModal\n  show={show || $Interact.trackerInput.show}\n  type=\"fullscreen\"\n  className=\"tracker-input\">\n  <div class=\"n-toolbar-grid n-row\" slot=\"header\">\n    <div class=\"left truncate pl-3\">\n      <span class=\"animate truncate up {data.ready ? 'visible' : 'hidden'}\">\n        {#if data.tracker}{data.tracker.displayValue(data.value)}{/if}\n      </span>\n    </div>\n    <div class=\"main\">\n      <span class=\"animate up text-md {data.ready ? 'visible' : 'hidden'}\">\n        {tracker.emoji} {tracker.label}\n      </span>\n    </div>\n    <button class=\"btn btn-clear tap-icon right\" on:click={editTracker}>\n      <NIcon name=\"edit\" size=\"26\" />\n    </button>\n  </div>\n  <!-- Is the data ready -->\n  {#if data.ready === true}\n    <!-- Slide in the input -->\n    <div class=\"input-model type-{tracker.type}\">\n      {#if tracker.type === 'range'}\n        <SliderInput\n          value={(data.value || tracker.min) + ''}\n          min={(tracker.min || 0) + ''}\n          max={(tracker.max || 0) + ''}\n          on:change={value => {\n            data.value = value.detail;\n          }} />\n      {:else if tracker.type === 'value' || tracker.type === 'tick'}\n        <div id=\"keypad-holder\">\n          <NCalculator\n            {value}\n            displayFormat={input => {\n              return tracker.displayValue(input || '');\n            }}\n            on:change={changedValue => {\n              data.value = changedValue.detail;\n            }} />\n        </div>\n      {:else if tracker.type === 'timer'}\n        <NTimer\n          tracker={data.tracker}\n          bind:value={data.value}\n          on:change={event => {\n            data.value = event.detail;\n          }} />\n      {:else}\n        <div id=\"keypad-holder\">\n          <NCalculator\n            {value}\n            displayFormat={input => {\n              return tracker.displayValue(input || '');\n            }}\n            on:change={value => {\n              data.value = value.detail;\n            }} />\n        </div>\n      {/if}\n    </div>\n  {/if}\n\n  <div class=\"footer n-toolbar-grid\" slot=\"footer\">\n\n    {#if data.tracker}\n      <div class=\"left\">\n        <button\n          aria-label=\"Cancel\"\n          on:click={methods.onCancel}\n          class=\"btn btn-clear btn-lg\">\n          {Lang.t('general.cancel', 'Cancel')}\n        </button>\n      </div>\n      <!-- end left toolbar -->\n\n      <div class=\"main px-2\">\n\n        {#if (data.tracker.type == 'timer' && data.value) || (data.tracker.type != 'timer' && $Interact.trackerInput.allowSave !== false)}\n          <button\n            on:click={methods.onSave}\n            class=\"btn btn-primary btn-lg text-white btn-block \"\n            aria-label=\"Save this log\">\n            {saveLabel}\n          </button>\n        {/if}\n\n        {#if data.tracker.type == 'timer' && !data.tracker.started && !data.value}\n          <button\n            on:click={methods.startTimer}\n            aria-label=\"Start Timer\"\n            class=\"btn btn-success btn-lg btn-block text-white\">\n            {Lang.t('general.start', 'Start')}\n          </button>\n        {/if}\n\n        {#if data.tracker.type == 'timer' && data.tracker.started !== null}\n          <button\n            on:click={methods.stopTimer}\n            aria-label=\"Stop Timer\"\n            class=\"btn btn-danger text-white btn-lg btn-block {data.tracker.started > 0 ? '' : 'd-none'}\">\n            {Lang.t('general.stop', 'Stop')}\n          </button>\n        {/if}\n\n      </div>\n      <!-- end main toolbar-grid-->\n\n      <div class=\"right\">\n\n        {#if (data.tracker.type !== 'timer' || data.value) && hideAdd !== true}\n          <button\n            on:click={methods.onAdd}\n            title=\"Add this to the note, but don't save yet\"\n            class=\"btn btn-clear btn-lg {tracker.started ? 'd-none' : ''}\">\n            <!-- local hack to make plus match with close-->\n            <NIcon name=\"add\" size=\"32\" />\n            Add\n          </button>\n        {/if}\n      </div>\n      <!-- end toolbar-grid right -->\n    {/if}\n\n  </div>\n\n  <!-- <div\n    class=\"w-25 btn btn-clear {tracker.started ? 'd-inline-block' : 'd-none'}\" /> -->\n</NModal>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  export let min = \"0\";\n  export let max = \"10\";\n  export let value = \"5\";\n\n  let tempValue;\n\n  $: tempValue = value;\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<style lang=\"scss\">@media (max-width: 599.98px) {\n  .container {\n    padding-left: 0 !important;\n    padding-right: 0 !important; } }\n\n@media (min-width: 980px) {\n  .container.board-container {\n    max-width: 90% !important; } }\n\ninput[type=\"range\"] {\n  background-color: var(--color-solid); }\n\n.tracker-input {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  max-height: 100%;\n  min-height: 200px; }\n  .tracker-input .value {\n    text-align: center;\n    font-weight: bold;\n    font-size: 2rem;\n    margin: 0 0 20px 0;\n    line-height: 2rem;\n    color: var(--color-inverse);\n    position: absolute;\n    bottom: 10px;\n    z-index: 10; }\n  .tracker-input input[type=\"range\"] {\n    padding: 0 5px;\n    margin: 0 auto;\n    -webkit-appearance: none;\n    width: 46vh;\n    margin: -5.5px 0; }\n    @media (min-width: 600px) {\n      .tracker-input input[type=\"range\"] {\n        width: 40vh; } }\n  .tracker-input input[type=\"range\"]:focus {\n    outline: none; }\n  .tracker-input input[type=\"range\"]::-webkit-slider-runnable-track {\n    width: 46vh;\n    height: 100px;\n    cursor: pointer;\n    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n    background: var(--color-faded);\n    border-radius: 50px;\n    padding: 0 6px;\n    border: 1px solid var(--color-faded-2);\n    position: relative;\n    margin-left: 20px; }\n    @media (min-width: 600px) {\n      .tracker-input input[type=\"range\"]::-webkit-slider-runnable-track {\n        width: 40vh; } }\n  .tracker-input input[type=\"range\"]::-webkit-slider-thumb {\n    height: 90px;\n    width: 90px;\n    border: solid 1px var(--color-faded-2);\n    border-radius: 50px;\n    background: var(--color-solid);\n    box-shadow: var(--box-shadow-float);\n    transform: rotate(90deg);\n    cursor: pointer;\n    -webkit-appearance: none;\n    margin-top: 4px; }\n  .tracker-input input[type=\"range\"]:focus::-webkit-slider-runnable-track {\n    background: var(--color-faded); }\n  .tracker-input input[type=\"range\"]::-moz-range-track {\n    width: 46vh;\n    height: 100px;\n    cursor: pointer;\n    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n    background: var(--color-faded);\n    border-radius: 50px;\n    border: 0px solid var(--color-solid-2); }\n    @media (min-width: 600px) {\n      .tracker-input input[type=\"range\"]::-moz-range-track {\n        width: 40vh; } }\n  .tracker-input input[type=\"range\"]::-moz-range-thumb {\n    box-shadow: 5.4px 5.4px 6.5px rgba(0, 0, 0, 0.18), 0px 0px 5.4px rgba(13, 13, 13, 0.18);\n    border: 1px solid var(--color-inverse);\n    height: 90px;\n    width: 90px;\n    border-radius: 45px;\n    background: var(--color-solid-2);\n    cursor: pointer; }\n  .tracker-input input[type=\"range\"] {\n    transform: rotate(-90deg); }\n</style>\n\n<div class=\"tracker-input slider\">\n  <div class=\"value\">{tempValue}</div>\n  <input\n    type=\"range\"\n    bind:value={tempValue}\n    {min}\n    {max}\n    on:change={() => {\n      dispatch('change', parseInt(tempValue));\n    }} />\n\n</div>\n",
    "<script>\n  // components\n  import NText from \"../../../components/text/text.svelte\";\n  import NModal from \"../../../components/modal/modal.svelte\";\n  import NItem from \"../../../components/list-item/list-item.svelte\";\n  import NIcon from \"../../../components/icon/icon.svelte\";\n\n  //Utils\n  import { createEventDispatcher } from \"svelte\";\n  import { fade } from \"svelte/transition\";\n\n  // Stores\n  import { TrackerStore } from \"../../../store/tracker-store\";\n  import { Lang } from \"../../../store/lang\";\n\n  // Props\n  export let show = false;\n  export let multiple = false;\n  // export let multiple = false;\n\n  // Consts\n  const dispatch = createEventDispatcher();\n\n  // State\n  let state = {\n    selected: {},\n    trackers: [],\n    multiple\n  };\n\n  // Holder of the alphabet for the list\n  let alphaGroup = {};\n\n  // When tracker store loads. Turn trackers into array sorted by label\n  $: state.trackers = Object.keys($TrackerStore.trackers || {})\n    .map(tag => {\n      return $TrackerStore.trackers[tag];\n    })\n    .sort((a, b) => {\n      return a.label.substr(0, 1).toLowerCase() >=\n        b.label.substr(0, 1).toLowerCase()\n        ? 1\n        : -1;\n    });\n\n  // When selected, auto create an array of selected trackers\n  $: state.selectedArray = Object.keys(state.selected).map(tag => {\n    alphaGroup = {};\n    return state.selected[tag];\n  });\n\n  // If show changes, set selected to notihng\n  $: if (show) {\n    state.selected = {};\n    alphaGroup = {};\n  }\n\n  // Methods\n  const methods = {\n    toggle(tracker) {\n      if (state.selected.hasOwnProperty(tracker.tag)) {\n        delete state.selected[tracker.tag];\n        data = data;\n      } else {\n        state.selected[tracker.tag] = tracker;\n      }\n    },\n    close() {\n      dispatch(\"cancel\");\n    },\n    // Check if a letter has been shown\n    alphaGroupExists(tracker) {\n      if (state.trackers.length > 10) {\n        // get first letter\n        let alpha = tracker.label.substr(0, 1).toLowerCase();\n        // If it has value - return true...\n        if (alphaGroup.hasOwnProperty(alpha)) {\n          return true;\n        } else {\n          // Else - populate the alphaGroup, then return false\n          alphaGroup[alpha] = true;\n          return false;\n        }\n      } else {\n        // if it's less than 10 trackers - just show them without the letters\n        return true;\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\">:global(.tracker-selector-modal .sticky-top) {\n  position: sticky;\n  top: 0px; }\n</style>\n\n{#if show}\n  <NModal\n    title={Lang.t('tracker.tracker-selector')}\n    type=\"fullscreen\"\n    className=\"tracker-selector-modal\"\n    allowClose={true}\n    on:close={methods.close}>\n    <div class=\"list\">\n      {#each state.trackers as tracker}\n        {#if !methods.alphaGroupExists(tracker)}\n          <NItem\n            className=\"bg-light text-faded sticky-top\"\n            title={tracker.label.substr(0, 1).toUpperCase()} />\n        {/if}\n        <NItem\n          className=\"bottom-line {state.selected.hasOwnProperty(tracker.tag) ? 'bg-selected' : ''}\"\n          title={tracker.label}\n          on:click={() => {\n            methods.toggle(tracker);\n          }}>\n          <span slot=\"left\">\n            <NText size=\"lg\">{tracker.emoji}</NText>\n          </span>\n          <span slot=\"right\">\n            {#if state.selected.hasOwnProperty(tracker.tag)}\n              <NIcon name=\"checkmarkOutline\" className=\"fill-primary-bright\" />\n            {/if}\n          </span>\n        </NItem>\n      {/each}\n    </div>\n    <div slot=\"footer\" class=\"n-row\">\n      <button class=\"btn btn-light btn-lg w-100 mr-2\" on:click={methods.close}>\n        {Lang.t('general.close')}\n      </button>\n      {#if state.selectedArray.length > 0}\n        <button\n          transition:fade\n          class=\"btn btn-primary btn-lg w-100\"\n          on:click={() => {\n            dispatch('select', state.selectedArray);\n          }}>\n          Select\n        </button>\n      {/if}\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  /**\n   * History Tab\n   * A big collection of all things history\n   *\n   * TODO: Have it react when the ledger change, not a hard refresh\n   */\n\n  // svelte\n  import { navigate } from \"svelte-routing\";\n  import { onMount, onDestroy } from \"svelte\";\n\n  // components\n  import NItem from \"../components/list-item/list-item.svelte\";\n  import NPoints from \"../components/points/points.svelte\";\n  import NIcon from \"../components/icon/icon.svelte\";\n  import NLogListLoader from \"../components/log-list/log-list-loader.svelte\";\n  import NToolbar from \"../components/toolbar/toolbar.svelte\";\n  import NToolbarGrid from \"../components/toolbar/toolbar-grid.svelte\";\n  import NModal from \"../components/modal/modal.svelte\";\n  import Spinner from \"../components/spinner/spinner.svelte\";\n  import NDatePicker from \"../components/date-picker/date-picker.svelte\";\n  import LogItem from \"../components/list-item-log/list-item-log.svelte\";\n  import NSearchBar from \"../components/search-bar/search-bar.svelte\";\n\n  import config from \"../../config/global\";\n\n  // Containers\n  import NMap from \"../containers/map/map.svelte\";\n  import NLayout from \"../containers/layout/layout.svelte\";\n  // Utils\n  import dayjs from \"dayjs\";\n  import tick from \"../utils/tick/tick\";\n\n  // Stores\n  import { UserStore } from \"../store/user\";\n  import { Interact } from \"../store/interact\";\n  import { TrackerStore } from \"../store/tracker-store\";\n  import { LedgerStore } from \"../store/ledger\";\n  import { Lang } from \"../store/lang\";\n\n  import { HistoryPage } from \"../store/history-page\";\n\n  /**\n   * I've messed this all up again. but it's faster and more responsivle\n   * TODO: refactor so it's clean and using the proper amount of Store vs local\n   */\n\n  let datePicker;\n  let searchInput;\n  let appTitle = null;\n  let showSearch = false;\n\n  const state = {\n    date: dayjs(new Date()),\n    time_format: config.book_time_format,\n    logs: [],\n    trackers: {},\n    ledger: null,\n    searchTerm: \"\",\n    searchResults: null,\n    searchMode: false,\n    selected: {},\n    selectCount: 0,\n    editMode: false,\n    showDatePicker: false,\n    location: {\n      name: null,\n      lat: null,\n      lng: null\n    },\n    locations: [],\n    loading: true,\n    showAllLocations: false\n  }; // Assign State to compiled history page\n\n  let refreshing = false;\n\n  let local = {\n    showDatePicker: false,\n    datePickerValue: null,\n    searchMode: false\n  };\n\n  // $: searchMode = (state.searchTerm || \"\").length ? true : false;\n  let searchMode = false;\n  $: if (state.searchTerm && !searchMode) {\n    searchMode = true;\n  }\n\n  let logs = []; // holder of the logs\n  let searchLogs = undefined; // hodler of searched logs\n  let loading = true;\n  let book = undefined;\n  let locations = [];\n  let dayScore = 0;\n\n  // Used for checking things\n  const checks = {\n    list_date: {}\n  };\n\n  /// Watchers for when we're in edit mode\n  // and when we have selected more than one.\n\n  let isToday = true;\n\n  // If the date changes - check to see if it's still today\n  let activeDate;\n  $: if (state.date && state.date !== activeDate) {\n    activeDate = state.date;\n    isToday = new Date().toDateString() == state.date.toDate().toDateString();\n  }\n\n  // Filter logs for today\n  const filterActiveDate = log => {\n    return (\n      log.end >=\n        state.date\n          .startOf(\"day\")\n          .toDate()\n          .getTime() &&\n      log.end <=\n        state.date\n          .endOf(\"day\")\n          .toDate()\n          .getTime()\n    );\n  };\n\n  $: appTitle = `History ${state.date.format(\"YYYY-MM-DD\")}`;\n\n  $: if (searchLogs || logs) {\n    locations = (searchLogs || logs)\n      .filter(log => {\n        return log.lat;\n      })\n      .map(log => {\n        return {\n          lat: log.lat,\n          lng: log.lng,\n          name: log.location,\n          log: log\n        };\n      });\n  }\n\n  // Methods\n  const methods = {\n    toggleSearch() {\n      if (searchMode) {\n        state.searchResults = null;\n        state.searchTerm = null;\n        searchMode = false;\n      } else {\n        searchMode = true;\n      }\n    },\n\n    async doSearch(event) {\n      state.searchTerm = null;\n      let trackableElement = event.detail;\n      tick(100);\n      if (trackableElement.type == \"tracker\") {\n        state.searchTerm = `#${trackableElement.id}`;\n      } else {\n        state.searchTerm = `${trackableElement.raw}`;\n      }\n      showSearch = true;\n      methods.onSearchEnter();\n    },\n\n    async textClick(event) {\n      let trackableElement = event.detail;\n      let tracker =\n        trackableElement.type == \"tracker\"\n          ? TrackerStore.getByTag(trackableElement.id)\n          : null;\n\n      const buttons = [\n        {\n          title: `View stats`,\n          click: () => {\n            if (tracker) {\n              Interact.openStats(`#${trackableElement.id}`);\n            } else {\n              Interact.openStats(trackableElement.raw);\n            }\n          }\n        },\n        {\n          title: `Search for ${tracker ? tracker.label : trackableElement.raw}`,\n          click: () => {\n            methods.doSearch(event);\n          }\n        }\n      ];\n      if (trackableElement.type == \"person\") {\n        buttons.push({\n          title: `Check-In`,\n          click: () => {\n            Interact.person(trackableElement.id);\n          }\n        });\n      }\n      Interact.popmenu({\n        title: `${tracker ? tracker.label : trackableElement.raw} options`,\n        buttons: buttons\n      });\n    },\n    async getLogs(fresh) {\n      fresh = fresh ? fresh : false;\n      loading = true;\n      // Query the Ledger for Posts on this day.\n      logs = await LedgerStore.query({\n        start: state.date.startOf(\"day\").toDate(),\n        end: state.date.endOf(\"day\").toDate(),\n        fresh: fresh\n      });\n\n      loading = false;\n      return logs;\n    },\n    clearLocation() {\n      state.location.name = null;\n      state.location.lat = null;\n      state.location.lng = null;\n    },\n    clearSearch() {\n      showSearch = false;\n      state.searchTerm = \"\";\n    },\n    previous() {\n      methods.getDate(state.date.subtract(1, \"day\"));\n    },\n    getDate(date) {\n      state.date = date;\n      methods.getLogs();\n    },\n    next() {\n      methods.getDate(state.date.add(1, \"day\"));\n    },\n    goto(date) {\n      state.date = date;\n      methods.getLogs();\n    },\n    searchChange(evt) {\n      state.searchTerm = evt.detail;\n      showSearch = false;\n      window.scrollTo(0, 0);\n    },\n    async onSearchEnter(evt) {\n      await tick(100);\n      window.scrollTo(0, 0);\n      showSearch = true;\n    },\n    trackerTapped(tracker, log) {\n      Interact.openStats(`#${tracker.tag}`);\n    },\n    showLogOptions(log) {\n      Interact.logOptions(log).then(action => {\n        if (searchMode) {\n          methods.refreshSearch();\n        }\n      });\n    },\n    selectDate() {\n      let ranges = [\n        {\n          time: 90,\n          title: \"90 Days Back\",\n          unit: \"day\"\n        },\n        {\n          time: 180,\n          title: \"6 Months Back\",\n          unit: \"day\"\n        },\n        {\n          time: 1,\n          title: \"1 Year Back\",\n          unit: \"year\"\n        },\n        {\n          time: 2,\n          title: \"2 Years Back\",\n          unit: \"year\"\n        },\n        {\n          time: -1,\n          title: \"Select Date...\",\n          unit: \"day\"\n        }\n      ];\n\n      if (!isToday) {\n        ranges.unshift({\n          days: 0,\n          title: \"Go to Today\"\n        });\n      }\n\n      Interact.popmenu({\n        buttons: ranges.map(range => {\n          return {\n            title: range.title,\n            click: async () => {\n              if (range.time == -1) {\n                let date = await Interact.selectDate();\n                if (date) {\n                  methods.goto(dayjs(date));\n                }\n              } else if (range.time === undefined || range.time === 0) {\n                methods.goto(dayjs(new Date()));\n              } else {\n                methods.goto(\n                  state.date.subtract(range.time || 0, range.unit || \"day\")\n                );\n              }\n            }\n          };\n        })\n      });\n    }\n  };\n\n  async function refresh() {\n    refreshing = true;\n    console.log(\"Refresh history\");\n    await tick(500);\n    await methods.getLogs(true);\n    LedgerStore.getMemories();\n    refreshing = false;\n  }\n\n  // If a new Log is added, or changed update the list.\n  let onLogUpdate;\n  let onLogSaved;\n  let onLogsDeleted;\n\n  // WHen mounted.\n  onMount(() => {\n    if ((state.searchTerm || \"\").length > 1 && !searchLogs) {\n      methods.refreshSearch();\n    }\n    window.scrollTo(0, 0);\n    refresh();\n\n    onLogUpdate = LedgerStore.hook(\"onLogUpdate\", async log => {\n      await tick(600);\n      refresh();\n    });\n\n    onLogSaved = LedgerStore.hook(\"onLogSaved\", async log => {\n      await tick(600);\n      refresh();\n    });\n\n    onLogsDeleted = LedgerStore.hook(\"onLogsDeleted\", async () => {\n      await tick(600);\n      refresh();\n    });\n  });\n  onDestroy(() => {\n    // Unsubscribe\n    onLogSaved();\n    onLogUpdate();\n    onLogsDeleted();\n  });\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">hr {\n  margin: 0;\n  padding: 0;\n  border-top: solid 1px rgba(0, 0, 0, 0.2); }\n\n.map-btn {\n  position: absolute;\n  left: 10px;\n  bottom: 10px;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 12px; }\n\n.today-btn {\n  position: fixed;\n  left: 10px;\n  bottom: 10px;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 12px; }\n\n.close-btn {\n  left: auto;\n  right: 0px;\n  bottom: 0px !important; }\n\n.page-history .show-map {\n  height: 200px;\n  min-height: 200px;\n  max-height: 400px; }\n\n.header-date-control {\n  line-height: 100%;\n  flex-grow: 1;\n  flex-shrink: 1; }\n\n:global(.page-history .n-item .n-item:last-child) {\n  border-bottom: none !important; }\n</style>\n\n<NLayout pageTitle={appTitle}>\n\n  <header slot=\"header\">\n    <NToolbarGrid className=\"animate in {showSearch ? 'hidden' : 'visible'}\">\n      <button\n        slot=\"left\"\n        class=\"btn btn-clear btn-icon flex text-xl tap-icon\"\n        on:click={methods.previous}>\n        <NIcon name=\"chevronLeft\" />\n      </button>\n\n      <div\n        slot=\"main\"\n        class={isToday ? 'text-inverse-2' : 'not-today text-red'}\n        on:click={methods.selectDate}>\n\n        <span class=\"font-weight-bold mx-1\">{state.date.format('ddd')}</span>\n        {state.date.format('MMM Do YYYY')}\n        {#if refreshing}\n          <Spinner size=\"16\" />\n        {:else}\n          <NIcon name=\"chevronDown\" size=\"16\" style=\"margin-top:-2px;\" />\n        {/if}\n\n        <!-- end text middle -->\n      </div>\n      <button\n        slot=\"right\"\n        class=\"btn btn-clear btn-icon flex text-xl tap-icon\"\n        on:click={methods.next}>\n        <NIcon name=\"chevronRight\" />\n      </button>\n    </NToolbarGrid>\n\n    <!-- hasResults={(searchLogs || []).length > 0} -->\n\n    <NSearchBar\n      searchTerm={state.searchTerm}\n      placeholder=\"Search History...\"\n      style={showSearch ? 'margin-top:-20px;' : ''}\n      on:change={methods.searchChange}\n      on:clear={methods.clearSearch}\n      on:search={methods.onSearchEnter} />\n\n  </header>\n  <!-- end header-content header -->\n\n  <main slot=\"content\" class=\"page page-history\">\n\n    <div class=\"container p-0\">\n      {#if loading}\n        <div class=\"empty-notice\">\n          <Spinner />\n        </div>\n      {:else if logs.length === 0 && !showSearch}\n        {#if !searchMode}\n          <div class=\"empty-notice\" style=\"max-height:200px;\">\n            {Lang.t('history.no-records-found')}\n          </div>\n        {:else}\n          <div class=\"empty-notice\">\n            {state.date.format('YYYY')} {Lang.t('history.no-records-found')}\n          </div>\n        {/if}\n        <!-- If Logs and Not refreshing  -->\n      {:else if !showSearch}\n        <!-- Loop over logs -->\n        {#each logs as log, index}\n          <LogItem\n            {log}\n            on:trackerClick={event => {\n              methods.trackerTapped(event.detail.tracker, log);\n            }}\n            on:textClick={event => {\n              methods.textClick(event);\n            }}\n            on:moreClick={event => {\n              Interact.logOptions(log).then(() => {});\n            }} />\n          <!-- Show the Log Item -->\n        {/each}\n\n        <!--\n          Search Results\n          If Search Mode and We have Logs\n        -->\n      {:else if showSearch && state.searchTerm}\n        <NLogListLoader\n          term={state.searchTerm}\n          limit={12}\n          on:trackerClick={event => {\n            methods.trackerTapped(event.detail.tracker, event.detail.log);\n          }}\n          on:textClick={event => {\n            methods.textClick(event);\n          }}\n          on:moreClick={event => {\n            Interact.logOptions(event.detail).then(() => {});\n          }} />\n      {/if}\n\n      <!-- Show History if exists -->\n      {#if $LedgerStore.memories.length > 0 && !showSearch && isToday}\n        <div class=\"memories\">\n          {#each $LedgerStore.memories as log}\n            <div class=\"memories-log-header\">\n              <button\n                class=\"btn btn-clear\"\n                on:click={() => {\n                  methods.goto(dayjs(log.end));\n                }}>\n                From {dayjs(log.end).fromNow()}\n                <NIcon name=\"chevronRight\" className=\"fill-white\" />\n              </button>\n            </div>\n            <LogItem\n              className=\"aged\"\n              {log}\n              on:trackerClick={event => {\n                methods.trackerTapped(event.detail.tracker, log);\n              }}\n              on:textClick={event => {\n                methods.textClick(event);\n              }}\n              on:moreClick={event => {\n                Interact.logOptions(log).then(() => {});\n              }} />\n          {/each}\n        </div>\n      {/if}\n      <!-- end history -->\n\n    </div>\n\n    {#if locations.length && !loading && !state.searchTerm}\n      {#if !state.showAllLocations}\n        <div\n          class=\"mini-map closed\"\n          on:click={() => {\n            state.showAllLocations = !state.showAllLocations;\n          }}>\n          <NMap {locations} />\n        </div>\n      {:else}\n        <div class=\"mini-map opened\">\n          <NMap {locations} />\n          <button\n            class=\"btn btn-icon btn-round map-btn close-btn\"\n            on:click={() => {\n              state.showAllLocations = !state.showAllLocations;\n            }}>\n            <NIcon name=\"closeFilled\" size=\"48\" />\n          </button>\n\n        </div>\n      {/if}\n    {/if}\n    {#if !isToday && !searchMode}\n      <button\n        class=\"btn btn-sm btn-light btn-round today-btn\"\n        on:click={() => {\n          methods.goto(dayjs());\n        }}>\n        {Lang.t('general.today')}\n      </button>\n    {/if}\n  </main>\n  <!-- end header-content content -->\n\n</NLayout>\n\n{#if state.location.lat}\n  <NModal show={true} title={state.location.name || 'Location'}>\n    <NMap locations={[state.location]} />\n    <button\n      class=\"btn btn-lg btn-primary btn-block mb-0\"\n      on:click={methods.clearLocation}\n      slot=\"footer\">\n      Close\n    </button>\n  </NModal>\n{/if}\n\n{#if local.showDatePicker}\n  <NModal show={true} title={'Select a Date'}>\n    <NDatePicker\n      on:change={event => {\n        local.datePickerValue = event.detail;\n      }} />\n    <button\n      class=\"btn btn-lg btn-light btn-block m-0 mr-1\"\n      on:click={() => {\n        local.showDatePicker = false;\n      }}\n      slot=\"footer\">\n      Close\n    </button>\n    <button\n      class=\"btn btn-lg btn-primary btn-block m-0 ml-1\"\n      on:click={() => {\n        local.showDatePicker = false;\n        methods.goto(dayjs(local.datePickerValue));\n      }}\n      slot=\"footer\">\n      Go\n    </button>\n  </NModal>\n{/if}\n",
    "<script>\n  //Vendors\n  import { onMount } from \"svelte\";\n  import { navigate, Router, Route } from \"svelte-routing\";\n  import dayjs from \"dayjs\";\n\n  import Spinner from \"../components/spinner/spinner.svelte\";\n\n  // Modules\n  import Tracker from \"../modules/tracker/tracker\";\n  import NLog from \"../modules/nomie-log/nomie-log\";\n  import tick from \"../utils/tick/tick\";\n\n  // Modules\n  import NomieAPICli from \"../modules/nomie-api-cli/nomie-api-cli\";\n  import clipboard from \"../utils/clipboard/clipboard\";\n\n  // Components\n  import NText from \"../components/text/text.svelte\";\n  import NInput from \"../components/input/input.svelte\";\n  import NIcon from \"../components/icon/icon.svelte\";\n  import NButtonGroup from \"../components/button-group/button-group.svelte\";\n  import NToolbar from \"../components/toolbar/toolbar.svelte\";\n  import NItem from \"../components/list-item/list-item.svelte\";\n  import NToggle from \"../components/toggle-switch/toggle-switch.svelte\";\n  import NBackButton from \"../components/back-button/back-button.svelte\";\n  import NLogItem from \"../components/list-item-log/list-item-log.svelte\";\n\n  import NLayout from \"../containers/layout/layout.svelte\";\n\n  // containers\n  import NPage from \"../containers/layout/page.svelte\";\n  // config\n  import faq from \"../../config/faq\";\n  // Stores\n  import { LedgerStore } from \"../store/ledger\";\n  import { Interact } from \"../store/interact\";\n  import { UserStore } from \"../store/user\";\n  import { NomieAPI } from \"../store/napi\";\n  import { Lang } from \"../store/lang\";\n\n  let NAPI = new NomieAPICli({ domain: \"nomieapi.com/.netlify/functions\" });\n\n  let state = {\n    registered: false,\n    ready: false,\n    logs: [],\n    hidden: [],\n    apiKey: null,\n    privateKey: null,\n    view: \"settings\",\n    capturingId: null,\n    apiExample: null,\n    showPrivateKey: false\n  };\n\n  $: autoImportAPI = $NomieAPI.autoImport;\n\n  $: if (state.apiKey) {\n    state.apiExample = JSON.stringify(\n      { note: \"#mood(4)\", api_key: state.apiKey },\n      null,\n      2\n    );\n  }\n\n  function copy(key) {\n    clipboard(key);\n    Interact.toast(\"Copied\");\n  }\n\n  async function installAPI() {\n    let apiKey = null;\n    let privateKey = null;\n\n    apiKey = await Interact.prompt(\"API Key\");\n    privateKey = await Interact.prompt(\"Private Key\", \"Paste your privatekey\", {\n      valueType: \"textarea\"\n    });\n    let isValue = await NAPI.testAndSave(apiKey, privateKey);\n\n    if (isValue) {\n      state.registered = true;\n      state.ready = true;\n      state.apiKey = NAPI.apiKey;\n      state.privateKey = NAPI.privateKey;\n      Interact.alert(\n        Lang.t(\"general.success\", \"Success\"),\n        \"API and Private Key are valid\"\n      );\n    } else {\n      Interact.alert(\n        Lang.t(\"general.failure\", \"Failure\"),\n        \"Please check that the API and Private Key are valid\"\n      );\n    }\n  }\n\n  const methods = {\n    init() {\n      // Let's look for NomieAPICli\n\n      NAPI.onReady(() => {\n        if (NAPI.isRegistered()) {\n          methods.getLogs();\n          state.registered = true;\n          state.ready = true;\n          state.apiKey = NAPI.apiKey;\n          state.privateKey = NAPI.privateKey;\n        } else {\n          // capture.register();\n          state.registered = false;\n          state.ready = true;\n        }\n      });\n    },\n    async forget() {\n      let confirmed = await Interact.confirm(\n        \"Are you sure?\",\n        \"If you saved your API key and private key, you can restore it. Otherwise, it will be lost forever.\"\n      );\n      if (confirmed) {\n        await NAPI.forget();\n        state.registered = false;\n        state.apiKey = null;\n        state.privateKey = null;\n      }\n    },\n    toggleShowPrivateKey() {\n      state.showPrivateKey = !state.showPrivateKey;\n    },\n    register() {\n      state.ready = false;\n      state.message = \"Registering...\";\n      NAPI.register().then(payload => {\n        methods.init();\n      });\n    },\n    getLogs() {\n      state.ready = false;\n      return NAPI.logs().then(logs => {\n        state.ready = true;\n        state.logs = logs.sort((a, b) => {\n          return a.date > b.date ? -1 : 1;\n        });\n        return state.logs;\n      });\n    },\n    clear() {\n      NAPI.clear().then(() => {\n        state.logs = [];\n      });\n    },\n    unregister() {\n      Interact.confirm(\"Destroy this API Key?\", \"This cannot be undone\").then(\n        res => {\n          if (res === true) {\n            NAPI.unregister()\n              .then(() => {\n                state.registered = false;\n              })\n              .catch(e => {\n                Interact.alert(\"Error\", e.message);\n              });\n          }\n        }\n      );\n    },\n    confirmClear() {\n      Interact.confirm(\n        \"Clear Logs?\",\n        \"This will delete the remaining items and cannot be undone.\"\n      ).then(res => {\n        if (res) {\n          methods.clear();\n        }\n      });\n    },\n    async capture(log) {\n      state.capturingId = log.id;\n      await tick(1000);\n      let nLog = toLog(log); // convert to log\n      let response = LedgerStore.saveLog(nLog);\n      state.hidden.push(log.id);\n      state.hidden = state.hidden;\n      if (state.logs.length == state.hidden.length) {\n        // They've done all of them - clear it.\n        methods.clear();\n      }\n    },\n    setView(view) {\n      state.view = view;\n      if (view === \"captured\") {\n        methods.getLogs();\n      }\n    }\n  };\n\n  function toLog(apiLog) {\n    let log = new NLog(apiLog);\n    log.end = apiLog.date;\n    return log;\n  }\n\n  onMount(() => {\n    methods.init();\n  });\n</script>\n\n<style>\n  .n-list {\n    max-width: 100vw;\n    overflow: hidden;\n  }\n</style>\n\n<NLayout className=\"stats\" pageTitle=\"Nomie API\" showTabs={false}>\n\n  <header slot=\"header\">\n    <div class=\"n-toolbar-grid\">\n      <div class=\"left\">\n        <NBackButton />\n      </div>\n      <div class=\"main\">\n        <h1 class=\"title\">Nomie API</h1>\n      </div>\n      <div class=\"right\">\n        {#if state.registered}\n          <button\n            class=\"btn btn-clear tap-text mr-2\"\n            on:click={methods.getLogs}>\n            Check\n          </button>\n        {/if}\n      </div>\n    </div>\n    <div class=\"n-row px-3 container\">\n      {#if state.ready && state.registered}\n        <NButtonGroup\n          buttons={[{ label: 'Settings', active: state.view == 'settings', click() {\n                methods.setView('settings');\n              } }, { label: `Captured (${state.logs.length})`, active: state.view == 'captured', click() {\n                methods.setView('captured');\n              } }]} />\n      {/if}\n    </div>\n  </header>\n\n  <div class=\"container\">\n    <div item-divider class=\"pt-4\" />\n    {#if !state.ready}\n      <div class=\"empty-notice\">\n        <Spinner />\n      </div>\n    {:else if state.ready && !state.registered}\n      <NItem\n        className=\"clickable text-primary solo text-center mb-3\"\n        on:click={methods.register}\n        title=\"Generate API Key...\" />\n\n      <NItem className=\"just-content\">\n        <p>\n          Generating an API will create a unique public/private key combination.\n          The public key is stored in the Nomie API data store, your private key\n          will be stored in Nomie.\n        </p>\n        <p class=\"mt-2\">\n          When you POST data with the provided API, your content is encrypted\n          with the public key. Meaning, only your private key can decrypt the\n          content.\n        </p>\n        <p class=\"mt-2\">\n          FREE Plans have 10 slots to hold data. Each time you import into Nomie\n          it will clear all the slots. This will help limit run away web service\n          calls.\n        </p>\n      </NItem>\n\n      <NItem\n        className=\"clickable text-primary mt-4 solo text-center mb-3\"\n        on:click={installAPI}\n        title=\"Manually set API/Private Key...\" />\n    {:else if state.view === 'captured'}\n      <div class=\"n-list\">\n        {#each state.logs as apiLog, index}\n          {#if state.hidden.indexOf(apiLog.id) === -1}\n            <NLogItem log={toLog(apiLog)} hideMore={true} />\n            <div class=\"n-row px-2\">\n\n              <button\n                class=\"btn btn-outlined btn-success ml-2 btn-block my-0\"\n                disabled={state.capturingId === apiLog.id}\n                on:click={() => {\n                  methods.capture(apiLog);\n                }}>\n                {#if state.capturingId === apiLog.id}\n                  <Spinner color=\"#FFF\" size=\"24\" />\n                  Saving\n                {:else}\n                  <NIcon name=\"checkmarkOutline\" className=\"fill-white mr-2\" />\n                  Accept\n                {/if}\n              </button>\n            </div>\n          {/if}\n        {/each}\n\n      </div>\n      {#if state.logs.length > state.hidden.length}\n        <NItem className=\"bg-transparent\">\n          <button\n            on:click={methods.confirmClear}\n            class=\"btn btn-outlined btn-danger mr-1 btn-block my-0\">\n            <NIcon name=\"closeOutline\" className=\"fill-white mr-2\" />\n            Clear Remaining\n          </button>\n        </NItem>\n      {/if}\n      {#if !state.logs.length}\n        <div class=\"empty-notice\">No recent logs captured</div>\n      {/if}\n    {:else}\n      <!-- We're In the Settings Tab\n        -->\n      <NItem\n        title=\"Auto Accept\"\n        className=\"solo py-2 pt-3 mb-3\"\n        description=\"Auto import and accept API logs\">\n        <div slot=\"right\">\n          <NToggle\n            bind:value={autoImportAPI}\n            on:change={event => {\n              if (autoImportAPI === true) {\n                NomieAPI.disableAutoImport();\n              } else {\n                NomieAPI.enableAutoImport();\n              }\n            }} />\n        </div>\n      </NItem>\n\n      <div class=\"n-list solo mt-3 mb-3\">\n        <NItem className=\"\">\n          <NInput label=\"Your API Key\" bind:value={state.apiKey}>\n            <button\n              class=\"btn btn-clear tap-icon\"\n              slot=\"right\"\n              on:click={() => {\n                copy(state.apiKey);\n              }}>\n              <NIcon name=\"copy\" className=\"fill-primary-bright\" />\n            </button>\n          </NInput>\n          <!-- <div>\n          <input type=\"text\" class=\"form-control mt-1\" value={state.apiKey} />\n        </div> -->\n        </NItem>\n        <NItem\n          title=\"Private Key\"\n          on:click={() => (state.showPrivateKey = !state.showPrivateKey)}>\n          <button class=\"btn btn-clear text-primary-bright\" slot=\"right\">\n            <NIcon name=\"chevron{state.showPrivateKey ? 'Up' : 'Down'}\" />\n          </button>\n        </NItem>\n        {#if state.showPrivateKey}\n          <NItem className=\"px-3 pb-3\">\n            <div>\n              <textarea\n                type=\"text\"\n                class=\"form-control text-sm mt-1\"\n                style=\"min-height:100px;\"\n                value={state.privateKey} />\n              <div\n                class=\"p-2 text-center text-primary-bright text-sm\"\n                on:click={() => {\n                  copy(state.privateKey);\n                }}>\n                <NIcon\n                  name=\"copy\"\n                  size={20}\n                  className=\"fill-primary-bright mr-2\" />\n                Copy Private Key\n              </div>\n            </div>\n          </NItem>\n        {/if}\n      </div>\n\n      <NItem\n        title=\"Example POST\"\n        className=\"solo mt-3\"\n        on:click={() => (state.showExample = !state.showExample)}>\n        <button slot=\"right\" class=\"btn btn-clear\">\n          <NIcon name=\"chevron{state.showExample ? 'Up' : 'Down'}\" />\n        </button>\n      </NItem>\n      {#if state.showExample}\n        <NItem className=\"px-3 pb-2 bg-transparent\">\n          <p class=\"text-sm\">POST JSON to: https://nomieapi.com/log</p>\n          <textarea\n            class=\"form-control\"\n            style=\"height:120px\"\n            bind:value={state.apiExample} />\n          <p class=\"text-sm mt-1\">\n            fields: note, api_key, lat, lng, date, source\n          </p>\n        </NItem>\n      {/if}\n      <div item-divider />\n\n      <NItem\n        className=\"text-red text-center solo mt-4\"\n        on:click={methods.forget}>\n        Forget API Key...\n      </NItem>\n      <div item-divider />\n      <NItem\n        className=\"text-red text-center solo\"\n        on:click={methods.unregister}>\n        Destroy API Key...\n      </NItem>\n      <div item-divider />\n    {/if}\n  </div>\n\n</NLayout>\n",
    "<script>\n  import ButtonGroup from \"../components/button-group/button-group.svelte\";\n  import NItem from \"../components/list-item/list-item.svelte\";\n  import NSearchBar from \"../components/search-bar/search-bar.svelte\";\n\n  import NLayout from \"../containers/layout/layout.svelte\";\n  import { Lang } from \"../store/lang.js\";\n  import products from \"../../src-data/products.json\";\n\n  function openProduct(product) {\n    window.open(product.link);\n  }\n</script>\n\n<style lang=\"scss\">:global(.products) .image {\n  width: 80px;\n  height: 80px;\n  border-radius: 32%;\n  overflow: hidden;\n  background-position: center;\n  background-size: cover; }\n</style>\n\n<NLayout>\n  <div slot=\"header\" class=\"n-toolbar-grid\">\n    <div class=\"main\">Shop/Support Nomie</div>\n  </div>\n  <main slot=\"content\" class=\"products mt-4 container\">\n    <div class=\"n-list solo\">\n      {#each products as product}\n        <NItem\n          className=\"pt-1 pb-2\"\n          on:click={() => {\n            openProduct(product);\n          }}>\n          <div slot=\"left\" class=\"flex-column\">\n            <div class=\"image\" style=\"background-image:url({product.image})\" />\n            <div class=\"btn btn-badge bg-primary text-white\">\n              {product.price}\n            </div>\n          </div>\n          <main>\n            <div class=\"title\">{product.title}</div>\n            <div class=\"note text-sm\">{product.summary}</div>\n            <div class=\"text-primary text-xs\">{product.integration}</div>\n          </main>\n        </NItem>\n      {/each}\n    </div>\n    <NItem className=\"bg-transparent\">\n      <div class=\"note text-sm text-inverse-2\">\n        Products purchased from here will pay a small payout to Nomie.\n      </div>\n    </NItem>\n  </main>\n</NLayout>\n"
  ],
  "names": [],
  "mappings": "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"
}